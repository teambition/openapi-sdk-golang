/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// AppAPIService AppAPI service
type AppAPIService service

type ApiCheckUserVisibleInAppRequest struct {
	ctx context.Context
	ApiService *AppAPIService
	xTenantId *string
	checkUserVisibleInAppRequest *CheckUserVisibleInAppRequest
}

// 企业 ID
func (r ApiCheckUserVisibleInAppRequest) XTenantId(xTenantId string) ApiCheckUserVisibleInAppRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCheckUserVisibleInAppRequest) CheckUserVisibleInAppRequest(checkUserVisibleInAppRequest CheckUserVisibleInAppRequest) ApiCheckUserVisibleInAppRequest {
	r.checkUserVisibleInAppRequest = &checkUserVisibleInAppRequest
	return r
}

func (r ApiCheckUserVisibleInAppRequest) Execute() (*CheckUserVisibleInAppResponse, *http.Response, error) {
	return r.ApiService.CheckUserVisibleInAppExecute(r)
}

/*
CheckUserVisibleInApp 批量查询用户应用可见性

该接口用于批量查询用户在企业应用中可见性

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCheckUserVisibleInAppRequest

  @link https://open.teambition.com/docs/apis/6321c6cd912d20d3b5a4884b document
*/
func (a *AppAPIService) CheckUserVisibleInApp(ctx context.Context) ApiCheckUserVisibleInAppRequest {
	return ApiCheckUserVisibleInAppRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CheckUserVisibleInAppResponse
func (a *AppAPIService) CheckUserVisibleInAppExecute(r ApiCheckUserVisibleInAppRequest) (*CheckUserVisibleInAppResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CheckUserVisibleInAppResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/app/exists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.checkUserVisibleInAppRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAppAccessTokenRequest struct {
	ctx context.Context
	ApiService *AppAPIService
	getAppAccessTokenRequest *GetAppAccessTokenRequest
}

func (r ApiGetAppAccessTokenRequest) GetAppAccessTokenRequest(getAppAccessTokenRequest GetAppAccessTokenRequest) ApiGetAppAccessTokenRequest {
	r.getAppAccessTokenRequest = &getAppAccessTokenRequest
	return r
}

func (r ApiGetAppAccessTokenRequest) Execute() (*GetAppAccessTokenResponse, *http.Response, error) {
	return r.ApiService.GetAppAccessTokenExecute(r)
}

/*
GetAppAccessToken 获取应用授权Token



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAppAccessTokenRequest

  @link https://open.teambition.com/docs/apis/6687ac14c35daba54d25e578 document
*/
func (a *AppAPIService) GetAppAccessToken(ctx context.Context) ApiGetAppAccessTokenRequest {
	return ApiGetAppAccessTokenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAppAccessTokenResponse
func (a *AppAPIService) GetAppAccessTokenExecute(r ApiGetAppAccessTokenRequest) (*GetAppAccessTokenResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAppAccessTokenResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appToken"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.getAppAccessTokenRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
