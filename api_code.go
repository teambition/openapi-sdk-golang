/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CodeAPIService CodeAPI service
type CodeAPIService service

type ApiCreatePlatformRequest struct {
	ctx context.Context
	ApiService *CodeAPIService
	xTenantId *string
	updatePipelinePlatformRequest *UpdatePipelinePlatformRequest
}

// 企业 ID
func (r ApiCreatePlatformRequest) XTenantId(xTenantId string) ApiCreatePlatformRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreatePlatformRequest) UpdatePipelinePlatformRequest(updatePipelinePlatformRequest UpdatePipelinePlatformRequest) ApiCreatePlatformRequest {
	r.updatePipelinePlatformRequest = &updatePipelinePlatformRequest
	return r
}

func (r ApiCreatePlatformRequest) Execute() (*CreatePlatformResponse, *http.Response, error) {
	return r.ApiService.CreatePlatformExecute(r)
}

/*
CreatePlatform 创建流水线源平台



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreatePlatformRequest

  @link https://open.teambition.com/docs/apis/642699d77a073e002ba6fa26 document
*/
func (a *CodeAPIService) CreatePlatform(ctx context.Context) ApiCreatePlatformRequest {
	return ApiCreatePlatformRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreatePlatformResponse
func (a *CodeAPIService) CreatePlatformExecute(r ApiCreatePlatformRequest) (*CreatePlatformResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreatePlatformResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/code/pipeline/platforms"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updatePipelinePlatformRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPipelineRequest struct {
	ctx context.Context
	ApiService *CodeAPIService
	platformId string
	xTenantId *string
	code *string
}

// 企业 ID
func (r ApiGetPipelineRequest) XTenantId(xTenantId string) ApiGetPipelineRequest {
	r.xTenantId = &xTenantId
	return r
}

// 流水线code
func (r ApiGetPipelineRequest) Code(code string) ApiGetPipelineRequest {
	r.code = &code
	return r
}

func (r ApiGetPipelineRequest) Execute() (*GetPipelineResponse, *http.Response, error) {
	return r.ApiService.GetPipelineExecute(r)
}

/*
GetPipeline 根据code查询流水线



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformId 流水线源平台id
 @return ApiGetPipelineRequest

  @link https://open.teambition.com/docs/apis/63f868a65e4331002ae93af8 document
*/
func (a *CodeAPIService) GetPipeline(ctx context.Context, platformId string) ApiGetPipelineRequest {
	return ApiGetPipelineRequest{
		ApiService: a,
		ctx: ctx,
		platformId: platformId,
	}
}

// Execute executes the request
//  @return GetPipelineResponse
func (a *CodeAPIService) GetPipelineExecute(r ApiGetPipelineRequest) (*GetPipelineResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetPipelineResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/code/pipeline/get/{platformId}"
	localVarPath = strings.Replace(localVarPath, "{"+"platformId"+"}", url.PathEscape(parameterValueToString(r.platformId, "platformId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.code != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code", r.code, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPipelinePlatformRequest struct {
	ctx context.Context
	ApiService *CodeAPIService
	xTenantId *string
	name *string
}

// 企业 ID
func (r ApiGetPipelinePlatformRequest) XTenantId(xTenantId string) ApiGetPipelinePlatformRequest {
	r.xTenantId = &xTenantId
	return r
}

// 流水线源平台名称
func (r ApiGetPipelinePlatformRequest) Name(name string) ApiGetPipelinePlatformRequest {
	r.name = &name
	return r
}

func (r ApiGetPipelinePlatformRequest) Execute() (*GetPipelinePlatformResponse, *http.Response, error) {
	return r.ApiService.GetPipelinePlatformExecute(r)
}

/*
GetPipelinePlatform 根据名称查询流水线源平台



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPipelinePlatformRequest

  @link https://open.teambition.com/docs/apis/63f826f54493a7002b2b459e document
*/
func (a *CodeAPIService) GetPipelinePlatform(ctx context.Context) ApiGetPipelinePlatformRequest {
	return ApiGetPipelinePlatformRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetPipelinePlatformResponse
func (a *CodeAPIService) GetPipelinePlatformExecute(r ApiGetPipelinePlatformRequest) (*GetPipelinePlatformResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetPipelinePlatformResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/code/platform/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPlatformsRequest struct {
	ctx context.Context
	ApiService *CodeAPIService
	xTenantId *string
}

//  企业 ID
func (r ApiGetPlatformsRequest) XTenantId(xTenantId string) ApiGetPlatformsRequest {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiGetPlatformsRequest) Execute() (*GetPlatformsResponse, *http.Response, error) {
	return r.ApiService.GetPlatformsExecute(r)
}

/*
GetPlatforms 查询流水线源平台



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPlatformsRequest

  @link https://open.teambition.com/docs/apis/642697f07a073e002ba6f4b9 document
*/
func (a *CodeAPIService) GetPlatforms(ctx context.Context) ApiGetPlatformsRequest {
	return ApiGetPlatformsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetPlatformsResponse
func (a *CodeAPIService) GetPlatformsExecute(r ApiGetPlatformsRequest) (*GetPlatformsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetPlatformsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/code/pipeline/platforms"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSyncBuildsRequest struct {
	ctx context.Context
	ApiService *CodeAPIService
	platformId string
	pipelineId string
	xTenantId *string
	syncBuildsRequest *SyncBuildsRequest
}

// 企业 ID
func (r ApiSyncBuildsRequest) XTenantId(xTenantId string) ApiSyncBuildsRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiSyncBuildsRequest) SyncBuildsRequest(syncBuildsRequest SyncBuildsRequest) ApiSyncBuildsRequest {
	r.syncBuildsRequest = &syncBuildsRequest
	return r
}

func (r ApiSyncBuildsRequest) Execute() (*SyncBuildsResponse, *http.Response, error) {
	return r.ApiService.SyncBuildsExecute(r)
}

/*
SyncBuilds 同步构建信息



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformId 流水线源平台id
 @param pipelineId 流水线id
 @return ApiSyncBuildsRequest

  @link https://open.teambition.com/docs/apis/64269d517a073e002ba703e2 document
*/
func (a *CodeAPIService) SyncBuilds(ctx context.Context, platformId string, pipelineId string) ApiSyncBuildsRequest {
	return ApiSyncBuildsRequest{
		ApiService: a,
		ctx: ctx,
		platformId: platformId,
		pipelineId: pipelineId,
	}
}

// Execute executes the request
//  @return SyncBuildsResponse
func (a *CodeAPIService) SyncBuildsExecute(r ApiSyncBuildsRequest) (*SyncBuildsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SyncBuildsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/code/pipeline/platforms/{platformId}/pipelines/{pipelineId}/builds"
	localVarPath = strings.Replace(localVarPath, "{"+"platformId"+"}", url.PathEscape(parameterValueToString(r.platformId, "platformId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pipelineId"+"}", url.PathEscape(parameterValueToString(r.pipelineId, "pipelineId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.syncBuildsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSyncPipelinesRequest struct {
	ctx context.Context
	ApiService *CodeAPIService
	platformId string
	xTenantId *string
	platformId2 *string
	syncPipelinesRequest *SyncPipelinesRequest
}

// 企业 ID
func (r ApiSyncPipelinesRequest) XTenantId(xTenantId string) ApiSyncPipelinesRequest {
	r.xTenantId = &xTenantId
	return r
}

// 流水线源平台id
func (r ApiSyncPipelinesRequest) PlatformId2(platformId2 string) ApiSyncPipelinesRequest {
	r.platformId2 = &platformId2
	return r
}

// 
func (r ApiSyncPipelinesRequest) SyncPipelinesRequest(syncPipelinesRequest SyncPipelinesRequest) ApiSyncPipelinesRequest {
	r.syncPipelinesRequest = &syncPipelinesRequest
	return r
}

func (r ApiSyncPipelinesRequest) Execute() (*GetPipelineResponse, *http.Response, error) {
	return r.ApiService.SyncPipelinesExecute(r)
}

/*
SyncPipelines 同步流水线信息



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformId 流水线源平台id
 @return ApiSyncPipelinesRequest

  @link https://open.teambition.com/docs/apis/64269bdd7a073e002ba6fdf0 document
*/
func (a *CodeAPIService) SyncPipelines(ctx context.Context, platformId string) ApiSyncPipelinesRequest {
	return ApiSyncPipelinesRequest{
		ApiService: a,
		ctx: ctx,
		platformId: platformId,
	}
}

// Execute executes the request
//  @return GetPipelineResponse
func (a *CodeAPIService) SyncPipelinesExecute(r ApiSyncPipelinesRequest) (*GetPipelineResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetPipelineResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/code/pipeline/platforms/{platformId}/pipelines"
	localVarPath = strings.Replace(localVarPath, "{"+"platformId"+"}", url.PathEscape(parameterValueToString(r.platformId, "platformId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.platformId2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platformId", r.platformId2, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.syncPipelinesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePipelineParamsRequest struct {
	ctx context.Context
	ApiService *CodeAPIService
	platformId string
	pipelineId string
	xTenantId *string
	updatePipelineParamsRequest *UpdatePipelineParamsRequest
}

// 企业 ID
func (r ApiUpdatePipelineParamsRequest) XTenantId(xTenantId string) ApiUpdatePipelineParamsRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdatePipelineParamsRequest) UpdatePipelineParamsRequest(updatePipelineParamsRequest UpdatePipelineParamsRequest) ApiUpdatePipelineParamsRequest {
	r.updatePipelineParamsRequest = &updatePipelineParamsRequest
	return r
}

func (r ApiUpdatePipelineParamsRequest) Execute() (*UpdatePipelinePlatformResponse, *http.Response, error) {
	return r.ApiService.UpdatePipelineParamsExecute(r)
}

/*
UpdatePipelineParams 同步流水线构建参数信息

更新参数

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformId 流水线源平台id
 @param pipelineId 流水线id
 @return ApiUpdatePipelineParamsRequest

  @link https://open.teambition.com/docs/apis/63f865b05e4331002ae92888 document
*/
func (a *CodeAPIService) UpdatePipelineParams(ctx context.Context, platformId string, pipelineId string) ApiUpdatePipelineParamsRequest {
	return ApiUpdatePipelineParamsRequest{
		ApiService: a,
		ctx: ctx,
		platformId: platformId,
		pipelineId: pipelineId,
	}
}

// Execute executes the request
//  @return UpdatePipelinePlatformResponse
func (a *CodeAPIService) UpdatePipelineParamsExecute(r ApiUpdatePipelineParamsRequest) (*UpdatePipelinePlatformResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdatePipelinePlatformResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/code/pipeline/platforms/{platformId}/pipelines/{pipelineId}/buildParams"
	localVarPath = strings.Replace(localVarPath, "{"+"platformId"+"}", url.PathEscape(parameterValueToString(r.platformId, "platformId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pipelineId"+"}", url.PathEscape(parameterValueToString(r.pipelineId, "pipelineId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updatePipelineParamsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePipelinePlatformRequest struct {
	ctx context.Context
	ApiService *CodeAPIService
	platformId string
	xTenantId *string
	updatePipelinePlatformRequest *UpdatePipelinePlatformRequest
}

// 企业 ID
func (r ApiUpdatePipelinePlatformRequest) XTenantId(xTenantId string) ApiUpdatePipelinePlatformRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdatePipelinePlatformRequest) UpdatePipelinePlatformRequest(updatePipelinePlatformRequest UpdatePipelinePlatformRequest) ApiUpdatePipelinePlatformRequest {
	r.updatePipelinePlatformRequest = &updatePipelinePlatformRequest
	return r
}

func (r ApiUpdatePipelinePlatformRequest) Execute() (*UpdatePipelinePlatformResponse, *http.Response, error) {
	return r.ApiService.UpdatePipelinePlatformExecute(r)
}

/*
UpdatePipelinePlatform 更新流水线源平台



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param platformId 流水线源平台id
 @return ApiUpdatePipelinePlatformRequest

  @link https://open.teambition.com/docs/apis/63f822db4493a7002b2b384f document
*/
func (a *CodeAPIService) UpdatePipelinePlatform(ctx context.Context, platformId string) ApiUpdatePipelinePlatformRequest {
	return ApiUpdatePipelinePlatformRequest{
		ApiService: a,
		ctx: ctx,
		platformId: platformId,
	}
}

// Execute executes the request
//  @return UpdatePipelinePlatformResponse
func (a *CodeAPIService) UpdatePipelinePlatformExecute(r ApiUpdatePipelinePlatformRequest) (*UpdatePipelinePlatformResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdatePipelinePlatformResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/code/platform/update/{platformId}"
	localVarPath = strings.Replace(localVarPath, "{"+"platformId"+"}", url.PathEscape(parameterValueToString(r.platformId, "platformId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updatePipelinePlatformRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
