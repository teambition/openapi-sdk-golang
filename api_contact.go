/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ContactAPIService ContactAPI service
type ContactAPIService service

type ApiAddDepartmentMembersRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	addDepartmentMembersRequest *AddDepartmentMembersRequest
}

// 企业 ID
func (r ApiAddDepartmentMembersRequest) XTenantId(xTenantId string) ApiAddDepartmentMembersRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiAddDepartmentMembersRequest) AddDepartmentMembersRequest(addDepartmentMembersRequest AddDepartmentMembersRequest) ApiAddDepartmentMembersRequest {
	r.addDepartmentMembersRequest = &addDepartmentMembersRequest
	return r
}

func (r ApiAddDepartmentMembersRequest) Execute() (*ListDepartmentMembersResponse, *http.Response, error) {
	return r.ApiService.AddDepartmentMembersExecute(r)
}

/*
AddDepartmentMembers 添加部门成员

该接口用于添加部门成员

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddDepartmentMembersRequest

  @link https://open.teambition.com/docs/apis/667d5158912d20d3b5b76029 document
*/
func (a *ContactAPIService) AddDepartmentMembers(ctx context.Context) ApiAddDepartmentMembersRequest {
	return ApiAddDepartmentMembersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListDepartmentMembersResponse
func (a *ContactAPIService) AddDepartmentMembersExecute(r ApiAddDepartmentMembersRequest) (*ListDepartmentMembersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListDepartmentMembersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/department/members"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.addDepartmentMembersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchGetOrgMembersRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	batchGetOrgMembersRequest *BatchGetOrgMembersRequest
}

// 企业 ID
func (r ApiBatchGetOrgMembersRequest) XTenantId(xTenantId string) ApiBatchGetOrgMembersRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiBatchGetOrgMembersRequest) BatchGetOrgMembersRequest(batchGetOrgMembersRequest BatchGetOrgMembersRequest) ApiBatchGetOrgMembersRequest {
	r.batchGetOrgMembersRequest = &batchGetOrgMembersRequest
	return r
}

func (r ApiBatchGetOrgMembersRequest) Execute() (*ListOrgAdminsResponse, *http.Response, error) {
	return r.ApiService.BatchGetOrgMembersExecute(r)
}

/*
BatchGetOrgMembers 批量获取企业成员

该接口用于批量获取企业成员信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchGetOrgMembersRequest

  @link https://open.teambition.com/docs/apis/6321c6ce912d20d3b5a48b59 document
*/
func (a *ContactAPIService) BatchGetOrgMembers(ctx context.Context) ApiBatchGetOrgMembersRequest {
	return ApiBatchGetOrgMembersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListOrgAdminsResponse
func (a *ContactAPIService) BatchGetOrgMembersExecute(r ApiBatchGetOrgMembersRequest) (*ListOrgAdminsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListOrgAdminsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/member/batchGet"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.batchGetOrgMembersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCountOrgMembersRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	filter *string
}

// 企业 ID
func (r ApiCountOrgMembersRequest) XTenantId(xTenantId string) ApiCountOrgMembersRequest {
	r.xTenantId = &xTenantId
	return r
}

// 该参数用于指定查询范围，initiate：新加入的成员,disabled：已禁用的成员,enabled：未禁用的成员,external：外部成员
func (r ApiCountOrgMembersRequest) Filter(filter string) ApiCountOrgMembersRequest {
	r.filter = &filter
	return r
}

func (r ApiCountOrgMembersRequest) Execute() (*CountOrgMembersResponse, *http.Response, error) {
	return r.ApiService.CountOrgMembersExecute(r)
}

/*
CountOrgMembers 获取企业成员数量

该接口用于获取企业成员数量

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCountOrgMembersRequest

  @link https://open.teambition.com/docs/apis/6321c6ce912d20d3b5a48b29 document
*/
func (a *ContactAPIService) CountOrgMembers(ctx context.Context) ApiCountOrgMembersRequest {
	return ApiCountOrgMembersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountOrgMembersResponse
func (a *ContactAPIService) CountOrgMembersExecute(r ApiCountOrgMembersRequest) (*CountOrgMembersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountOrgMembersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/member/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateDepartmentRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	createDepartmentRequest *CreateDepartmentRequest
}

// 企业 ID
func (r ApiCreateDepartmentRequest) XTenantId(xTenantId string) ApiCreateDepartmentRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateDepartmentRequest) CreateDepartmentRequest(createDepartmentRequest CreateDepartmentRequest) ApiCreateDepartmentRequest {
	r.createDepartmentRequest = &createDepartmentRequest
	return r
}

func (r ApiCreateDepartmentRequest) Execute() (*GetDepartmentResponse, *http.Response, error) {
	return r.ApiService.CreateDepartmentExecute(r)
}

/*
CreateDepartment 创建部门

该接口用于创建部门

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDepartmentRequest

  @link https://open.teambition.com/docs/apis/632828c3912d20d3b5aca5ab document
*/
func (a *ContactAPIService) CreateDepartment(ctx context.Context) ApiCreateDepartmentRequest {
	return ApiCreateDepartmentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetDepartmentResponse
func (a *ContactAPIService) CreateDepartmentExecute(r ApiCreateDepartmentRequest) (*GetDepartmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDepartmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/department/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createDepartmentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateOrgRoleRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	organizationId string
	xTenantId *string
	createOrgRoleRequest *CreateOrgRoleRequest
}

// 租户 ID
func (r ApiCreateOrgRoleRequest) XTenantId(xTenantId string) ApiCreateOrgRoleRequest {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiCreateOrgRoleRequest) CreateOrgRoleRequest(createOrgRoleRequest CreateOrgRoleRequest) ApiCreateOrgRoleRequest {
	r.createOrgRoleRequest = &createOrgRoleRequest
	return r
}

func (r ApiCreateOrgRoleRequest) Execute() (*CreateOrgRoleResponse, *http.Response, error) {
	return r.ApiService.CreateOrgRoleExecute(r)
}

/*
CreateOrgRole 创建企业角色

创建企业角色

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId 企业ID
 @return ApiCreateOrgRoleRequest

  @link https://open.teambition.com/docs/apis/67d275d8713c85f499e9437c document
*/
func (a *ContactAPIService) CreateOrgRole(ctx context.Context, organizationId string) ApiCreateOrgRoleRequest {
	return ApiCreateOrgRoleRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return CreateOrgRoleResponse
func (a *ContactAPIService) CreateOrgRoleExecute(r ApiCreateOrgRoleRequest) (*CreateOrgRoleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateOrgRoleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/organizations/{organizationId}/role/create"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createOrgRoleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDepartmentRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	deleteDepartmentRequest *DeleteDepartmentRequest
}

// 企业 ID
func (r ApiDeleteDepartmentRequest) XTenantId(xTenantId string) ApiDeleteDepartmentRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiDeleteDepartmentRequest) DeleteDepartmentRequest(deleteDepartmentRequest DeleteDepartmentRequest) ApiDeleteDepartmentRequest {
	r.deleteDepartmentRequest = &deleteDepartmentRequest
	return r
}

func (r ApiDeleteDepartmentRequest) Execute() (*UpdateOrgMemberResponse, *http.Response, error) {
	return r.ApiService.DeleteDepartmentExecute(r)
}

/*
DeleteDepartment 删除部门

该接口用于删除部门

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteDepartmentRequest

  @link https://open.teambition.com/docs/apis/632828c3912d20d3b5aca62a document
*/
func (a *ContactAPIService) DeleteDepartment(ctx context.Context) ApiDeleteDepartmentRequest {
	return ApiDeleteDepartmentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpdateOrgMemberResponse
func (a *ContactAPIService) DeleteDepartmentExecute(r ApiDeleteDepartmentRequest) (*UpdateOrgMemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateOrgMemberResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/department/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.deleteDepartmentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteOrgMemberRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	xOperatorID *string
	enableOrgMemberRequest *EnableOrgMemberRequest
}

// 企业 ID
func (r ApiDeleteOrgMemberRequest) XTenantId(xTenantId string) ApiDeleteOrgMemberRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiDeleteOrgMemberRequest) XOperatorID(xOperatorID string) ApiDeleteOrgMemberRequest {
	r.xOperatorID = &xOperatorID
	return r
}

// 
func (r ApiDeleteOrgMemberRequest) EnableOrgMemberRequest(enableOrgMemberRequest EnableOrgMemberRequest) ApiDeleteOrgMemberRequest {
	r.enableOrgMemberRequest = &enableOrgMemberRequest
	return r
}

func (r ApiDeleteOrgMemberRequest) Execute() (*DeleteOrgMemberResponse, *http.Response, error) {
	return r.ApiService.DeleteOrgMemberExecute(r)
}

/*
DeleteOrgMember 删除企业成员

该接口用于删除企业的成员

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteOrgMemberRequest

  @link https://open.teambition.com/docs/apis/6321c6ce912d20d3b5a48afb document
*/
func (a *ContactAPIService) DeleteOrgMember(ctx context.Context) ApiDeleteOrgMemberRequest {
	return ApiDeleteOrgMemberRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeleteOrgMemberResponse
func (a *ContactAPIService) DeleteOrgMemberExecute(r ApiDeleteOrgMemberRequest) (*DeleteOrgMemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteOrgMemberResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/member/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Operator-ID", r.xOperatorID, "")
	}
	// body params
	localVarPostBody = r.enableOrgMemberRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDisableOrgMemberRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	enableOrgMemberRequest *EnableOrgMemberRequest
}

// 企业 ID
func (r ApiDisableOrgMemberRequest) XTenantId(xTenantId string) ApiDisableOrgMemberRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiDisableOrgMemberRequest) EnableOrgMemberRequest(enableOrgMemberRequest EnableOrgMemberRequest) ApiDisableOrgMemberRequest {
	r.enableOrgMemberRequest = &enableOrgMemberRequest
	return r
}

func (r ApiDisableOrgMemberRequest) Execute() (*UpdateOrgMemberResponse, *http.Response, error) {
	return r.ApiService.DisableOrgMemberExecute(r)
}

/*
DisableOrgMember 停用企业成员账号

该接口用于停用指定企业成员的账号，停用后用户将不能访问指定企业

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDisableOrgMemberRequest

  @link https://open.teambition.com/docs/apis/6321c6ce912d20d3b5a48abe document
*/
func (a *ContactAPIService) DisableOrgMember(ctx context.Context) ApiDisableOrgMemberRequest {
	return ApiDisableOrgMemberRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpdateOrgMemberResponse
func (a *ContactAPIService) DisableOrgMemberExecute(r ApiDisableOrgMemberRequest) (*UpdateOrgMemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateOrgMemberResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/member/disable"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.enableOrgMemberRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnableOrgMemberRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	enableOrgMemberRequest *EnableOrgMemberRequest
}

// 企业 ID
func (r ApiEnableOrgMemberRequest) XTenantId(xTenantId string) ApiEnableOrgMemberRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiEnableOrgMemberRequest) EnableOrgMemberRequest(enableOrgMemberRequest EnableOrgMemberRequest) ApiEnableOrgMemberRequest {
	r.enableOrgMemberRequest = &enableOrgMemberRequest
	return r
}

func (r ApiEnableOrgMemberRequest) Execute() (*UpdateOrgMemberResponse, *http.Response, error) {
	return r.ApiService.EnableOrgMemberExecute(r)
}

/*
EnableOrgMember 启用企业成员账号

该接口用于启用指定企业成员的账号，启用后用户可以访问指定企业

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEnableOrgMemberRequest

  @link https://open.teambition.com/docs/apis/6321c6ce912d20d3b5a48a8e document
*/
func (a *ContactAPIService) EnableOrgMember(ctx context.Context) ApiEnableOrgMemberRequest {
	return ApiEnableOrgMemberRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpdateOrgMemberResponse
func (a *ContactAPIService) EnableOrgMemberExecute(r ApiEnableOrgMemberRequest) (*UpdateOrgMemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateOrgMemberResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/member/enable"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.enableOrgMemberRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDepartmentRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	deptId *string
}

// 企业 ID
func (r ApiGetDepartmentRequest) XTenantId(xTenantId string) ApiGetDepartmentRequest {
	r.xTenantId = &xTenantId
	return r
}

// 部门 ID
func (r ApiGetDepartmentRequest) DeptId(deptId string) ApiGetDepartmentRequest {
	r.deptId = &deptId
	return r
}

func (r ApiGetDepartmentRequest) Execute() (*GetDepartmentResponse, *http.Response, error) {
	return r.ApiService.GetDepartmentExecute(r)
}

/*
GetDepartment 获取部门详情

该接口用于获取部门详情

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDepartmentRequest

  @link https://open.teambition.com/docs/apis/632828c3912d20d3b5aca571 document
*/
func (a *ContactAPIService) GetDepartment(ctx context.Context) ApiGetDepartmentRequest {
	return ApiGetDepartmentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetDepartmentResponse
func (a *ContactAPIService) GetDepartmentExecute(r ApiGetDepartmentRequest) (*GetDepartmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDepartmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/department/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deptId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deptId", r.deptId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRoleInfoRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	roleId *string
}

// 企业 ID
func (r ApiGetRoleInfoRequest) XTenantId(xTenantId string) ApiGetRoleInfoRequest {
	r.xTenantId = &xTenantId
	return r
}

// 角色 ID
func (r ApiGetRoleInfoRequest) RoleId(roleId string) ApiGetRoleInfoRequest {
	r.roleId = &roleId
	return r
}

func (r ApiGetRoleInfoRequest) Execute() (*GetRoleInfoResponse, *http.Response, error) {
	return r.ApiService.GetRoleInfoExecute(r)
}

/*
GetRoleInfo 获取角色详情

该接口用于获取角色详情
- 查询角色下成员,详见 [获取企业成员列表](api.operationId=GetOrgMembers)
- 更新企业成员角色,详见 [更新企业成员](api.operationId=UpdateOrgMembers)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRoleInfoRequest

  @link https://open.teambition.com/docs/apis/64d34c89912d20d3b54f029c document
*/
func (a *ContactAPIService) GetRoleInfo(ctx context.Context) ApiGetRoleInfoRequest {
	return ApiGetRoleInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetRoleInfoResponse
func (a *ContactAPIService) GetRoleInfoExecute(r ApiGetRoleInfoRequest) (*GetRoleInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRoleInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/role/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.roleId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roleId", r.roleId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDepartmentMembersRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	deptId *string
	omitSubDepartment *string
	pageToken *string
	pageSize *int32
}

// 企业 ID
func (r ApiListDepartmentMembersRequest) XTenantId(xTenantId string) ApiListDepartmentMembersRequest {
	r.xTenantId = &xTenantId
	return r
}

// 部门 ID
func (r ApiListDepartmentMembersRequest) DeptId(deptId string) ApiListDepartmentMembersRequest {
	r.deptId = &deptId
	return r
}

// 是否忽略子孙部门成员
func (r ApiListDepartmentMembersRequest) OmitSubDepartment(omitSubDepartment string) ApiListDepartmentMembersRequest {
	r.omitSubDepartment = &omitSubDepartment
	return r
}

// 分页标记，第一次请求不填或者空字符串，表示从头开始遍历；分页查询结果还有更多项时返回 nextPageToken，下次遍历可采用该 nextPageToken 入参 pageToken 获取查询结果，示例值：\&quot;cfcb90voe9jct71bqkfg\&quot;
func (r ApiListDepartmentMembersRequest) PageToken(pageToken string) ApiListDepartmentMembersRequest {
	r.pageToken = &pageToken
	return r
}

// 分页大小, 示例值：10
func (r ApiListDepartmentMembersRequest) PageSize(pageSize int32) ApiListDepartmentMembersRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListDepartmentMembersRequest) Execute() (*ListDepartmentMembersResponse, *http.Response, error) {
	return r.ApiService.ListDepartmentMembersExecute(r)
}

/*
ListDepartmentMembers 获取部门成员列表

该接口用于获取企业部门成员列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDepartmentMembersRequest

  @link https://open.teambition.com/docs/apis/6321c6ce912d20d3b5a48bfc document
*/
func (a *ContactAPIService) ListDepartmentMembers(ctx context.Context) ApiListDepartmentMembersRequest {
	return ApiListDepartmentMembersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListDepartmentMembersResponse
func (a *ContactAPIService) ListDepartmentMembersExecute(r ApiListDepartmentMembersRequest) (*ListDepartmentMembersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListDepartmentMembersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/department/members"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deptId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deptId", r.deptId, "")
	}
	if r.omitSubDepartment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "omitSubDepartment", r.omitSubDepartment, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDepartmentsRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	pageToken *string
	pageSize *int32
}

// 企业 ID
func (r ApiListDepartmentsRequest) XTenantId(xTenantId string) ApiListDepartmentsRequest {
	r.xTenantId = &xTenantId
	return r
}

// 分页标记，第一次请求不填或者空字符串，表示从头开始遍历；分页查询结果还有更多项时返回 nextPageToken，下次遍历可采用该 nextPageToken 入参 pageToken 获取查询结果，示例值：\&quot;cfcb90voe9jct71bqkfg\&quot;
func (r ApiListDepartmentsRequest) PageToken(pageToken string) ApiListDepartmentsRequest {
	r.pageToken = &pageToken
	return r
}

// 分页大小, 示例值：10
func (r ApiListDepartmentsRequest) PageSize(pageSize int32) ApiListDepartmentsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListDepartmentsRequest) Execute() (*ListDepartmentsResponse, *http.Response, error) {
	return r.ApiService.ListDepartmentsExecute(r)
}

/*
ListDepartments 获取企业部门列表

该接口用于获取企业的部门列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDepartmentsRequest

  @link https://open.teambition.com/docs/apis/6321c6ce912d20d3b5a48bbc document
*/
func (a *ContactAPIService) ListDepartments(ctx context.Context) ApiListDepartmentsRequest {
	return ApiListDepartmentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListDepartmentsResponse
func (a *ContactAPIService) ListDepartmentsExecute(r ApiListDepartmentsRequest) (*ListDepartmentsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListDepartmentsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/departments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOrgAdminsRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
}

// 企业 ID
func (r ApiListOrgAdminsRequest) XTenantId(xTenantId string) ApiListOrgAdminsRequest {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiListOrgAdminsRequest) Execute() (*ListOrgAdminsResponse, *http.Response, error) {
	return r.ApiService.ListOrgAdminsExecute(r)
}

/*
ListOrgAdmins 获取企业的管理员（含拥有者）

该接口用于获取企业的管理员，包括拥有者

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListOrgAdminsRequest

  @link https://open.teambition.com/docs/apis/6321c6ce912d20d3b5a48974 document
*/
func (a *ContactAPIService) ListOrgAdmins(ctx context.Context) ApiListOrgAdminsRequest {
	return ApiListOrgAdminsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListOrgAdminsResponse
func (a *ContactAPIService) ListOrgAdminsExecute(r ApiListOrgAdminsRequest) (*ListOrgAdminsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListOrgAdminsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/admins"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOrgMembersRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	pageToken *string
	pageSize *int32
	filter *string
	roleId *string
}

// 企业 ID
func (r ApiListOrgMembersRequest) XTenantId(xTenantId string) ApiListOrgMembersRequest {
	r.xTenantId = &xTenantId
	return r
}

// 分页标记，第一次请求不填或者空字符串，表示从头开始遍历；分页查询结果还有更多项时返回 nextPageToken，下次遍历可采用该 nextPageToken 入参 pageToken 获取查询结果，示例值：\&quot;cfcb90voe9jct71bqkfg\&quot;
func (r ApiListOrgMembersRequest) PageToken(pageToken string) ApiListOrgMembersRequest {
	r.pageToken = &pageToken
	return r
}

// 分页大小, 示例值：10
func (r ApiListOrgMembersRequest) PageSize(pageSize int32) ApiListOrgMembersRequest {
	r.pageSize = &pageSize
	return r
}

// 该参数用于指定查询范围，initiate：新加入的成员,disabled：已禁用的成员,enabled：未禁用的成员,external：外部成员
func (r ApiListOrgMembersRequest) Filter(filter string) ApiListOrgMembersRequest {
	r.filter = &filter
	return r
}

// 根据角色 ID 过滤企业成员
func (r ApiListOrgMembersRequest) RoleId(roleId string) ApiListOrgMembersRequest {
	r.roleId = &roleId
	return r
}

func (r ApiListOrgMembersRequest) Execute() (*ListOrgMembersResponse, *http.Response, error) {
	return r.ApiService.ListOrgMembersExecute(r)
}

/*
ListOrgMembers 获取企业成员列表

该接口用于获取企业的成员列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListOrgMembersRequest

  @link https://open.teambition.com/docs/apis/6321c6ce912d20d3b5a489ee document
*/
func (a *ContactAPIService) ListOrgMembers(ctx context.Context) ApiListOrgMembersRequest {
	return ApiListOrgMembersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListOrgMembersResponse
func (a *ContactAPIService) ListOrgMembersExecute(r ApiListOrgMembersRequest) (*ListOrgMembersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListOrgMembersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/member/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.roleId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roleId", r.roleId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOrgOwnersRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
}

// 企业 ID
func (r ApiListOrgOwnersRequest) XTenantId(xTenantId string) ApiListOrgOwnersRequest {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiListOrgOwnersRequest) Execute() (*ListOrgAdminsResponse, *http.Response, error) {
	return r.ApiService.ListOrgOwnersExecute(r)
}

/*
ListOrgOwners 获取企业拥有者

该接口用于获取企业拥有者信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListOrgOwnersRequest

  @link https://open.teambition.com/docs/apis/6321c6ce912d20d3b5a489be document
*/
func (a *ContactAPIService) ListOrgOwners(ctx context.Context) ApiListOrgOwnersRequest {
	return ApiListOrgOwnersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListOrgAdminsResponse
func (a *ContactAPIService) ListOrgOwnersExecute(r ApiListOrgOwnersRequest) (*ListOrgAdminsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListOrgAdminsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/owners"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOrgRolesRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	pageToken *string
	pageSize *int32
}

// 企业 ID
func (r ApiListOrgRolesRequest) XTenantId(xTenantId string) ApiListOrgRolesRequest {
	r.xTenantId = &xTenantId
	return r
}

// 分页标记，第一次请求不填或者空字符串，表示从头开始遍历；分页查询结果还有更多项时返回 nextPageToken，下次遍历可采用该 nextPageToken 入参 pageToken 获取查询结果，示例值：\&quot;cfcb90voe9jct71bqkfg\&quot;
func (r ApiListOrgRolesRequest) PageToken(pageToken string) ApiListOrgRolesRequest {
	r.pageToken = &pageToken
	return r
}

// 分页大小, 示例值：10
func (r ApiListOrgRolesRequest) PageSize(pageSize int32) ApiListOrgRolesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListOrgRolesRequest) Execute() (*ListOrgRolesResponse, *http.Response, error) {
	return r.ApiService.ListOrgRolesExecute(r)
}

/*
ListOrgRoles 获取企业角色列表

该接口用于获取角色详情
- 查询角色下成员,详见 [获取企业成员列表](api.operationId=GetOrgMembers)
- 更新企业成员角色,详见 [更新企业成员](api.operationId=UpdateOrgMembers)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListOrgRolesRequest

  @link https://open.teambition.com/docs/apis/64d34c89912d20d3b54f0373 document
*/
func (a *ContactAPIService) ListOrgRoles(ctx context.Context) ApiListOrgRolesRequest {
	return ApiListOrgRolesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListOrgRolesResponse
func (a *ContactAPIService) ListOrgRolesExecute(r ApiListOrgRolesRequest) (*ListOrgRolesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListOrgRolesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/roles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSubDepartmentsRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	deptId *string
	pageToken *string
	pageSize *int32
}

// 企业 ID
func (r ApiListSubDepartmentsRequest) XTenantId(xTenantId string) ApiListSubDepartmentsRequest {
	r.xTenantId = &xTenantId
	return r
}

// 部门 ID
func (r ApiListSubDepartmentsRequest) DeptId(deptId string) ApiListSubDepartmentsRequest {
	r.deptId = &deptId
	return r
}

// 分页标记，第一次请求不填或者空字符串，表示从头开始遍历；分页查询结果还有更多项时返回 nextPageToken，下次遍历可采用该 nextPageToken 入参 pageToken 获取查询结果，示例值：\&quot;cfcb90voe9jct71bqkfg\&quot;
func (r ApiListSubDepartmentsRequest) PageToken(pageToken string) ApiListSubDepartmentsRequest {
	r.pageToken = &pageToken
	return r
}

// 分页大小, 示例值：10
func (r ApiListSubDepartmentsRequest) PageSize(pageSize int32) ApiListSubDepartmentsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListSubDepartmentsRequest) Execute() (*ListDepartmentsResponse, *http.Response, error) {
	return r.ApiService.ListSubDepartmentsExecute(r)
}

/*
ListSubDepartments 获取子部门列表

该接口用于获取子部门列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListSubDepartmentsRequest

  @link https://open.teambition.com/docs/apis/667d5158912d20d3b5b75f43 document
*/
func (a *ContactAPIService) ListSubDepartments(ctx context.Context) ApiListSubDepartmentsRequest {
	return ApiListSubDepartmentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListDepartmentsResponse
func (a *ContactAPIService) ListSubDepartmentsExecute(r ApiListSubDepartmentsRequest) (*ListDepartmentsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListDepartmentsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/departments/subDepts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deptId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deptId", r.deptId, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUserDepartmentsRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	userId *string
	pageToken *string
	pageSize *int32
}

// 企业 ID
func (r ApiListUserDepartmentsRequest) XTenantId(xTenantId string) ApiListUserDepartmentsRequest {
	r.xTenantId = &xTenantId
	return r
}

// 用户ID
func (r ApiListUserDepartmentsRequest) UserId(userId string) ApiListUserDepartmentsRequest {
	r.userId = &userId
	return r
}

// 分页标记，第一次请求不填或者空字符串，表示从头开始遍历；分页查询结果还有更多项时返回 nextPageToken，下次遍历可采用该 nextPageToken 入参 pageToken 获取查询结果，示例值：\&quot;cfcb90voe9jct71bqkfg\&quot;
func (r ApiListUserDepartmentsRequest) PageToken(pageToken string) ApiListUserDepartmentsRequest {
	r.pageToken = &pageToken
	return r
}

// 分页大小, 示例值：10
func (r ApiListUserDepartmentsRequest) PageSize(pageSize int32) ApiListUserDepartmentsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiListUserDepartmentsRequest) Execute() (*ListDepartmentsResponse, *http.Response, error) {
	return r.ApiService.ListUserDepartmentsExecute(r)
}

/*
ListUserDepartments 获取用户加入的企业部门列表

该接口用于获取用户加入的企业部门列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListUserDepartmentsRequest

  @link https://open.teambition.com/docs/apis/6321c6ce912d20d3b5a48c30 document
*/
func (a *ContactAPIService) ListUserDepartments(ctx context.Context) ApiListUserDepartmentsRequest {
	return ApiListUserDepartmentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListDepartmentsResponse
func (a *ContactAPIService) ListUserDepartmentsExecute(r ApiListUserDepartmentsRequest) (*ListDepartmentsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListDepartmentsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/joinedDepartments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveDepartmentMembersRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	removeDepartmentMembersRequest *RemoveDepartmentMembersRequest
}

// 企业 ID
func (r ApiRemoveDepartmentMembersRequest) XTenantId(xTenantId string) ApiRemoveDepartmentMembersRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiRemoveDepartmentMembersRequest) RemoveDepartmentMembersRequest(removeDepartmentMembersRequest RemoveDepartmentMembersRequest) ApiRemoveDepartmentMembersRequest {
	r.removeDepartmentMembersRequest = &removeDepartmentMembersRequest
	return r
}

func (r ApiRemoveDepartmentMembersRequest) Execute() (*RemoveDepartmentMembersResponse, *http.Response, error) {
	return r.ApiService.RemoveDepartmentMembersExecute(r)
}

/*
RemoveDepartmentMembers 删除部门成员

该接口用于删除部门成员

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRemoveDepartmentMembersRequest

  @link https://open.teambition.com/docs/apis/667d5159912d20d3b5b76087 document
*/
func (a *ContactAPIService) RemoveDepartmentMembers(ctx context.Context) ApiRemoveDepartmentMembersRequest {
	return ApiRemoveDepartmentMembersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RemoveDepartmentMembersResponse
func (a *ContactAPIService) RemoveDepartmentMembersExecute(r ApiRemoveDepartmentMembersRequest) (*RemoveDepartmentMembersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemoveDepartmentMembersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/department/members"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.removeDepartmentMembersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResignOrgMemberRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	enableOrgMemberRequest *EnableOrgMemberRequest
}

// 租户 ID
func (r ApiResignOrgMemberRequest) XTenantId(xTenantId string) ApiResignOrgMemberRequest {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiResignOrgMemberRequest) EnableOrgMemberRequest(enableOrgMemberRequest EnableOrgMemberRequest) ApiResignOrgMemberRequest {
	r.enableOrgMemberRequest = &enableOrgMemberRequest
	return r
}

func (r ApiResignOrgMemberRequest) Execute() (*UpdateOrgMemberResponse, *http.Response, error) {
	return r.ApiService.ResignOrgMemberExecute(r)
}

/*
ResignOrgMember 离职企业成员账号

将某个企业成员从企业中离职

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiResignOrgMemberRequest

  @link https://open.teambition.com/docs/apis/681b514d8657139bff2fe828 document
*/
func (a *ContactAPIService) ResignOrgMember(ctx context.Context) ApiResignOrgMemberRequest {
	return ApiResignOrgMemberRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpdateOrgMemberResponse
func (a *ContactAPIService) ResignOrgMemberExecute(r ApiResignOrgMemberRequest) (*UpdateOrgMemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateOrgMemberResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/member/resignation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.enableOrgMemberRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchOrgMembersRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	query *string
	pageToken *string
	pageSize *int32
	filter *string
}

// 企业 ID
func (r ApiSearchOrgMembersRequest) XTenantId(xTenantId string) ApiSearchOrgMembersRequest {
	r.xTenantId = &xTenantId
	return r
}

// 查询字符，填入查询关键字，例如用户名字
func (r ApiSearchOrgMembersRequest) Query(query string) ApiSearchOrgMembersRequest {
	r.query = &query
	return r
}

// 分页标记，第一次请求不填或者空字符串，表示从头开始遍历；分页查询结果还有更多项时返回 nextPageToken，下次遍历可采用该 nextPageToken 入参 pageToken 获取查询结果，示例值：\&quot;cfcb90voe9jct71bqkfg\&quot;
func (r ApiSearchOrgMembersRequest) PageToken(pageToken string) ApiSearchOrgMembersRequest {
	r.pageToken = &pageToken
	return r
}

// 分页大小, 示例值：10
func (r ApiSearchOrgMembersRequest) PageSize(pageSize int32) ApiSearchOrgMembersRequest {
	r.pageSize = &pageSize
	return r
}

// 筛选条件，支持disabled（已禁用成员）和enabled（已启用成员）, 默认不做过滤, 全部返回
func (r ApiSearchOrgMembersRequest) Filter(filter string) ApiSearchOrgMembersRequest {
	r.filter = &filter
	return r
}

func (r ApiSearchOrgMembersRequest) Execute() (*SearchOrgMembersResponse, *http.Response, error) {
	return r.ApiService.SearchOrgMembersExecute(r)
}

/*
SearchOrgMembers 搜索企业成员

该接口用于搜索企业成员

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchOrgMembersRequest

  @link https://open.teambition.com/docs/apis/6321c6ce912d20d3b5a48b88 document
*/
func (a *ContactAPIService) SearchOrgMembers(ctx context.Context) ApiSearchOrgMembersRequest {
	return ApiSearchOrgMembersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchOrgMembersResponse
func (a *ContactAPIService) SearchOrgMembersExecute(r ApiSearchOrgMembersRequest) (*SearchOrgMembersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchOrgMembersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/member/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDepartmentRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	updateDepartmentRequest *UpdateDepartmentRequest
}

// 企业 ID
func (r ApiUpdateDepartmentRequest) XTenantId(xTenantId string) ApiUpdateDepartmentRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateDepartmentRequest) UpdateDepartmentRequest(updateDepartmentRequest UpdateDepartmentRequest) ApiUpdateDepartmentRequest {
	r.updateDepartmentRequest = &updateDepartmentRequest
	return r
}

func (r ApiUpdateDepartmentRequest) Execute() (*GetDepartmentResponse, *http.Response, error) {
	return r.ApiService.UpdateDepartmentExecute(r)
}

/*
UpdateDepartment 更新部门信息

该接口用于更新部门信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateDepartmentRequest

  @link https://open.teambition.com/docs/apis/632828c3912d20d3b5aca5ed document
*/
func (a *ContactAPIService) UpdateDepartment(ctx context.Context) ApiUpdateDepartmentRequest {
	return ApiUpdateDepartmentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetDepartmentResponse
func (a *ContactAPIService) UpdateDepartmentExecute(r ApiUpdateDepartmentRequest) (*GetDepartmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDepartmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/department/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateDepartmentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateOrgMemberRequest struct {
	ctx context.Context
	ApiService *ContactAPIService
	xTenantId *string
	xOperatorID *string
	updateOrgMemberRequest *UpdateOrgMemberRequest
}

// 企业 ID
func (r ApiUpdateOrgMemberRequest) XTenantId(xTenantId string) ApiUpdateOrgMemberRequest {
	r.xTenantId = &xTenantId
	return r
}

// 操作者ID
func (r ApiUpdateOrgMemberRequest) XOperatorID(xOperatorID string) ApiUpdateOrgMemberRequest {
	r.xOperatorID = &xOperatorID
	return r
}

// 
func (r ApiUpdateOrgMemberRequest) UpdateOrgMemberRequest(updateOrgMemberRequest UpdateOrgMemberRequest) ApiUpdateOrgMemberRequest {
	r.updateOrgMemberRequest = &updateOrgMemberRequest
	return r
}

func (r ApiUpdateOrgMemberRequest) Execute() (*UpdateOrgMemberResponse, *http.Response, error) {
	return r.ApiService.UpdateOrgMemberExecute(r)
}

/*
UpdateOrgMember 更新企业成员

更新企业成员

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateOrgMemberRequest

  @link https://open.teambition.com/docs/apis/6321c6ce912d20d3b5a48a5b document
*/
func (a *ContactAPIService) UpdateOrgMember(ctx context.Context) ApiUpdateOrgMemberRequest {
	return ApiUpdateOrgMemberRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpdateOrgMemberResponse
func (a *ContactAPIService) UpdateOrgMemberExecute(r ApiUpdateOrgMemberRequest) (*UpdateOrgMemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateOrgMemberResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/member/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Operator-ID", r.xOperatorID, "")
	}
	// body params
	localVarPostBody = r.updateOrgMemberRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
