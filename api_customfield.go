/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CustomfieldAPIService CustomfieldAPI service
type CustomfieldAPIService service

type ApiCountByCategoryV3Request struct {
	ctx context.Context
	ApiService *CustomfieldAPIService
	xTenantId *string
	categoryIds *string
}

// 企业 ID
func (r ApiCountByCategoryV3Request) XTenantId(xTenantId string) ApiCountByCategoryV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 自定义字段分类ID集合，逗号组合，未分类可使用 uncategory
func (r ApiCountByCategoryV3Request) CategoryIds(categoryIds string) ApiCountByCategoryV3Request {
	r.categoryIds = &categoryIds
	return r
}

func (r ApiCountByCategoryV3Request) Execute() (*CountByCategoryV3Response, *http.Response, error) {
	return r.ApiService.CountByCategoryV3Execute(r)
}

/*
CountByCategoryV3 根据自定义字段分类统计自定义字段数

根据自定义字段分类统计自定义字段数

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCountByCategoryV3Request

  @link https://open.teambition.com/docs/apis/63ee3ea2912d20d3b543ee9c document
*/
func (a *CustomfieldAPIService) CountByCategoryV3(ctx context.Context) ApiCountByCategoryV3Request {
	return ApiCountByCategoryV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CountByCategoryV3Response
func (a *CustomfieldAPIService) CountByCategoryV3Execute(r ApiCountByCategoryV3Request) (*CountByCategoryV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountByCategoryV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/customfield/count-by-category"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.categoryIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "categoryIds", r.categoryIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProjectCustomfieldV3Request struct {
	ctx context.Context
	ApiService *CustomfieldAPIService
	xOperatorId *string
	xTenantId *string
	projectId *string
	createProjectCustomfieldV3Request *CreateProjectCustomfieldV3Request
}

// 创建人ID
func (r ApiCreateProjectCustomfieldV3Request) XOperatorId(xOperatorId string) ApiCreateProjectCustomfieldV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateProjectCustomfieldV3Request) XTenantId(xTenantId string) ApiCreateProjectCustomfieldV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 项目ID
func (r ApiCreateProjectCustomfieldV3Request) ProjectId(projectId string) ApiCreateProjectCustomfieldV3Request {
	r.projectId = &projectId
	return r
}

// 
func (r ApiCreateProjectCustomfieldV3Request) CreateProjectCustomfieldV3Request(createProjectCustomfieldV3Request CreateProjectCustomfieldV3Request) ApiCreateProjectCustomfieldV3Request {
	r.createProjectCustomfieldV3Request = &createProjectCustomfieldV3Request
	return r
}

func (r ApiCreateProjectCustomfieldV3Request) Execute() (*CreateProjectCustomfieldV3Response, *http.Response, error) {
	return r.ApiService.CreateProjectCustomfieldV3Execute(r)
}

/*
CreateProjectCustomfieldV3 创建项目自定义字段(提交项目ID),创建企业自定义字段

创建项目自定义字段(提交项目ID),创建企业自定义字段

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateProjectCustomfieldV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a492ca document
*/
func (a *CustomfieldAPIService) CreateProjectCustomfieldV3(ctx context.Context) ApiCreateProjectCustomfieldV3Request {
	return ApiCreateProjectCustomfieldV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateProjectCustomfieldV3Response
func (a *CustomfieldAPIService) CreateProjectCustomfieldV3Execute(r ApiCreateProjectCustomfieldV3Request) (*CreateProjectCustomfieldV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateProjectCustomfieldV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/customfield/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createProjectCustomfieldV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCustomfieldV3Request struct {
	ctx context.Context
	ApiService *CustomfieldAPIService
	customfieldId string
	xTenantId *string
	projectId *string
	body *map[string]interface{}
}

// 企业 ID
func (r ApiDeleteCustomfieldV3Request) XTenantId(xTenantId string) ApiDeleteCustomfieldV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 项目ID
func (r ApiDeleteCustomfieldV3Request) ProjectId(projectId string) ApiDeleteCustomfieldV3Request {
	r.projectId = &projectId
	return r
}

// 
func (r ApiDeleteCustomfieldV3Request) Body(body map[string]interface{}) ApiDeleteCustomfieldV3Request {
	r.body = &body
	return r
}

func (r ApiDeleteCustomfieldV3Request) Execute() (*DeleteCustomfieldV3Response, *http.Response, error) {
	return r.ApiService.DeleteCustomfieldV3Execute(r)
}

/*
DeleteCustomfieldV3 删除自定义字段，默认删除企业自定义字段，如果传递项目ID，则删除项目下自定义字段

删除自定义字段，默认删除企业自定义字段，如果传递项目ID，则删除项目下自定义字段

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customfieldId 自定义字段ID
 @return ApiDeleteCustomfieldV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a4930c document
*/
func (a *CustomfieldAPIService) DeleteCustomfieldV3(ctx context.Context, customfieldId string) ApiDeleteCustomfieldV3Request {
	return ApiDeleteCustomfieldV3Request{
		ApiService: a,
		ctx: ctx,
		customfieldId: customfieldId,
	}
}

// Execute executes the request
//  @return DeleteCustomfieldV3Response
func (a *CustomfieldAPIService) DeleteCustomfieldV3Execute(r ApiDeleteCustomfieldV3Request) (*DeleteCustomfieldV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteCustomfieldV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/customfield/{customfieldId}/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"customfieldId"+"}", url.PathEscape(parameterValueToString(r.customfieldId, "customfieldId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchFieldCategoriesV3Request struct {
	ctx context.Context
	ApiService *CustomfieldAPIService
	xTenantId *string
	q *string
	categoryIds *string
	pageToken *string
	pageSize *int32
}

// 企业 ID
func (r ApiSearchFieldCategoriesV3Request) XTenantId(xTenantId string) ApiSearchFieldCategoriesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 模糊查询任务类型名称
func (r ApiSearchFieldCategoriesV3Request) Q(q string) ApiSearchFieldCategoriesV3Request {
	r.q = &q
	return r
}

// 自定义字段分类ID集合，逗号组合
func (r ApiSearchFieldCategoriesV3Request) CategoryIds(categoryIds string) ApiSearchFieldCategoriesV3Request {
	r.categoryIds = &categoryIds
	return r
}

// 分页标
func (r ApiSearchFieldCategoriesV3Request) PageToken(pageToken string) ApiSearchFieldCategoriesV3Request {
	r.pageToken = &pageToken
	return r
}

// 每页任务数量(默认为50)
func (r ApiSearchFieldCategoriesV3Request) PageSize(pageSize int32) ApiSearchFieldCategoriesV3Request {
	r.pageSize = &pageSize
	return r
}

func (r ApiSearchFieldCategoriesV3Request) Execute() (*SearchFieldCategoriesV3Response, *http.Response, error) {
	return r.ApiService.SearchFieldCategoriesV3Execute(r)
}

/*
SearchFieldCategoriesV3 搜索企业自定义字段分类

搜索企业自定义字段分类

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchFieldCategoriesV3Request

  @link https://open.teambition.com/docs/apis/63ee3ea2912d20d3b543ee57 document
*/
func (a *CustomfieldAPIService) SearchFieldCategoriesV3(ctx context.Context) ApiSearchFieldCategoriesV3Request {
	return ApiSearchFieldCategoriesV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchFieldCategoriesV3Response
func (a *CustomfieldAPIService) SearchFieldCategoriesV3Execute(r ApiSearchFieldCategoriesV3Request) (*SearchFieldCategoriesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchFieldCategoriesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/customfield-category/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.categoryIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "categoryIds", r.categoryIds, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchFieldChoicesV3Request struct {
	ctx context.Context
	ApiService *CustomfieldAPIService
	customfieldId string
	xTenantId *string
	projectId *string
	q *string
	pageSize *int32
	pageToken *string
	onlyLeaf *bool
	onlyOneDepth *bool
	prefixPath *string
}

// 企业 ID
func (r ApiSearchFieldChoicesV3Request) XTenantId(xTenantId string) ApiSearchFieldChoicesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 项目ID
func (r ApiSearchFieldChoicesV3Request) ProjectId(projectId string) ApiSearchFieldChoicesV3Request {
	r.projectId = &projectId
	return r
}

// 选项名字(模糊搜索)
func (r ApiSearchFieldChoicesV3Request) Q(q string) ApiSearchFieldChoicesV3Request {
	r.q = &q
	return r
}

// 分页长度
func (r ApiSearchFieldChoicesV3Request) PageSize(pageSize int32) ApiSearchFieldChoicesV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchFieldChoicesV3Request) PageToken(pageToken string) ApiSearchFieldChoicesV3Request {
	r.pageToken = &pageToken
	return r
}

// 仅查看叶子节点
func (r ApiSearchFieldChoicesV3Request) OnlyLeaf(onlyLeaf bool) ApiSearchFieldChoicesV3Request {
	r.onlyLeaf = &onlyLeaf
	return r
}

// 仅查当前深度
func (r ApiSearchFieldChoicesV3Request) OnlyOneDepth(onlyOneDepth bool) ApiSearchFieldChoicesV3Request {
	r.onlyOneDepth = &onlyOneDepth
	return r
}

// 选项前缀
func (r ApiSearchFieldChoicesV3Request) PrefixPath(prefixPath string) ApiSearchFieldChoicesV3Request {
	r.prefixPath = &prefixPath
	return r
}

func (r ApiSearchFieldChoicesV3Request) Execute() (*SearchFieldChoicesV3Response, *http.Response, error) {
	return r.ApiService.SearchFieldChoicesV3Execute(r)
}

/*
SearchFieldChoicesV3 搜索层级字段选项

搜索层级字段选项

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customfieldId 自定义字段ID
 @return ApiSearchFieldChoicesV3Request

  @link https://open.teambition.com/docs/apis/64057c9b912d20d3b5e63df6 document
*/
func (a *CustomfieldAPIService) SearchFieldChoicesV3(ctx context.Context, customfieldId string) ApiSearchFieldChoicesV3Request {
	return ApiSearchFieldChoicesV3Request{
		ApiService: a,
		ctx: ctx,
		customfieldId: customfieldId,
	}
}

// Execute executes the request
//  @return SearchFieldChoicesV3Response
func (a *CustomfieldAPIService) SearchFieldChoicesV3Execute(r ApiSearchFieldChoicesV3Request) (*SearchFieldChoicesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchFieldChoicesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/customfield/{customfieldId}/choice/search"
	localVarPath = strings.Replace(localVarPath, "{"+"customfieldId"+"}", url.PathEscape(parameterValueToString(r.customfieldId, "customfieldId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.onlyLeaf != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "onlyLeaf", r.onlyLeaf, "")
	}
	if r.onlyOneDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "onlyOneDepth", r.onlyOneDepth, "")
	}
	if r.prefixPath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prefixPath", r.prefixPath, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchOrgCustomfiledV3Request struct {
	ctx context.Context
	ApiService *CustomfieldAPIService
	xTenantId *string
	cfIds *string
	projectIds *string
	instanceIds *string
	q *string
	pageSize *int32
	pageToken *string
}

// 企业 ID
func (r ApiSearchOrgCustomfiledV3Request) XTenantId(xTenantId string) ApiSearchOrgCustomfiledV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 自定义字段ID集合，逗号组合
func (r ApiSearchOrgCustomfiledV3Request) CfIds(cfIds string) ApiSearchOrgCustomfiledV3Request {
	r.cfIds = &cfIds
	return r
}

// 过滤出在指定项目中使用的企业字段，当scope&#x3D;usedInProjectIds有效
func (r ApiSearchOrgCustomfiledV3Request) ProjectIds(projectIds string) ApiSearchOrgCustomfiledV3Request {
	r.projectIds = &projectIds
	return r
}

// 字段InstanceId集合，用逗号组合
func (r ApiSearchOrgCustomfiledV3Request) InstanceIds(instanceIds string) ApiSearchOrgCustomfiledV3Request {
	r.instanceIds = &instanceIds
	return r
}

// 过滤字段名字
func (r ApiSearchOrgCustomfiledV3Request) Q(q string) ApiSearchOrgCustomfiledV3Request {
	r.q = &q
	return r
}

// 每页长度
func (r ApiSearchOrgCustomfiledV3Request) PageSize(pageSize int32) ApiSearchOrgCustomfiledV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchOrgCustomfiledV3Request) PageToken(pageToken string) ApiSearchOrgCustomfiledV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiSearchOrgCustomfiledV3Request) Execute() (*SearchOrgCustomfiledV3Response, *http.Response, error) {
	return r.ApiService.SearchOrgCustomfiledV3Execute(r)
}

/*
SearchOrgCustomfiledV3 搜索企业自定义字段

搜索企业自定义字段

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchOrgCustomfiledV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a49355 document
*/
func (a *CustomfieldAPIService) SearchOrgCustomfiledV3(ctx context.Context) ApiSearchOrgCustomfiledV3Request {
	return ApiSearchOrgCustomfiledV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchOrgCustomfiledV3Response
func (a *CustomfieldAPIService) SearchOrgCustomfiledV3Execute(r ApiSearchOrgCustomfiledV3Request) (*SearchOrgCustomfiledV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchOrgCustomfiledV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/customfield/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cfIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cfIds", r.cfIds, "")
	}
	if r.projectIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectIds", r.projectIds, "")
	}
	if r.instanceIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceIds", r.instanceIds, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCustomfieldV3Request struct {
	ctx context.Context
	ApiService *CustomfieldAPIService
	customfieldId string
	xOperatorId *string
	xTenantId *string
	projectId *string
	updateCustomfieldV3Request *UpdateCustomfieldV3Request
}

// 操作者ID
func (r ApiUpdateCustomfieldV3Request) XOperatorId(xOperatorId string) ApiUpdateCustomfieldV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateCustomfieldV3Request) XTenantId(xTenantId string) ApiUpdateCustomfieldV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateCustomfieldV3Request) ProjectId(projectId string) ApiUpdateCustomfieldV3Request {
	r.projectId = &projectId
	return r
}

// 
func (r ApiUpdateCustomfieldV3Request) UpdateCustomfieldV3Request(updateCustomfieldV3Request UpdateCustomfieldV3Request) ApiUpdateCustomfieldV3Request {
	r.updateCustomfieldV3Request = &updateCustomfieldV3Request
	return r
}

func (r ApiUpdateCustomfieldV3Request) Execute() (*UpdateCustomfieldV3Response, *http.Response, error) {
	return r.ApiService.UpdateCustomfieldV3Execute(r)
}

/*
UpdateCustomfieldV3 更新自定义字段，默认更新企业自定义字段，如果传递项目ID，则更新项目下自定义字段

更新自定义字段，默认更新企业自定义字段，如果传递项目ID，则更新项目下自定义字段

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customfieldId 自定义字段ID
 @return ApiUpdateCustomfieldV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a49391 document
*/
func (a *CustomfieldAPIService) UpdateCustomfieldV3(ctx context.Context, customfieldId string) ApiUpdateCustomfieldV3Request {
	return ApiUpdateCustomfieldV3Request{
		ApiService: a,
		ctx: ctx,
		customfieldId: customfieldId,
	}
}

// Execute executes the request
//  @return UpdateCustomfieldV3Response
func (a *CustomfieldAPIService) UpdateCustomfieldV3Execute(r ApiUpdateCustomfieldV3Request) (*UpdateCustomfieldV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateCustomfieldV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/customfield/{customfieldId}/update"
	localVarPath = strings.Replace(localVarPath, "{"+"customfieldId"+"}", url.PathEscape(parameterValueToString(r.customfieldId, "customfieldId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateCustomfieldV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateFieldChoicesV3Request struct {
	ctx context.Context
	ApiService *CustomfieldAPIService
	customfieldId string
	xOperatorId *string
	xTenantId *string
	projectId *string
	updateFieldChoicesV3Request *UpdateFieldChoicesV3Request
}

// 操作者ID
func (r ApiUpdateFieldChoicesV3Request) XOperatorId(xOperatorId string) ApiUpdateFieldChoicesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateFieldChoicesV3Request) XTenantId(xTenantId string) ApiUpdateFieldChoicesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 项目ID
func (r ApiUpdateFieldChoicesV3Request) ProjectId(projectId string) ApiUpdateFieldChoicesV3Request {
	r.projectId = &projectId
	return r
}

// 
func (r ApiUpdateFieldChoicesV3Request) UpdateFieldChoicesV3Request(updateFieldChoicesV3Request UpdateFieldChoicesV3Request) ApiUpdateFieldChoicesV3Request {
	r.updateFieldChoicesV3Request = &updateFieldChoicesV3Request
	return r
}

func (r ApiUpdateFieldChoicesV3Request) Execute() (*UpdateFieldChoicesV3Response, *http.Response, error) {
	return r.ApiService.UpdateFieldChoicesV3Execute(r)
}

/*
UpdateFieldChoicesV3 更新层级字段选项

更新层级字段选项

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customfieldId 自定义字段ID
 @return ApiUpdateFieldChoicesV3Request

  @link https://open.teambition.com/docs/apis/64057c9b912d20d3b5e63e6c document
*/
func (a *CustomfieldAPIService) UpdateFieldChoicesV3(ctx context.Context, customfieldId string) ApiUpdateFieldChoicesV3Request {
	return ApiUpdateFieldChoicesV3Request{
		ApiService: a,
		ctx: ctx,
		customfieldId: customfieldId,
	}
}

// Execute executes the request
//  @return UpdateFieldChoicesV3Response
func (a *CustomfieldAPIService) UpdateFieldChoicesV3Execute(r ApiUpdateFieldChoicesV3Request) (*UpdateFieldChoicesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateFieldChoicesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/customfield/{customfieldId}/choice/update"
	localVarPath = strings.Replace(localVarPath, "{"+"customfieldId"+"}", url.PathEscape(parameterValueToString(r.customfieldId, "customfieldId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateFieldChoicesV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
