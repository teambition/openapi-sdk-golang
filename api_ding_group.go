/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// DingGroupAPIService DingGroupAPI service
type DingGroupAPIService service

type ApiGetBindingCidByTaskIdRequest struct {
	ctx context.Context
	ApiService *DingGroupAPIService
	xTenantId *string
	taskId *string
}

// 租户 ID
func (r ApiGetBindingCidByTaskIdRequest) XTenantId(xTenantId string) ApiGetBindingCidByTaskIdRequest {
	r.xTenantId = &xTenantId
	return r
}

// 任务Id
func (r ApiGetBindingCidByTaskIdRequest) TaskId(taskId string) ApiGetBindingCidByTaskIdRequest {
	r.taskId = &taskId
	return r
}

func (r ApiGetBindingCidByTaskIdRequest) Execute() (*GetBindingCidByTaskIdResponse, *http.Response, error) {
	return r.ApiService.GetBindingCidByTaskIdExecute(r)
}

/*
GetBindingCidByTaskId 通过taskId查询该任务关联的任务群Id

通过taskId查询该任务关联的任务群Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBindingCidByTaskIdRequest

  @link https://open.teambition.com/docs/apis/664c9212e678cdcec87811ba document
*/
func (a *DingGroupAPIService) GetBindingCidByTaskId(ctx context.Context) ApiGetBindingCidByTaskIdRequest {
	return ApiGetBindingCidByTaskIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetBindingCidByTaskIdResponse
func (a *DingGroupAPIService) GetBindingCidByTaskIdExecute(r ApiGetBindingCidByTaskIdRequest) (*GetBindingCidByTaskIdResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetBindingCidByTaskIdResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/group/getBindingCidByTaskId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.taskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskId", r.taskId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBindingCidsByProjectIdRequest struct {
	ctx context.Context
	ApiService *DingGroupAPIService
	xTenantId *string
	projectId *string
}

// 企业 ID
func (r ApiGetBindingCidsByProjectIdRequest) XTenantId(xTenantId string) ApiGetBindingCidsByProjectIdRequest {
	r.xTenantId = &xTenantId
	return r
}

// 项目id
func (r ApiGetBindingCidsByProjectIdRequest) ProjectId(projectId string) ApiGetBindingCidsByProjectIdRequest {
	r.projectId = &projectId
	return r
}

func (r ApiGetBindingCidsByProjectIdRequest) Execute() (*GetBindingCidsByProjectIdResponse, *http.Response, error) {
	return r.ApiService.GetBindingCidsByProjectIdExecute(r)
}

/*
GetBindingCidsByProjectId 通过projectid查询关联的全员可见的群聊ids

通过projectid查询关联的全员可见的群聊ids

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBindingCidsByProjectIdRequest

  @link https://open.teambition.com/docs/apis/6378b1e6912d20d3b517bea6 document
*/
func (a *DingGroupAPIService) GetBindingCidsByProjectId(ctx context.Context) ApiGetBindingCidsByProjectIdRequest {
	return ApiGetBindingCidsByProjectIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetBindingCidsByProjectIdResponse
func (a *DingGroupAPIService) GetBindingCidsByProjectIdExecute(r ApiGetBindingCidsByProjectIdRequest) (*GetBindingCidsByProjectIdResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetBindingCidsByProjectIdResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/group/getBindingCidsByProjectId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBindingProjectIdsByCidRequest struct {
	ctx context.Context
	ApiService *DingGroupAPIService
	xTenantId *string
	cid *string
}

// 企业 ID
func (r ApiGetBindingProjectIdsByCidRequest) XTenantId(xTenantId string) ApiGetBindingProjectIdsByCidRequest {
	r.xTenantId = &xTenantId
	return r
}

// 群聊cid，cid中可能存在特殊字符，需要进行UrlEncode编码
func (r ApiGetBindingProjectIdsByCidRequest) Cid(cid string) ApiGetBindingProjectIdsByCidRequest {
	r.cid = &cid
	return r
}

func (r ApiGetBindingProjectIdsByCidRequest) Execute() (*GetBindingProjectIdsByCidResponse, *http.Response, error) {
	return r.ApiService.GetBindingProjectIdsByCidExecute(r)
}

/*
GetBindingProjectIdsByCid 根据群聊cid获取绑定的项目projectid

根据群聊cid获取绑定的项目projectid

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBindingProjectIdsByCidRequest

  @link https://open.teambition.com/docs/apis/6378b1e6912d20d3b517bf09 document
*/
func (a *DingGroupAPIService) GetBindingProjectIdsByCid(ctx context.Context) ApiGetBindingProjectIdsByCidRequest {
	return ApiGetBindingProjectIdsByCidRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetBindingProjectIdsByCidResponse
func (a *DingGroupAPIService) GetBindingProjectIdsByCidExecute(r ApiGetBindingProjectIdsByCidRequest) (*GetBindingProjectIdsByCidResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetBindingProjectIdsByCidResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/group/getBindingProjectIdsByCid"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cid", r.cid, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
