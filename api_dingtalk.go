/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// DingtalkAPIService DingtalkAPI service
type DingtalkAPIService service

type ApiBindProjectWorkspaceRequest struct {
	ctx context.Context
	ApiService *DingtalkAPIService
	xTenantId *string
	xOperatorId *string
	bindProjectWorkspaceRequest *BindProjectWorkspaceRequest
}

// 租户 ID
func (r ApiBindProjectWorkspaceRequest) XTenantId(xTenantId string) ApiBindProjectWorkspaceRequest {
	r.xTenantId = &xTenantId
	return r
}

// 操作者 ID
func (r ApiBindProjectWorkspaceRequest) XOperatorId(xOperatorId string) ApiBindProjectWorkspaceRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 
func (r ApiBindProjectWorkspaceRequest) BindProjectWorkspaceRequest(bindProjectWorkspaceRequest BindProjectWorkspaceRequest) ApiBindProjectWorkspaceRequest {
	r.bindProjectWorkspaceRequest = &bindProjectWorkspaceRequest
	return r
}

func (r ApiBindProjectWorkspaceRequest) Execute() (*BindProjectWorkspaceResponse, *http.Response, error) {
	return r.ApiService.BindProjectWorkspaceExecute(r)
}

/*
BindProjectWorkspace 绑定已有知识库

绑定已有知识库

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBindProjectWorkspaceRequest

  @link https://open.teambition.com/docs/apis/65af6cec2442f01adbdedec9 document
*/
func (a *DingtalkAPIService) BindProjectWorkspace(ctx context.Context) ApiBindProjectWorkspaceRequest {
	return ApiBindProjectWorkspaceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BindProjectWorkspaceResponse
func (a *DingtalkAPIService) BindProjectWorkspaceExecute(r ApiBindProjectWorkspaceRequest) (*BindProjectWorkspaceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BindProjectWorkspaceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workspace/bind-project"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	// body params
	localVarPostBody = r.bindProjectWorkspaceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTaskIdsByApproveIdRequest struct {
	ctx context.Context
	ApiService *DingtalkAPIService
	xTenantId *string
	instanceId *string
}

// 租户 ID，默认企业 ID
func (r ApiGetTaskIdsByApproveIdRequest) XTenantId(xTenantId string) ApiGetTaskIdsByApproveIdRequest {
	r.xTenantId = &xTenantId
	return r
}

// 钉钉审批实例ID
func (r ApiGetTaskIdsByApproveIdRequest) InstanceId(instanceId string) ApiGetTaskIdsByApproveIdRequest {
	r.instanceId = &instanceId
	return r
}

func (r ApiGetTaskIdsByApproveIdRequest) Execute() (*GetTaskIdsByApproveIdResponse, *http.Response, error) {
	return r.ApiService.GetTaskIdsByApproveIdExecute(r)
}

/*
GetTaskIdsByApproveId 通过钉钉审批实例ID反查对应任务IDs

通过钉钉审批实例ID反查对应任务IDs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTaskIdsByApproveIdRequest

  @link https://open.teambition.com/docs/apis/64f5d782a96085002bab6976 document
*/
func (a *DingtalkAPIService) GetTaskIdsByApproveId(ctx context.Context) ApiGetTaskIdsByApproveIdRequest {
	return ApiGetTaskIdsByApproveIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTaskIdsByApproveIdResponse
func (a *DingtalkAPIService) GetTaskIdsByApproveIdExecute(r ApiGetTaskIdsByApproveIdRequest) (*GetTaskIdsByApproveIdResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTaskIdsByApproveIdResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/approve/getTaskIdsByInstanceId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.instanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceId", r.instanceId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWorkspaceInfoRequest struct {
	ctx context.Context
	ApiService *DingtalkAPIService
	xTenantId *string
	xOperatorId *string
	projectId *string
}

// 租户 ID
func (r ApiGetWorkspaceInfoRequest) XTenantId(xTenantId string) ApiGetWorkspaceInfoRequest {
	r.xTenantId = &xTenantId
	return r
}

// 操作者ID
func (r ApiGetWorkspaceInfoRequest) XOperatorId(xOperatorId string) ApiGetWorkspaceInfoRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 项目Id
func (r ApiGetWorkspaceInfoRequest) ProjectId(projectId string) ApiGetWorkspaceInfoRequest {
	r.projectId = &projectId
	return r
}

func (r ApiGetWorkspaceInfoRequest) Execute() (*GetWorkspaceInfoResponse, *http.Response, error) {
	return r.ApiService.GetWorkspaceInfoExecute(r)
}

/*
GetWorkspaceInfo 获取绑定知识库信息

获取绑定知识库信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetWorkspaceInfoRequest

  @link https://open.teambition.com/docs/apis/66b9c71e68fd651bec0a05d3 document
*/
func (a *DingtalkAPIService) GetWorkspaceInfo(ctx context.Context) ApiGetWorkspaceInfoRequest {
	return ApiGetWorkspaceInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetWorkspaceInfoResponse
func (a *DingtalkAPIService) GetWorkspaceInfoExecute(r ApiGetWorkspaceInfoRequest) (*GetWorkspaceInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetWorkspaceInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workspace/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-operator-id", r.xOperatorId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
