/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// FormAPIService FormAPI service
type FormAPIService service

type ApiCreateFormRecordV3Request struct {
	ctx context.Context
	ApiService *FormAPIService
	xOperatorId *string
	xTenantId *string
	createFormRecordV3Request *CreateFormRecordV3Request
}

// 操作者ID
func (r ApiCreateFormRecordV3Request) XOperatorId(xOperatorId string) ApiCreateFormRecordV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateFormRecordV3Request) XTenantId(xTenantId string) ApiCreateFormRecordV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateFormRecordV3Request) CreateFormRecordV3Request(createFormRecordV3Request CreateFormRecordV3Request) ApiCreateFormRecordV3Request {
	r.createFormRecordV3Request = &createFormRecordV3Request
	return r
}

func (r ApiCreateFormRecordV3Request) Execute() (*CreateFormRecordV3Response, *http.Response, error) {
	return r.ApiService.CreateFormRecordV3Execute(r)
}

/*
CreateFormRecordV3 创建表单记录

创建表单记录

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateFormRecordV3Request

  @link https://open.teambition.com/docs/apis/680b630d912d20d3b51dcf46 document
*/
func (a *FormAPIService) CreateFormRecordV3(ctx context.Context) ApiCreateFormRecordV3Request {
	return ApiCreateFormRecordV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateFormRecordV3Response
func (a *FormAPIService) CreateFormRecordV3Execute(r ApiCreateFormRecordV3Request) (*CreateFormRecordV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateFormRecordV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/form/record/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createFormRecordV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFormProjectSpaceLinkV3Request struct {
	ctx context.Context
	ApiService *FormAPIService
	xOperatorId *string
	xTenantId *string
	projectIds *string
	formProjectIds *string
}

// 操作者的ID
func (r ApiGetFormProjectSpaceLinkV3Request) XOperatorId(xOperatorId string) ApiGetFormProjectSpaceLinkV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiGetFormProjectSpaceLinkV3Request) XTenantId(xTenantId string) ApiGetFormProjectSpaceLinkV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 项目ID列表，逗号分隔
func (r ApiGetFormProjectSpaceLinkV3Request) ProjectIds(projectIds string) ApiGetFormProjectSpaceLinkV3Request {
	r.projectIds = &projectIds
	return r
}

// 表单空间ID列表，逗号分隔
func (r ApiGetFormProjectSpaceLinkV3Request) FormProjectIds(formProjectIds string) ApiGetFormProjectSpaceLinkV3Request {
	r.formProjectIds = &formProjectIds
	return r
}

func (r ApiGetFormProjectSpaceLinkV3Request) Execute() (*GetFormProjectSpaceLinkV3Response, *http.Response, error) {
	return r.ApiService.GetFormProjectSpaceLinkV3Execute(r)
}

/*
GetFormProjectSpaceLinkV3 根据项目ID获取表单空间或根据表单空间ID获取项目ID

根据项目ID获取表单空间ID或根据表单空间ID获取项目ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFormProjectSpaceLinkV3Request

  @link https://open.teambition.com/docs/apis/680b630e912d20d3b51dd06d document
*/
func (a *FormAPIService) GetFormProjectSpaceLinkV3(ctx context.Context) ApiGetFormProjectSpaceLinkV3Request {
	return ApiGetFormProjectSpaceLinkV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetFormProjectSpaceLinkV3Response
func (a *FormAPIService) GetFormProjectSpaceLinkV3Execute(r ApiGetFormProjectSpaceLinkV3Request) (*GetFormProjectSpaceLinkV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetFormProjectSpaceLinkV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/form/project/link"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectIds", r.projectIds, "")
	}
	if r.formProjectIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "formProjectIds", r.formProjectIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Operator-Id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAllFormSpaceNodesV3Request struct {
	ctx context.Context
	ApiService *FormAPIService
	xOperatorId *string
	xTenantId *string
	formProjectId *string
	nodeIds *string
}

// 操作者的ID
func (r ApiListAllFormSpaceNodesV3Request) XOperatorId(xOperatorId string) ApiListAllFormSpaceNodesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListAllFormSpaceNodesV3Request) XTenantId(xTenantId string) ApiListAllFormSpaceNodesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 表单空间ID
func (r ApiListAllFormSpaceNodesV3Request) FormProjectId(formProjectId string) ApiListAllFormSpaceNodesV3Request {
	r.formProjectId = &formProjectId
	return r
}

// 表单空间节点ID列表，逗号分隔
func (r ApiListAllFormSpaceNodesV3Request) NodeIds(nodeIds string) ApiListAllFormSpaceNodesV3Request {
	r.nodeIds = &nodeIds
	return r
}

func (r ApiListAllFormSpaceNodesV3Request) Execute() (*ListAllFormSpaceNodesV3Response, *http.Response, error) {
	return r.ApiService.ListAllFormSpaceNodesV3Execute(r)
}

/*
ListAllFormSpaceNodesV3 获取表单空间节点列表

获取表单空间节点列表，返回该表单空间下的所有节点，如果带有节点id作为查询，则返回某节点下的所有节点

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListAllFormSpaceNodesV3Request

  @link https://open.teambition.com/docs/apis/680b630e912d20d3b51dd0c4 document
*/
func (a *FormAPIService) ListAllFormSpaceNodesV3(ctx context.Context) ApiListAllFormSpaceNodesV3Request {
	return ApiListAllFormSpaceNodesV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListAllFormSpaceNodesV3Response
func (a *FormAPIService) ListAllFormSpaceNodesV3Execute(r ApiListAllFormSpaceNodesV3Request) (*ListAllFormSpaceNodesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListAllFormSpaceNodesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/form/node/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.formProjectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "formProjectId", r.formProjectId, "")
	}
	if r.nodeIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nodeIds", r.nodeIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchFormRecordProcessNodesV3Request struct {
	ctx context.Context
	ApiService *FormAPIService
	recordId string
	xOperatorId *string
	xTenantId *string
	nodeIds *string
}

// 操作者ID
func (r ApiSearchFormRecordProcessNodesV3Request) XOperatorId(xOperatorId string) ApiSearchFormRecordProcessNodesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiSearchFormRecordProcessNodesV3Request) XTenantId(xTenantId string) ApiSearchFormRecordProcessNodesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 流程节点ID列表, 使用逗号分隔
func (r ApiSearchFormRecordProcessNodesV3Request) NodeIds(nodeIds string) ApiSearchFormRecordProcessNodesV3Request {
	r.nodeIds = &nodeIds
	return r
}

func (r ApiSearchFormRecordProcessNodesV3Request) Execute() (*SearchFormRecordProcessNodesV3Response, *http.Response, error) {
	return r.ApiService.SearchFormRecordProcessNodesV3Execute(r)
}

/*
SearchFormRecordProcessNodesV3 获取表单记录流程节点信息

获取表单记录流程节点信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recordId 表单记录ID
 @return ApiSearchFormRecordProcessNodesV3Request

  @link https://open.teambition.com/docs/apis/6808506d912d20d3b5bfe326 document
*/
func (a *FormAPIService) SearchFormRecordProcessNodesV3(ctx context.Context, recordId string) ApiSearchFormRecordProcessNodesV3Request {
	return ApiSearchFormRecordProcessNodesV3Request{
		ApiService: a,
		ctx: ctx,
		recordId: recordId,
	}
}

// Execute executes the request
//  @return SearchFormRecordProcessNodesV3Response
func (a *FormAPIService) SearchFormRecordProcessNodesV3Execute(r ApiSearchFormRecordProcessNodesV3Request) (*SearchFormRecordProcessNodesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchFormRecordProcessNodesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/form/record/{recordId}/process/instance/node/search"
	localVarPath = strings.Replace(localVarPath, "{"+"recordId"+"}", url.PathEscape(parameterValueToString(r.recordId, "recordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.nodeIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nodeIds", r.nodeIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateFormRecordFieldV3Request struct {
	ctx context.Context
	ApiService *FormAPIService
	recordId string
	xOperatorId *string
	xTenantId *string
	updateFormRecordFieldV3Request *UpdateFormRecordFieldV3Request
}

// 操作者ID
func (r ApiUpdateFormRecordFieldV3Request) XOperatorId(xOperatorId string) ApiUpdateFormRecordFieldV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateFormRecordFieldV3Request) XTenantId(xTenantId string) ApiUpdateFormRecordFieldV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateFormRecordFieldV3Request) UpdateFormRecordFieldV3Request(updateFormRecordFieldV3Request UpdateFormRecordFieldV3Request) ApiUpdateFormRecordFieldV3Request {
	r.updateFormRecordFieldV3Request = &updateFormRecordFieldV3Request
	return r
}

func (r ApiUpdateFormRecordFieldV3Request) Execute() (*UpdateTaskCusomFieldByInstanceV3Response, *http.Response, error) {
	return r.ApiService.UpdateFormRecordFieldV3Execute(r)
}

/*
UpdateFormRecordFieldV3 更新表单字段值

更新表单字段值

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recordId 表单ID
 @return ApiUpdateFormRecordFieldV3Request

  @link https://open.teambition.com/docs/apis/680b630e912d20d3b51dd01c document
*/
func (a *FormAPIService) UpdateFormRecordFieldV3(ctx context.Context, recordId string) ApiUpdateFormRecordFieldV3Request {
	return ApiUpdateFormRecordFieldV3Request{
		ApiService: a,
		ctx: ctx,
		recordId: recordId,
	}
}

// Execute executes the request
//  @return UpdateTaskCusomFieldByInstanceV3Response
func (a *FormAPIService) UpdateFormRecordFieldV3Execute(r ApiUpdateFormRecordFieldV3Request) (*UpdateTaskCusomFieldByInstanceV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskCusomFieldByInstanceV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/form/record/{recordId}/update"
	localVarPath = strings.Replace(localVarPath, "{"+"recordId"+"}", url.PathEscape(parameterValueToString(r.recordId, "recordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateFormRecordFieldV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
