/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// GanttAPIService GanttAPI service
type GanttAPIService service

type ApiCreateBaselineRequest struct {
	ctx context.Context
	ApiService *GanttAPIService
	xOperatorId *string
	xTenantId *string
	createBaselineRequest *CreateBaselineRequest
}

// 操作者 ID
func (r ApiCreateBaselineRequest) XOperatorId(xOperatorId string) ApiCreateBaselineRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateBaselineRequest) XTenantId(xTenantId string) ApiCreateBaselineRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateBaselineRequest) CreateBaselineRequest(createBaselineRequest CreateBaselineRequest) ApiCreateBaselineRequest {
	r.createBaselineRequest = &createBaselineRequest
	return r
}

func (r ApiCreateBaselineRequest) Execute() (*CreateBaselineResponse, *http.Response, error) {
	return r.ApiService.CreateBaselineExecute(r)
}

/*
CreateBaseline 项目下创建甘特图基线

项目下创建甘特图基线

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateBaselineRequest

  @link https://open.teambition.com/docs/apis/66b4ae32912d20d3b58405f5 document
*/
func (a *GanttAPIService) CreateBaseline(ctx context.Context) ApiCreateBaselineRequest {
	return ApiCreateBaselineRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateBaselineResponse
func (a *GanttAPIService) CreateBaselineExecute(r ApiCreateBaselineRequest) (*CreateBaselineResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateBaselineResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/gantt/baseline"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createBaselineRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBaselineTasksV3Request struct {
	ctx context.Context
	ApiService *GanttAPIService
	xOperatorId *string
	xTenantId *string
	baselineId *string
	pageSize *int32
	pageToken *string
}

// 操作者 ID
func (r ApiGetBaselineTasksV3Request) XOperatorId(xOperatorId string) ApiGetBaselineTasksV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiGetBaselineTasksV3Request) XTenantId(xTenantId string) ApiGetBaselineTasksV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 基线ID
func (r ApiGetBaselineTasksV3Request) BaselineId(baselineId string) ApiGetBaselineTasksV3Request {
	r.baselineId = &baselineId
	return r
}

// 每页长度
func (r ApiGetBaselineTasksV3Request) PageSize(pageSize int32) ApiGetBaselineTasksV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiGetBaselineTasksV3Request) PageToken(pageToken string) ApiGetBaselineTasksV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiGetBaselineTasksV3Request) Execute() (*GetBaselineTasksV3Response, *http.Response, error) {
	return r.ApiService.GetBaselineTasksV3Execute(r)
}

/*
GetBaselineTasksV3 获取甘特图基线下的任务

获取甘特图基线下的任务，只有传统快照型基线才有数据

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBaselineTasksV3Request

  @link https://open.teambition.com/docs/apis/6424f857912d20d3b50b048a document
*/
func (a *GanttAPIService) GetBaselineTasksV3(ctx context.Context) ApiGetBaselineTasksV3Request {
	return ApiGetBaselineTasksV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetBaselineTasksV3Response
func (a *GanttAPIService) GetBaselineTasksV3Execute(r ApiGetBaselineTasksV3Request) (*GetBaselineTasksV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetBaselineTasksV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/gantt/baseline-task"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.baselineId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "baselineId", r.baselineId, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBaselinesV3Request struct {
	ctx context.Context
	ApiService *GanttAPIService
	xOperatorId *string
	xTenantId *string
	projectId *string
	pageSize *int32
	pageToken *string
}

// 操作者 ID
func (r ApiGetBaselinesV3Request) XOperatorId(xOperatorId string) ApiGetBaselinesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiGetBaselinesV3Request) XTenantId(xTenantId string) ApiGetBaselinesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 项目ID
func (r ApiGetBaselinesV3Request) ProjectId(projectId string) ApiGetBaselinesV3Request {
	r.projectId = &projectId
	return r
}

// 每页长度
func (r ApiGetBaselinesV3Request) PageSize(pageSize int32) ApiGetBaselinesV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiGetBaselinesV3Request) PageToken(pageToken string) ApiGetBaselinesV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiGetBaselinesV3Request) Execute() (*GetBaselinesV3Response, *http.Response, error) {
	return r.ApiService.GetBaselinesV3Execute(r)
}

/*
GetBaselinesV3 获取项目下甘特图基线

获取项目下甘特图基线

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBaselinesV3Request

  @link https://open.teambition.com/docs/apis/6424f885912d20d3b50b759b document
*/
func (a *GanttAPIService) GetBaselinesV3(ctx context.Context) ApiGetBaselinesV3Request {
	return ApiGetBaselinesV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetBaselinesV3Response
func (a *GanttAPIService) GetBaselinesV3Execute(r ApiGetBaselinesV3Request) (*GetBaselinesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetBaselinesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/gantt/baseline"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateBaselineRequest struct {
	ctx context.Context
	ApiService *GanttAPIService
	xOperatorId *string
	xTenantId *string
	updateBaselineRequest *UpdateBaselineRequest
}

// 操作者 ID
func (r ApiUpdateBaselineRequest) XOperatorId(xOperatorId string) ApiUpdateBaselineRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateBaselineRequest) XTenantId(xTenantId string) ApiUpdateBaselineRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateBaselineRequest) UpdateBaselineRequest(updateBaselineRequest UpdateBaselineRequest) ApiUpdateBaselineRequest {
	r.updateBaselineRequest = &updateBaselineRequest
	return r
}

func (r ApiUpdateBaselineRequest) Execute() (*UpdateBaselineResponse, *http.Response, error) {
	return r.ApiService.UpdateBaselineExecute(r)
}

/*
UpdateBaseline 更新项目下甘特图基线

更新项目下甘特图基线

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateBaselineRequest

  @link https://open.teambition.com/docs/apis/66d98080253a3f2062f9b838 document
*/
func (a *GanttAPIService) UpdateBaseline(ctx context.Context) ApiUpdateBaselineRequest {
	return ApiUpdateBaselineRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpdateBaselineResponse
func (a *GanttAPIService) UpdateBaselineExecute(r ApiUpdateBaselineRequest) (*UpdateBaselineResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateBaselineResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/gantt/baseline"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateBaselineRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
