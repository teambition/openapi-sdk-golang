/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// OauthAPIService OauthAPI service
type OauthAPIService service

type ApiGetOAuthUserInfoRequest struct {
	ctx context.Context
	ApiService *OauthAPIService
	getOAuthUserInfoRequest *GetOAuthUserInfoRequest
}

// 
func (r ApiGetOAuthUserInfoRequest) GetOAuthUserInfoRequest(getOAuthUserInfoRequest GetOAuthUserInfoRequest) ApiGetOAuthUserInfoRequest {
	r.getOAuthUserInfoRequest = &getOAuthUserInfoRequest
	return r
}

func (r ApiGetOAuthUserInfoRequest) Execute() (*GetOAuthUserInfoResponse, *http.Response, error) {
	return r.ApiService.GetOAuthUserInfoExecute(r)
}

/*
GetOAuthUserInfo 获取登录用户信息

获取登录用户信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetOAuthUserInfoRequest

  @link https://open.teambition.com/docs/apis/6321c6cd912d20d3b5a487e2 document
*/
func (a *OauthAPIService) GetOAuthUserInfo(ctx context.Context) ApiGetOAuthUserInfoRequest {
	return ApiGetOAuthUserInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetOAuthUserInfoResponse
func (a *OauthAPIService) GetOAuthUserInfoExecute(r ApiGetOAuthUserInfoRequest) (*GetOAuthUserInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetOAuthUserInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth/userInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.getOAuthUserInfoRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSSOTokenRequest struct {
	ctx context.Context
	ApiService *OauthAPIService
	appId *string
	redirectUri *string
	state *string
}

// 应用的唯一 ID
func (r ApiGetSSOTokenRequest) AppId(appId string) ApiGetSSOTokenRequest {
	r.appId = &appId
	return r
}

// 登录成功后的回调地址，需要配置在应用的安全域名中
func (r ApiGetSSOTokenRequest) RedirectUri(redirectUri string) ApiGetSSOTokenRequest {
	r.redirectUri = &redirectUri
	return r
}

// 在授权完成回调时会附加此参数，应用可以根据此字符串来判断上下文关系
func (r ApiGetSSOTokenRequest) State(state string) ApiGetSSOTokenRequest {
	r.state = &state
	return r
}

func (r ApiGetSSOTokenRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetSSOTokenExecute(r)
}

/*
GetSSOToken 请求身份验证

请求身份验证

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSSOTokenRequest

  @link https://open.teambition.com/docs/apis/6321c6cd912d20d3b5a48785 document
*/
func (a *OauthAPIService) GetSSOToken(ctx context.Context) ApiGetSSOTokenRequest {
	return ApiGetSSOTokenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *OauthAPIService) GetSSOTokenExecute(r ApiGetSSOTokenRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth/sso"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.appId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "app_id", r.appId, "")
	}
	if r.redirectUri != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "redirect_uri", r.redirectUri, "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 302 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetUserAccessTokenRequest struct {
	ctx context.Context
	ApiService *OauthAPIService
	getUserAccessTokenRequest *GetUserAccessTokenRequest
}

// 
func (r ApiGetUserAccessTokenRequest) GetUserAccessTokenRequest(getUserAccessTokenRequest GetUserAccessTokenRequest) ApiGetUserAccessTokenRequest {
	r.getUserAccessTokenRequest = &getUserAccessTokenRequest
	return r
}

func (r ApiGetUserAccessTokenRequest) Execute() (*GetUserAccessTokenResponse, *http.Response, error) {
	return r.ApiService.GetUserAccessTokenExecute(r)
}

/*
GetUserAccessToken 获取登录用户身份

该接口用于获取登录用户的授权凭证 userAccessToken

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetUserAccessTokenRequest

  @link https://open.teambition.com/docs/apis/6321c6cd912d20d3b5a487bd document
*/
func (a *OauthAPIService) GetUserAccessToken(ctx context.Context) ApiGetUserAccessTokenRequest {
	return ApiGetUserAccessTokenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetUserAccessTokenResponse
func (a *OauthAPIService) GetUserAccessTokenExecute(r ApiGetUserAccessTokenRequest) (*GetUserAccessTokenResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetUserAccessTokenResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth/userAccessToken"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.getUserAccessTokenRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
