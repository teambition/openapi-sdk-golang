/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// OrgAPIService OrgAPI service
type OrgAPIService service

type ApiGetAuditLogsRequest struct {
	ctx context.Context
	ApiService *OrgAPIService
	xTenantId *string
	language *string
	actionTypes *string
	actions *string
	userIds *string
	startTime *string
	endTime *string
	pageToken *string
	limit *int32
}

// 企业 ID
func (r ApiGetAuditLogsRequest) XTenantId(xTenantId string) ApiGetAuditLogsRequest {
	r.xTenantId = &xTenantId
	return r
}

// 语言
func (r ApiGetAuditLogsRequest) Language(language string) ApiGetAuditLogsRequest {
	r.language = &language
	return r
}

// 审计日志的行为类型集合，逗号分隔；默认为空，表示全部行为类型
func (r ApiGetAuditLogsRequest) ActionTypes(actionTypes string) ApiGetAuditLogsRequest {
	r.actionTypes = &actionTypes
	return r
}

// 审计日志的行为集合，逗号分隔；默认为空，表示全部行为
func (r ApiGetAuditLogsRequest) Actions(actions string) ApiGetAuditLogsRequest {
	r.actions = &actions
	return r
}

// 审计日志的用户ID集合，逗号分隔；默认为空，表示全部用户
func (r ApiGetAuditLogsRequest) UserIds(userIds string) ApiGetAuditLogsRequest {
	r.userIds = &userIds
	return r
}

// 筛选日志的开始时间，默认为过去1年
func (r ApiGetAuditLogsRequest) StartTime(startTime string) ApiGetAuditLogsRequest {
	r.startTime = &startTime
	return r
}

// 筛选日志的结束时间，默认为当前时间
func (r ApiGetAuditLogsRequest) EndTime(endTime string) ApiGetAuditLogsRequest {
	r.endTime = &endTime
	return r
}

// 分页标
func (r ApiGetAuditLogsRequest) PageToken(pageToken string) ApiGetAuditLogsRequest {
	r.pageToken = &pageToken
	return r
}

// 分页大小, 默认为100, 最大10000
func (r ApiGetAuditLogsRequest) Limit(limit int32) ApiGetAuditLogsRequest {
	r.limit = &limit
	return r
}

func (r ApiGetAuditLogsRequest) Execute() (*GetAuditLogsResponse, *http.Response, error) {
	return r.ApiService.GetAuditLogsExecute(r)
}

/*
GetAuditLogs 获取企业审计日志

获取企业审计日志

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAuditLogsRequest

  @link https://open.teambition.com/docs/apis/6620e7e6912d20d3b551cda8 document
*/
func (a *OrgAPIService) GetAuditLogs(ctx context.Context) ApiGetAuditLogsRequest {
	return ApiGetAuditLogsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAuditLogsResponse
func (a *OrgAPIService) GetAuditLogsExecute(r ApiGetAuditLogsRequest) (*GetAuditLogsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAuditLogsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit-log/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	if r.actionTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "actionTypes", r.actionTypes, "")
	}
	if r.actions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "actions", r.actions, "")
	}
	if r.userIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userIds", r.userIds, "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDingCorpIdRequest struct {
	ctx context.Context
	ApiService *OrgAPIService
	xTenantId *string
}

// 企业 ID
func (r ApiGetDingCorpIdRequest) XTenantId(xTenantId string) ApiGetDingCorpIdRequest {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiGetDingCorpIdRequest) Execute() (*GetDingCorpIdResponse, *http.Response, error) {
	return r.ApiService.GetDingCorpIdExecute(r)
}

/*
GetDingCorpId 查询企业绑定的钉钉 CorpId

该接口用于查询企业绑定的钉钉 CorpId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDingCorpIdRequest

  @link https://open.teambition.com/docs/apis/66792847912d20d3b5161000 document
*/
func (a *OrgAPIService) GetDingCorpId(ctx context.Context) ApiGetDingCorpIdRequest {
	return ApiGetDingCorpIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetDingCorpIdResponse
func (a *OrgAPIService) GetDingCorpIdExecute(r ApiGetDingCorpIdRequest) (*GetDingCorpIdResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDingCorpIdResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/idmap/dingtalk/getCorpId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDingUserIdByTbUserIdRequest struct {
	ctx context.Context
	ApiService *OrgAPIService
	xTenantId *string
	tbUserIds *string
}

// 企业 ID
func (r ApiGetDingUserIdByTbUserIdRequest) XTenantId(xTenantId string) ApiGetDingUserIdByTbUserIdRequest {
	r.xTenantId = &xTenantId
	return r
}

// Teambition 用户 ID,多个用逗号分隔, 例如 6167f4ac4b820f143f852123,6167f4ac4b820f143f852456
func (r ApiGetDingUserIdByTbUserIdRequest) TbUserIds(tbUserIds string) ApiGetDingUserIdByTbUserIdRequest {
	r.tbUserIds = &tbUserIds
	return r
}

func (r ApiGetDingUserIdByTbUserIdRequest) Execute() (*GetTbUserIdByDingUserIdResponse, *http.Response, error) {
	return r.ApiService.GetDingUserIdByTbUserIdExecute(r)
}

/*
GetDingUserIdByTbUserId Teambition userId 查询钉钉 userId

该接口用于 Teambition userId 查询钉钉 userId, 如果需要通过钉钉 userId 查询 Teambition userId,查看[钉钉 userId 查询 Teambition userId](api.operationId=GetTbUserIdByDingUserId)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDingUserIdByTbUserIdRequest

  @link https://open.teambition.com/docs/apis/66792847912d20d3b5160f7d document
*/
func (a *OrgAPIService) GetDingUserIdByTbUserId(ctx context.Context) ApiGetDingUserIdByTbUserIdRequest {
	return ApiGetDingUserIdByTbUserIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTbUserIdByDingUserIdResponse
func (a *OrgAPIService) GetDingUserIdByTbUserIdExecute(r ApiGetDingUserIdByTbUserIdRequest) (*GetTbUserIdByDingUserIdResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTbUserIdByDingUserIdResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/idmap/dingtalk/getDingUserId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tbUserIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tbUserIds", r.tbUserIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOrgInfoRequest struct {
	ctx context.Context
	ApiService *OrgAPIService
	xTenantId *string
}

// 企业 ID
func (r ApiGetOrgInfoRequest) XTenantId(xTenantId string) ApiGetOrgInfoRequest {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiGetOrgInfoRequest) Execute() (*GetOrgInfoResponse, *http.Response, error) {
	return r.ApiService.GetOrgInfoExecute(r)
}

/*
GetOrgInfo 获取企业信息

该接口用于获取企业的信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetOrgInfoRequest

  @link https://open.teambition.com/docs/apis/6321c6ce912d20d3b5a488f4 document
*/
func (a *OrgAPIService) GetOrgInfo(ctx context.Context) ApiGetOrgInfoRequest {
	return ApiGetOrgInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetOrgInfoResponse
func (a *OrgAPIService) GetOrgInfoExecute(r ApiGetOrgInfoRequest) (*GetOrgInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetOrgInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTbUserIdByDingUserIdRequest struct {
	ctx context.Context
	ApiService *OrgAPIService
	xTenantId *string
	dingUserIds *string
}

// 企业 ID
func (r ApiGetTbUserIdByDingUserIdRequest) XTenantId(xTenantId string) ApiGetTbUserIdByDingUserIdRequest {
	r.xTenantId = &xTenantId
	return r
}

// 钉钉用户 ID,多个用逗号分隔, 批量最多不超过 50 个, 例如 manager4221,manager4222
func (r ApiGetTbUserIdByDingUserIdRequest) DingUserIds(dingUserIds string) ApiGetTbUserIdByDingUserIdRequest {
	r.dingUserIds = &dingUserIds
	return r
}

func (r ApiGetTbUserIdByDingUserIdRequest) Execute() (*GetTbUserIdByDingUserIdResponse, *http.Response, error) {
	return r.ApiService.GetTbUserIdByDingUserIdExecute(r)
}

/*
GetTbUserIdByDingUserId 钉钉 userId 查询 Teambition userId

该接口用于钉钉 userId 查询 Teambition userId, 如果需要通过 Teambition userId 查询钉钉 userId,查看[Teambition userId 查询钉钉 userId](api.operationId=GetDingUserIdByTbUserId)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTbUserIdByDingUserIdRequest

  @link https://open.teambition.com/docs/apis/66792847912d20d3b5160f10 document
*/
func (a *OrgAPIService) GetTbUserIdByDingUserId(ctx context.Context) ApiGetTbUserIdByDingUserIdRequest {
	return ApiGetTbUserIdByDingUserIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTbUserIdByDingUserIdResponse
func (a *OrgAPIService) GetTbUserIdByDingUserIdExecute(r ApiGetTbUserIdByDingUserIdRequest) (*GetTbUserIdByDingUserIdResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTbUserIdByDingUserIdResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/idmap/dingtalk/getTbUserId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dingUserIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dingUserIds", r.dingUserIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListLicenseAllocationsRequest struct {
	ctx context.Context
	ApiService *OrgAPIService
	xTenantId *string
	orgId *string
	pageSize *string
	pageToken *string
}

// 企业 ID
func (r ApiListLicenseAllocationsRequest) XTenantId(xTenantId string) ApiListLicenseAllocationsRequest {
	r.xTenantId = &xTenantId
	return r
}

// 企业ID
func (r ApiListLicenseAllocationsRequest) OrgId(orgId string) ApiListLicenseAllocationsRequest {
	r.orgId = &orgId
	return r
}

// 分页大小, 示例值：10
func (r ApiListLicenseAllocationsRequest) PageSize(pageSize string) ApiListLicenseAllocationsRequest {
	r.pageSize = &pageSize
	return r
}

// 分页标记，第一次请求不填或者空字符串，表示从头开始遍历；分页查询结果还有更多项时返回 nextPageToken，下次遍历可采用该 nextPageToken 入参 pageToken 获取查询结果，示例值：\&quot;cfcb90voe9jct71bqkfg\&quot;
func (r ApiListLicenseAllocationsRequest) PageToken(pageToken string) ApiListLicenseAllocationsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListLicenseAllocationsRequest) Execute() (*ListLicenseAllocationsResponse, *http.Response, error) {
	return r.ApiService.ListLicenseAllocationsExecute(r)
}

/*
ListLicenseAllocations 获取License名额分配列表

获取License名额分配列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListLicenseAllocationsRequest

  @link https://open.teambition.com/docs/apis/6364d27b912d20d3b5f654a5 document
*/
func (a *OrgAPIService) ListLicenseAllocations(ctx context.Context) ApiListLicenseAllocationsRequest {
	return ApiListLicenseAllocationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListLicenseAllocationsResponse
func (a *OrgAPIService) ListLicenseAllocationsExecute(r ApiListLicenseAllocationsRequest) (*ListLicenseAllocationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListLicenseAllocationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/seat/member/allocated"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.orgId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgId", r.orgId, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
