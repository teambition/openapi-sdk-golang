/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProgramAPIService ProgramAPI service
type ProgramAPIService service

type ApiAddProgramMembersV3Request struct {
	ctx context.Context
	ApiService *ProgramAPIService
	programId string
	xOperatorId *string
	xTenantId *string
	addProgramMembersV3Request *AddProgramMembersV3Request
}

// 操作人 ID
func (r ApiAddProgramMembersV3Request) XOperatorId(xOperatorId string) ApiAddProgramMembersV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiAddProgramMembersV3Request) XTenantId(xTenantId string) ApiAddProgramMembersV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiAddProgramMembersV3Request) AddProgramMembersV3Request(addProgramMembersV3Request AddProgramMembersV3Request) ApiAddProgramMembersV3Request {
	r.addProgramMembersV3Request = &addProgramMembersV3Request
	return r
}

func (r ApiAddProgramMembersV3Request) Execute() (*AddProgramMembersV3Response, *http.Response, error) {
	return r.ApiService.AddProgramMembersV3Execute(r)
}

/*
AddProgramMembersV3 批量添加成员到项目集

批量添加成员到项目集

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param programId 项目集 ID
 @return ApiAddProgramMembersV3Request

  @link https://open.teambition.com/docs/apis/66693d96912d20d3b5ee560b document
*/
func (a *ProgramAPIService) AddProgramMembersV3(ctx context.Context, programId string) ApiAddProgramMembersV3Request {
	return ApiAddProgramMembersV3Request{
		ApiService: a,
		ctx: ctx,
		programId: programId,
	}
}

// Execute executes the request
//  @return AddProgramMembersV3Response
func (a *ProgramAPIService) AddProgramMembersV3Execute(r ApiAddProgramMembersV3Request) (*AddProgramMembersV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddProgramMembersV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/program/{programId}/member/create"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", url.PathEscape(parameterValueToString(r.programId, "programId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.addProgramMembersV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAddProgramProjectsV3Request struct {
	ctx context.Context
	ApiService *ProgramAPIService
	programId string
	xOperatorId *string
	xTenantId *string
	addProgramProjectsV3Request *AddProgramProjectsV3Request
}

// 操作人 ID
func (r ApiAddProgramProjectsV3Request) XOperatorId(xOperatorId string) ApiAddProgramProjectsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiAddProgramProjectsV3Request) XTenantId(xTenantId string) ApiAddProgramProjectsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiAddProgramProjectsV3Request) AddProgramProjectsV3Request(addProgramProjectsV3Request AddProgramProjectsV3Request) ApiAddProgramProjectsV3Request {
	r.addProgramProjectsV3Request = &addProgramProjectsV3Request
	return r
}

func (r ApiAddProgramProjectsV3Request) Execute() (*AddProgramProjectsV3Response, *http.Response, error) {
	return r.ApiService.AddProgramProjectsV3Execute(r)
}

/*
AddProgramProjectsV3 批量添加项目到项目集

批量添加项目到项目集

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param programId 项目集 ID
 @return ApiAddProgramProjectsV3Request

  @link https://open.teambition.com/docs/apis/64e810ff912d20d3b58fa74a document
*/
func (a *ProgramAPIService) AddProgramProjectsV3(ctx context.Context, programId string) ApiAddProgramProjectsV3Request {
	return ApiAddProgramProjectsV3Request{
		ApiService: a,
		ctx: ctx,
		programId: programId,
	}
}

// Execute executes the request
//  @return AddProgramProjectsV3Response
func (a *ProgramAPIService) AddProgramProjectsV3Execute(r ApiAddProgramProjectsV3Request) (*AddProgramProjectsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddProgramProjectsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/program/{programId}/project/create"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", url.PathEscape(parameterValueToString(r.programId, "programId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.addProgramProjectsV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProgramStatusCustomFieldV3Request struct {
	ctx context.Context
	ApiService *ProgramAPIService
	programId string
	xOperatorId *string
	xTenantId *string
	createProgramStatusCustomFieldV3Request *CreateProgramStatusCustomFieldV3Request
}

// 操作者 ID
func (r ApiCreateProgramStatusCustomFieldV3Request) XOperatorId(xOperatorId string) ApiCreateProgramStatusCustomFieldV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateProgramStatusCustomFieldV3Request) XTenantId(xTenantId string) ApiCreateProgramStatusCustomFieldV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateProgramStatusCustomFieldV3Request) CreateProgramStatusCustomFieldV3Request(createProgramStatusCustomFieldV3Request CreateProgramStatusCustomFieldV3Request) ApiCreateProgramStatusCustomFieldV3Request {
	r.createProgramStatusCustomFieldV3Request = &createProgramStatusCustomFieldV3Request
	return r
}

func (r ApiCreateProgramStatusCustomFieldV3Request) Execute() (*CreateProgramStatusCustomFieldV3Response, *http.Response, error) {
	return r.ApiService.CreateProgramStatusCustomFieldV3Execute(r)
}

/*
CreateProgramStatusCustomFieldV3 更新项目集概览自定义字段值

更新项目集概览自定义字段值

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param programId 项目集 ID
 @return ApiCreateProgramStatusCustomFieldV3Request

  @link https://open.teambition.com/docs/apis/66e00a72912d20d3b5a1572b document
*/
func (a *ProgramAPIService) CreateProgramStatusCustomFieldV3(ctx context.Context, programId string) ApiCreateProgramStatusCustomFieldV3Request {
	return ApiCreateProgramStatusCustomFieldV3Request{
		ApiService: a,
		ctx: ctx,
		programId: programId,
	}
}

// Execute executes the request
//  @return CreateProgramStatusCustomFieldV3Response
func (a *ProgramAPIService) CreateProgramStatusCustomFieldV3Execute(r ApiCreateProgramStatusCustomFieldV3Request) (*CreateProgramStatusCustomFieldV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateProgramStatusCustomFieldV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/program/{programId}/status/customfield/create"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", url.PathEscape(parameterValueToString(r.programId, "programId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createProgramStatusCustomFieldV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProgramStatusV3Request struct {
	ctx context.Context
	ApiService *ProgramAPIService
	programId string
	xOperatorId *string
	xTenantId *string
	createProgramStatusV3Request *CreateProgramStatusV3Request
}

// 操作者 ID
func (r ApiCreateProgramStatusV3Request) XOperatorId(xOperatorId string) ApiCreateProgramStatusV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateProgramStatusV3Request) XTenantId(xTenantId string) ApiCreateProgramStatusV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateProgramStatusV3Request) CreateProgramStatusV3Request(createProgramStatusV3Request CreateProgramStatusV3Request) ApiCreateProgramStatusV3Request {
	r.createProgramStatusV3Request = &createProgramStatusV3Request
	return r
}

func (r ApiCreateProgramStatusV3Request) Execute() (*CreateProgramStatusV3Response, *http.Response, error) {
	return r.ApiService.CreateProgramStatusV3Execute(r)
}

/*
CreateProgramStatusV3 创建项目集状态

创建项目集状态

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param programId 项目集 ID
 @return ApiCreateProgramStatusV3Request

  @link https://open.teambition.com/docs/apis/66e00a72912d20d3b5a15688 document
*/
func (a *ProgramAPIService) CreateProgramStatusV3(ctx context.Context, programId string) ApiCreateProgramStatusV3Request {
	return ApiCreateProgramStatusV3Request{
		ApiService: a,
		ctx: ctx,
		programId: programId,
	}
}

// Execute executes the request
//  @return CreateProgramStatusV3Response
func (a *ProgramAPIService) CreateProgramStatusV3Execute(r ApiCreateProgramStatusV3Request) (*CreateProgramStatusV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateProgramStatusV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/program/{programId}/status/create"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", url.PathEscape(parameterValueToString(r.programId, "programId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createProgramStatusV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProgramV3Request struct {
	ctx context.Context
	ApiService *ProgramAPIService
	xOperatorId *string
	xTenantId *string
	createProgramV3Request *CreateProgramV3Request
}

// 操作人 ID
func (r ApiCreateProgramV3Request) XOperatorId(xOperatorId string) ApiCreateProgramV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateProgramV3Request) XTenantId(xTenantId string) ApiCreateProgramV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateProgramV3Request) CreateProgramV3Request(createProgramV3Request CreateProgramV3Request) ApiCreateProgramV3Request {
	r.createProgramV3Request = &createProgramV3Request
	return r
}

func (r ApiCreateProgramV3Request) Execute() (*CreateProgramV3Response, *http.Response, error) {
	return r.ApiService.CreateProgramV3Execute(r)
}

/*
CreateProgramV3 创建项目集

创建项目集

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateProgramV3Request

  @link https://open.teambition.com/docs/apis/64e810ff912d20d3b58fa614 document
*/
func (a *ProgramAPIService) CreateProgramV3(ctx context.Context) ApiCreateProgramV3Request {
	return ApiCreateProgramV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateProgramV3Response
func (a *ProgramAPIService) CreateProgramV3Execute(r ApiCreateProgramV3Request) (*CreateProgramV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateProgramV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/program/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createProgramV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteProgramStatusCustomFieldV3Request struct {
	ctx context.Context
	ApiService *ProgramAPIService
	programId string
	xOperatorId *string
	xTenantId *string
	deleteProgramStatusCustomFieldV3Request *DeleteProgramStatusCustomFieldV3Request
}

// 操作者 ID
func (r ApiDeleteProgramStatusCustomFieldV3Request) XOperatorId(xOperatorId string) ApiDeleteProgramStatusCustomFieldV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteProgramStatusCustomFieldV3Request) XTenantId(xTenantId string) ApiDeleteProgramStatusCustomFieldV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiDeleteProgramStatusCustomFieldV3Request) DeleteProgramStatusCustomFieldV3Request(deleteProgramStatusCustomFieldV3Request DeleteProgramStatusCustomFieldV3Request) ApiDeleteProgramStatusCustomFieldV3Request {
	r.deleteProgramStatusCustomFieldV3Request = &deleteProgramStatusCustomFieldV3Request
	return r
}

func (r ApiDeleteProgramStatusCustomFieldV3Request) Execute() (*DeleteProgramStatusCustomFieldV3Response, *http.Response, error) {
	return r.ApiService.DeleteProgramStatusCustomFieldV3Execute(r)
}

/*
DeleteProgramStatusCustomFieldV3 删除项目集概览自定义字段

删除项目集概览自定义字段

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param programId 项目集 ID
 @return ApiDeleteProgramStatusCustomFieldV3Request

  @link https://open.teambition.com/docs/apis/66e00a72912d20d3b5a1578a document
*/
func (a *ProgramAPIService) DeleteProgramStatusCustomFieldV3(ctx context.Context, programId string) ApiDeleteProgramStatusCustomFieldV3Request {
	return ApiDeleteProgramStatusCustomFieldV3Request{
		ApiService: a,
		ctx: ctx,
		programId: programId,
	}
}

// Execute executes the request
//  @return DeleteProgramStatusCustomFieldV3Response
func (a *ProgramAPIService) DeleteProgramStatusCustomFieldV3Execute(r ApiDeleteProgramStatusCustomFieldV3Request) (*DeleteProgramStatusCustomFieldV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteProgramStatusCustomFieldV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/program/{programId}/status/customfield/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", url.PathEscape(parameterValueToString(r.programId, "programId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.deleteProgramStatusCustomFieldV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteProgramStatusV3Request struct {
	ctx context.Context
	ApiService *ProgramAPIService
	programId string
	xOperatorId *string
	xTenantId *string
	deleteProgramStatusV3Request *DeleteProgramStatusV3Request
}

// 操作者 ID
func (r ApiDeleteProgramStatusV3Request) XOperatorId(xOperatorId string) ApiDeleteProgramStatusV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteProgramStatusV3Request) XTenantId(xTenantId string) ApiDeleteProgramStatusV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiDeleteProgramStatusV3Request) DeleteProgramStatusV3Request(deleteProgramStatusV3Request DeleteProgramStatusV3Request) ApiDeleteProgramStatusV3Request {
	r.deleteProgramStatusV3Request = &deleteProgramStatusV3Request
	return r
}

func (r ApiDeleteProgramStatusV3Request) Execute() (*DeleteProgramStatusV3Response, *http.Response, error) {
	return r.ApiService.DeleteProgramStatusV3Execute(r)
}

/*
DeleteProgramStatusV3 删除项目集状态

删除项目集状态

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param programId 项目集 ID
 @return ApiDeleteProgramStatusV3Request

  @link https://open.teambition.com/docs/apis/66e00a72912d20d3b5a15875 document
*/
func (a *ProgramAPIService) DeleteProgramStatusV3(ctx context.Context, programId string) ApiDeleteProgramStatusV3Request {
	return ApiDeleteProgramStatusV3Request{
		ApiService: a,
		ctx: ctx,
		programId: programId,
	}
}

// Execute executes the request
//  @return DeleteProgramStatusV3Response
func (a *ProgramAPIService) DeleteProgramStatusV3Execute(r ApiDeleteProgramStatusV3Request) (*DeleteProgramStatusV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteProgramStatusV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/program/{programId}/status/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", url.PathEscape(parameterValueToString(r.programId, "programId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.deleteProgramStatusV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteProgramV3Request struct {
	ctx context.Context
	ApiService *ProgramAPIService
	programId string
	xOperatorId *string
	xTenantId *string
}

// 操作人 ID
func (r ApiDeleteProgramV3Request) XOperatorId(xOperatorId string) ApiDeleteProgramV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteProgramV3Request) XTenantId(xTenantId string) ApiDeleteProgramV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiDeleteProgramV3Request) Execute() (*DeleteProgramV3Response, *http.Response, error) {
	return r.ApiService.DeleteProgramV3Execute(r)
}

/*
DeleteProgramV3 删除项目集

删除项目集

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param programId 项目集 ID
 @return ApiDeleteProgramV3Request

  @link https://open.teambition.com/docs/apis/64e810ff912d20d3b58fa695 document
*/
func (a *ProgramAPIService) DeleteProgramV3(ctx context.Context, programId string) ApiDeleteProgramV3Request {
	return ApiDeleteProgramV3Request{
		ApiService: a,
		ctx: ctx,
		programId: programId,
	}
}

// Execute executes the request
//  @return DeleteProgramV3Response
func (a *ProgramAPIService) DeleteProgramV3Execute(r ApiDeleteProgramV3Request) (*DeleteProgramV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteProgramV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/program/{programId}/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", url.PathEscape(parameterValueToString(r.programId, "programId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProgramsV3Request struct {
	ctx context.Context
	ApiService *ProgramAPIService
	xTenantId *string
	programIds *string
	virtualProjectIds *string
	q *string
	orderBy *string
	pageSize *int32
	pageToken *string
}

// 企业 ID
func (r ApiGetProgramsV3Request) XTenantId(xTenantId string) ApiGetProgramsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 项目集 ID 列表, 逗号分隔，最多50个
func (r ApiGetProgramsV3Request) ProgramIds(programIds string) ApiGetProgramsV3Request {
	r.programIds = &programIds
	return r
}

// 虚拟项目 ID 列表, 逗号分隔，最多50个
func (r ApiGetProgramsV3Request) VirtualProjectIds(virtualProjectIds string) ApiGetProgramsV3Request {
	r.virtualProjectIds = &virtualProjectIds
	return r
}

// 搜索项目集标题关键词
func (r ApiGetProgramsV3Request) Q(q string) ApiGetProgramsV3Request {
	r.q = &q
	return r
}

// 
func (r ApiGetProgramsV3Request) OrderBy(orderBy string) ApiGetProgramsV3Request {
	r.orderBy = &orderBy
	return r
}

// 分页长度
func (r ApiGetProgramsV3Request) PageSize(pageSize int32) ApiGetProgramsV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiGetProgramsV3Request) PageToken(pageToken string) ApiGetProgramsV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiGetProgramsV3Request) Execute() (*GetProgramsV3Response, *http.Response, error) {
	return r.ApiService.GetProgramsV3Execute(r)
}

/*
GetProgramsV3 查询项目集

查询项目集

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProgramsV3Request

  @link https://open.teambition.com/docs/apis/6501ad17912d20d3b5086630 document
*/
func (a *ProgramAPIService) GetProgramsV3(ctx context.Context) ApiGetProgramsV3Request {
	return ApiGetProgramsV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetProgramsV3Response
func (a *ProgramAPIService) GetProgramsV3Execute(r ApiGetProgramsV3Request) (*GetProgramsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetProgramsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/program/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.programIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "programIds", r.programIds, "")
	}
	if r.virtualProjectIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "virtualProjectIds", r.virtualProjectIds, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListProgramMembersV3Request struct {
	ctx context.Context
	ApiService *ProgramAPIService
	programId string
	xOperatorId *string
	xTenantId *string
	userIds *string
	pageSize *int32
	pageToken *string
}

// 操作者 ID
func (r ApiListProgramMembersV3Request) XOperatorId(xOperatorId string) ApiListProgramMembersV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListProgramMembersV3Request) XTenantId(xTenantId string) ApiListProgramMembersV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 用户 ID 列表, 逗号分隔，最多50个
func (r ApiListProgramMembersV3Request) UserIds(userIds string) ApiListProgramMembersV3Request {
	r.userIds = &userIds
	return r
}

// 每页项目数
func (r ApiListProgramMembersV3Request) PageSize(pageSize int32) ApiListProgramMembersV3Request {
	r.pageSize = &pageSize
	return r
}

// 页码标识
func (r ApiListProgramMembersV3Request) PageToken(pageToken string) ApiListProgramMembersV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiListProgramMembersV3Request) Execute() (*ListProgramMembersV3Response, *http.Response, error) {
	return r.ApiService.ListProgramMembersV3Execute(r)
}

/*
ListProgramMembersV3 查询项目集内成员

查询项目集内成员

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param programId 项目集 ID
 @return ApiListProgramMembersV3Request

  @link https://open.teambition.com/docs/apis/66693d96912d20d3b5ee5737 document
*/
func (a *ProgramAPIService) ListProgramMembersV3(ctx context.Context, programId string) ApiListProgramMembersV3Request {
	return ApiListProgramMembersV3Request{
		ApiService: a,
		ctx: ctx,
		programId: programId,
	}
}

// Execute executes the request
//  @return ListProgramMembersV3Response
func (a *ProgramAPIService) ListProgramMembersV3Execute(r ApiListProgramMembersV3Request) (*ListProgramMembersV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListProgramMembersV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/program/{programId}/member"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", url.PathEscape(parameterValueToString(r.programId, "programId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userIds", r.userIds, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListProgramProjectsV3Request struct {
	ctx context.Context
	ApiService *ProgramAPIService
	programId string
	xOperatorId *string
	xTenantId *string
	pageSize *int32
	pageToken *string
	withSubPrograms *bool
	tql *string
}

// 操作者 ID
func (r ApiListProgramProjectsV3Request) XOperatorId(xOperatorId string) ApiListProgramProjectsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListProgramProjectsV3Request) XTenantId(xTenantId string) ApiListProgramProjectsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 每页项目数
func (r ApiListProgramProjectsV3Request) PageSize(pageSize int32) ApiListProgramProjectsV3Request {
	r.pageSize = &pageSize
	return r
}

// 页码标识
func (r ApiListProgramProjectsV3Request) PageToken(pageToken string) ApiListProgramProjectsV3Request {
	r.pageToken = &pageToken
	return r
}

// 是否包含子项目集
func (r ApiListProgramProjectsV3Request) WithSubPrograms(withSubPrograms bool) ApiListProgramProjectsV3Request {
	r.withSubPrograms = &withSubPrograms
	return r
}

// 查询语言
func (r ApiListProgramProjectsV3Request) Tql(tql string) ApiListProgramProjectsV3Request {
	r.tql = &tql
	return r
}

func (r ApiListProgramProjectsV3Request) Execute() (*ListProgramProjectsV3Response, *http.Response, error) {
	return r.ApiService.ListProgramProjectsV3Execute(r)
}

/*
ListProgramProjectsV3 查询项目集内项目

查询项目集内项目

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param programId 项目集 ID
 @return ApiListProgramProjectsV3Request

  @link https://open.teambition.com/docs/apis/64e810ff912d20d3b58fa85c document
*/
func (a *ProgramAPIService) ListProgramProjectsV3(ctx context.Context, programId string) ApiListProgramProjectsV3Request {
	return ApiListProgramProjectsV3Request{
		ApiService: a,
		ctx: ctx,
		programId: programId,
	}
}

// Execute executes the request
//  @return ListProgramProjectsV3Response
func (a *ProgramAPIService) ListProgramProjectsV3Execute(r ApiListProgramProjectsV3Request) (*ListProgramProjectsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListProgramProjectsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/program/{programId}/projects"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", url.PathEscape(parameterValueToString(r.programId, "programId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.withSubPrograms != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withSubPrograms", r.withSubPrograms, "")
	}
	if r.tql != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tql", r.tql, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListProgramStatusCustomFieldsV3Request struct {
	ctx context.Context
	ApiService *ProgramAPIService
	programId string
	xTenantId *string
	pageSize *int32
	pageToken *string
}

// 企业 ID
func (r ApiListProgramStatusCustomFieldsV3Request) XTenantId(xTenantId string) ApiListProgramStatusCustomFieldsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 分页长度
func (r ApiListProgramStatusCustomFieldsV3Request) PageSize(pageSize int32) ApiListProgramStatusCustomFieldsV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiListProgramStatusCustomFieldsV3Request) PageToken(pageToken string) ApiListProgramStatusCustomFieldsV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiListProgramStatusCustomFieldsV3Request) Execute() (*ListProgramStatusCustomFieldsV3Response, *http.Response, error) {
	return r.ApiService.ListProgramStatusCustomFieldsV3Execute(r)
}

/*
ListProgramStatusCustomFieldsV3 查询项目集概览自定义字段列表

查询项目集概览自定义字段列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param programId 项目集 ID
 @return ApiListProgramStatusCustomFieldsV3Request

  @link https://open.teambition.com/docs/apis/66e00a72912d20d3b5a157f5 document
*/
func (a *ProgramAPIService) ListProgramStatusCustomFieldsV3(ctx context.Context, programId string) ApiListProgramStatusCustomFieldsV3Request {
	return ApiListProgramStatusCustomFieldsV3Request{
		ApiService: a,
		ctx: ctx,
		programId: programId,
	}
}

// Execute executes the request
//  @return ListProgramStatusCustomFieldsV3Response
func (a *ProgramAPIService) ListProgramStatusCustomFieldsV3Execute(r ApiListProgramStatusCustomFieldsV3Request) (*ListProgramStatusCustomFieldsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListProgramStatusCustomFieldsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/program/{programId}/status/customfield/list"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", url.PathEscape(parameterValueToString(r.programId, "programId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListProgramStatusesV3Request struct {
	ctx context.Context
	ApiService *ProgramAPIService
	programId string
	xOperatorId *string
	xTenantId *string
	pageToken *string
	pageSize *int32
	renderHtml *bool
	htmlExpireSeconds *int32
}

// 查询人 ID
func (r ApiListProgramStatusesV3Request) XOperatorId(xOperatorId string) ApiListProgramStatusesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListProgramStatusesV3Request) XTenantId(xTenantId string) ApiListProgramStatusesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 分页标
func (r ApiListProgramStatusesV3Request) PageToken(pageToken string) ApiListProgramStatusesV3Request {
	r.pageToken = &pageToken
	return r
}

// 分页大小
func (r ApiListProgramStatusesV3Request) PageSize(pageSize int32) ApiListProgramStatusesV3Request {
	r.pageSize = &pageSize
	return r
}

// 是否对富文本内容html渲染，仅对白名单的应用开放
func (r ApiListProgramStatusesV3Request) RenderHtml(renderHtml bool) ApiListProgramStatusesV3Request {
	r.renderHtml = &renderHtml
	return r
}

// 渲染html时内容过期时间，默认为 1800(秒)
func (r ApiListProgramStatusesV3Request) HtmlExpireSeconds(htmlExpireSeconds int32) ApiListProgramStatusesV3Request {
	r.htmlExpireSeconds = &htmlExpireSeconds
	return r
}

func (r ApiListProgramStatusesV3Request) Execute() (*ListProgramStatusesV3Response, *http.Response, error) {
	return r.ApiService.ListProgramStatusesV3Execute(r)
}

/*
ListProgramStatusesV3 查询项目集状态和状态历史

查询项目集状态和状态历史

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param programId 项目集 ID
 @return ApiListProgramStatusesV3Request

  @link https://open.teambition.com/docs/apis/66e00a73912d20d3b5a158dd document
*/
func (a *ProgramAPIService) ListProgramStatusesV3(ctx context.Context, programId string) ApiListProgramStatusesV3Request {
	return ApiListProgramStatusesV3Request{
		ApiService: a,
		ctx: ctx,
		programId: programId,
	}
}

// Execute executes the request
//  @return ListProgramStatusesV3Response
func (a *ProgramAPIService) ListProgramStatusesV3Execute(r ApiListProgramStatusesV3Request) (*ListProgramStatusesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListProgramStatusesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/program/{programId}/status/list"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", url.PathEscape(parameterValueToString(r.programId, "programId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.renderHtml != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "renderHtml", r.renderHtml, "")
	}
	if r.htmlExpireSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "htmlExpireSeconds", r.htmlExpireSeconds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveProgramMembersV3Request struct {
	ctx context.Context
	ApiService *ProgramAPIService
	programId string
	xOperatorId *string
	xTenantId *string
	addProgramMembersV3Request *AddProgramMembersV3Request
}

// 操作人 ID
func (r ApiRemoveProgramMembersV3Request) XOperatorId(xOperatorId string) ApiRemoveProgramMembersV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiRemoveProgramMembersV3Request) XTenantId(xTenantId string) ApiRemoveProgramMembersV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiRemoveProgramMembersV3Request) AddProgramMembersV3Request(addProgramMembersV3Request AddProgramMembersV3Request) ApiRemoveProgramMembersV3Request {
	r.addProgramMembersV3Request = &addProgramMembersV3Request
	return r
}

func (r ApiRemoveProgramMembersV3Request) Execute() (*AddProgramMembersV3Response, *http.Response, error) {
	return r.ApiService.RemoveProgramMembersV3Execute(r)
}

/*
RemoveProgramMembersV3 批量删除项目集内的成员

批量删除项目集内的成员

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param programId 项目集 ID
 @return ApiRemoveProgramMembersV3Request

  @link https://open.teambition.com/docs/apis/66693d96912d20d3b5ee56af document
*/
func (a *ProgramAPIService) RemoveProgramMembersV3(ctx context.Context, programId string) ApiRemoveProgramMembersV3Request {
	return ApiRemoveProgramMembersV3Request{
		ApiService: a,
		ctx: ctx,
		programId: programId,
	}
}

// Execute executes the request
//  @return AddProgramMembersV3Response
func (a *ProgramAPIService) RemoveProgramMembersV3Execute(r ApiRemoveProgramMembersV3Request) (*AddProgramMembersV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddProgramMembersV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/program/{programId}/member/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", url.PathEscape(parameterValueToString(r.programId, "programId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.addProgramMembersV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveProgramProjectV3Request struct {
	ctx context.Context
	ApiService *ProgramAPIService
	programId string
	projectId string
	xOperatorId *string
	xTenantId *string
}

// 操作人 ID
func (r ApiRemoveProgramProjectV3Request) XOperatorId(xOperatorId string) ApiRemoveProgramProjectV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiRemoveProgramProjectV3Request) XTenantId(xTenantId string) ApiRemoveProgramProjectV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiRemoveProgramProjectV3Request) Execute() (*RemoveProgramProjectV3Response, *http.Response, error) {
	return r.ApiService.RemoveProgramProjectV3Execute(r)
}

/*
RemoveProgramProjectV3 删除项目集内的项目

删除项目集内的项目

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param programId 项目集 ID
 @param projectId 项目 ID
 @return ApiRemoveProgramProjectV3Request

  @link https://open.teambition.com/docs/apis/64e810ff912d20d3b58fa7d3 document
*/
func (a *ProgramAPIService) RemoveProgramProjectV3(ctx context.Context, programId string, projectId string) ApiRemoveProgramProjectV3Request {
	return ApiRemoveProgramProjectV3Request{
		ApiService: a,
		ctx: ctx,
		programId: programId,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return RemoveProgramProjectV3Response
func (a *ProgramAPIService) RemoveProgramProjectV3Execute(r ApiRemoveProgramProjectV3Request) (*RemoveProgramProjectV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemoveProgramProjectV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/program/{programId}/project/{projectId}/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", url.PathEscape(parameterValueToString(r.programId, "programId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
