/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProjectAPIService ProjectAPI service
type ProjectAPIService service

type ApiAddProjectGroupMemberV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectTagId string
	xOperatorId *string
	xTenantId *string
	addProjectGroupMemberV3Request *AddProjectGroupMemberV3Request
}

// 操作者ID
func (r ApiAddProjectGroupMemberV3Request) XOperatorId(xOperatorId string) ApiAddProjectGroupMemberV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiAddProjectGroupMemberV3Request) XTenantId(xTenantId string) ApiAddProjectGroupMemberV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiAddProjectGroupMemberV3Request) AddProjectGroupMemberV3Request(addProjectGroupMemberV3Request AddProjectGroupMemberV3Request) ApiAddProjectGroupMemberV3Request {
	r.addProjectGroupMemberV3Request = &addProjectGroupMemberV3Request
	return r
}

func (r ApiAddProjectGroupMemberV3Request) Execute() (*AddProjectGroupMemberV3Response, *http.Response, error) {
	return r.ApiService.AddProjectGroupMemberV3Execute(r)
}

/*
AddProjectGroupMemberV3 创建项目分组成员

创建项目分组成员

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectTagId 项目分组 ID
 @return ApiAddProjectGroupMemberV3Request

  @link https://open.teambition.com/docs/apis/6646e45a912d20d3b576c2f0 document
*/
func (a *ProjectAPIService) AddProjectGroupMemberV3(ctx context.Context, projectTagId string) ApiAddProjectGroupMemberV3Request {
	return ApiAddProjectGroupMemberV3Request{
		ApiService: a,
		ctx: ctx,
		projectTagId: projectTagId,
	}
}

// Execute executes the request
//  @return AddProjectGroupMemberV3Response
func (a *ProjectAPIService) AddProjectGroupMemberV3Execute(r ApiAddProjectGroupMemberV3Request) (*AddProjectGroupMemberV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddProjectGroupMemberV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-tag/{projectTagId}/member/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectTagId"+"}", url.PathEscape(parameterValueToString(r.projectTagId, "projectTagId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.addProjectGroupMemberV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAddProjectMembersV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createProjectMemberV3Request *CreateProjectMemberV3Request
}

// 操作者ID
func (r ApiAddProjectMembersV3Request) XOperatorId(xOperatorId string) ApiAddProjectMembersV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiAddProjectMembersV3Request) XTenantId(xTenantId string) ApiAddProjectMembersV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiAddProjectMembersV3Request) CreateProjectMemberV3Request(createProjectMemberV3Request CreateProjectMemberV3Request) ApiAddProjectMembersV3Request {
	r.createProjectMemberV3Request = &createProjectMemberV3Request
	return r
}

func (r ApiAddProjectMembersV3Request) Execute() (*CreateProjectMemberV3Response, *http.Response, error) {
	return r.ApiService.AddProjectMembersV3Execute(r)
}

/*
AddProjectMembersV3 创建项目成员 v2

创建项目成员 v2

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiAddProjectMembersV3Request

  @link https://open.teambition.com/docs/apis/6363bcfa912d20d3b56faf07 document
*/
func (a *ProjectAPIService) AddProjectMembersV3(ctx context.Context, projectId string) ApiAddProjectMembersV3Request {
	return ApiAddProjectMembersV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateProjectMemberV3Response
func (a *ProjectAPIService) AddProjectMembersV3Execute(r ApiAddProjectMembersV3Request) (*CreateProjectMemberV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateProjectMemberV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/member/create-v2"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createProjectMemberV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiArchiveProjectV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
}

// 操作者ID
func (r ApiArchiveProjectV3Request) XOperatorId(xOperatorId string) ApiArchiveProjectV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiArchiveProjectV3Request) XTenantId(xTenantId string) ApiArchiveProjectV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiArchiveProjectV3Request) Execute() (*ArchiveProjectV3Response, *http.Response, error) {
	return r.ApiService.ArchiveProjectV3Execute(r)
}

/*
ArchiveProjectV3 项目放入回收站

项目放入回收站

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiArchiveProjectV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a496ed document
*/
func (a *ProjectAPIService) ArchiveProjectV3(ctx context.Context, projectId string) ApiArchiveProjectV3Request {
	return ApiArchiveProjectV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ArchiveProjectV3Response
func (a *ProjectAPIService) ArchiveProjectV3Execute(r ApiArchiveProjectV3Request) (*ArchiveProjectV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ArchiveProjectV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/archive"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssignMemberRoleV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	assignMemberRoleV3Request *AssignMemberRoleV3Request
}

// 操作者ID
func (r ApiAssignMemberRoleV3Request) XOperatorId(xOperatorId string) ApiAssignMemberRoleV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiAssignMemberRoleV3Request) XTenantId(xTenantId string) ApiAssignMemberRoleV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiAssignMemberRoleV3Request) AssignMemberRoleV3Request(assignMemberRoleV3Request AssignMemberRoleV3Request) ApiAssignMemberRoleV3Request {
	r.assignMemberRoleV3Request = &assignMemberRoleV3Request
	return r
}

func (r ApiAssignMemberRoleV3Request) Execute() (*AssignMemberRoleV3Response, *http.Response, error) {
	return r.ApiService.AssignMemberRoleV3Execute(r)
}

/*
AssignMemberRoleV3 修改项目成员的角色

修改项目成员的角色

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiAssignMemberRoleV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a49942 document
*/
func (a *ProjectAPIService) AssignMemberRoleV3(ctx context.Context, projectId string) ApiAssignMemberRoleV3Request {
	return ApiAssignMemberRoleV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return AssignMemberRoleV3Response
func (a *ProjectAPIService) AssignMemberRoleV3Execute(r ApiAssignMemberRoleV3Request) (*AssignMemberRoleV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AssignMemberRoleV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/member/role/assign"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.assignMemberRoleV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchGetProjectCustomFiledByInstanceIdsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	instanceIds *string
}

// 查询人ID, 如果存在会检查该成员可见的任务
func (r ApiBatchGetProjectCustomFiledByInstanceIdsV3Request) XOperatorId(xOperatorId string) ApiBatchGetProjectCustomFiledByInstanceIdsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiBatchGetProjectCustomFiledByInstanceIdsV3Request) XTenantId(xTenantId string) ApiBatchGetProjectCustomFiledByInstanceIdsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 字段InstanceId，用逗号组合
func (r ApiBatchGetProjectCustomFiledByInstanceIdsV3Request) InstanceIds(instanceIds string) ApiBatchGetProjectCustomFiledByInstanceIdsV3Request {
	r.instanceIds = &instanceIds
	return r
}

func (r ApiBatchGetProjectCustomFiledByInstanceIdsV3Request) Execute() (*BatchGetProjectCustomFiledByInstanceIdsV3Response, *http.Response, error) {
	return r.ApiService.BatchGetProjectCustomFiledByInstanceIdsV3Execute(r)
}

/*
BatchGetProjectCustomFiledByInstanceIdsV3 批量根据instanceId查询字段

批量根据instanceId查询字段

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiBatchGetProjectCustomFiledByInstanceIdsV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a497b9 document
*/
func (a *ProjectAPIService) BatchGetProjectCustomFiledByInstanceIdsV3(ctx context.Context, projectId string) ApiBatchGetProjectCustomFiledByInstanceIdsV3Request {
	return ApiBatchGetProjectCustomFiledByInstanceIdsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return BatchGetProjectCustomFiledByInstanceIdsV3Response
func (a *ProjectAPIService) BatchGetProjectCustomFiledByInstanceIdsV3Execute(r ApiBatchGetProjectCustomFiledByInstanceIdsV3Request) (*BatchGetProjectCustomFiledByInstanceIdsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchGetProjectCustomFiledByInstanceIdsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/customfield/get-by-instance"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.instanceIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceIds", r.instanceIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCompleteSprintV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	sprintId string
	xOperatorId *string
	xTenantId *string
	body *map[string]interface{}
}

// 操作者ID
func (r ApiCompleteSprintV3Request) XOperatorId(xOperatorId string) ApiCompleteSprintV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCompleteSprintV3Request) XTenantId(xTenantId string) ApiCompleteSprintV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCompleteSprintV3Request) Body(body map[string]interface{}) ApiCompleteSprintV3Request {
	r.body = &body
	return r
}

func (r ApiCompleteSprintV3Request) Execute() (*CompleteSprintV3Response, *http.Response, error) {
	return r.ApiService.CompleteSprintV3Execute(r)
}

/*
CompleteSprintV3 完成迭代

完成迭代

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @param sprintId 迭代 ID
 @return ApiCompleteSprintV3Request

  @link https://open.teambition.com/docs/apis/63a08188912d20d3b56b9231 document
*/
func (a *ProjectAPIService) CompleteSprintV3(ctx context.Context, projectId string, sprintId string) ApiCompleteSprintV3Request {
	return ApiCompleteSprintV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		sprintId: sprintId,
	}
}

// Execute executes the request
//  @return CompleteSprintV3Response
func (a *ProjectAPIService) CompleteSprintV3Execute(r ApiCompleteSprintV3Request) (*CompleteSprintV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompleteSprintV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/sprint/{sprintId}/complete"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sprintId"+"}", url.PathEscape(parameterValueToString(r.sprintId, "sprintId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCopyProjectAsyncV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	waitForCompletion *bool
	copyProjectV3Request *CopyProjectV3Request
}

// 操作者ID
func (r ApiCopyProjectAsyncV3Request) XOperatorId(xOperatorId string) ApiCopyProjectAsyncV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCopyProjectAsyncV3Request) XTenantId(xTenantId string) ApiCopyProjectAsyncV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 是否等待项目下资源全部复制完成
func (r ApiCopyProjectAsyncV3Request) WaitForCompletion(waitForCompletion bool) ApiCopyProjectAsyncV3Request {
	r.waitForCompletion = &waitForCompletion
	return r
}

// 
func (r ApiCopyProjectAsyncV3Request) CopyProjectV3Request(copyProjectV3Request CopyProjectV3Request) ApiCopyProjectAsyncV3Request {
	r.copyProjectV3Request = &copyProjectV3Request
	return r
}

func (r ApiCopyProjectAsyncV3Request) Execute() (*CopyProjectAsyncV3Response, *http.Response, error) {
	return r.ApiService.CopyProjectAsyncV3Execute(r)
}

/*
CopyProjectAsyncV3 异步复制项目

异步复制项目, 不等待复制项目完成，需要轮询获取状态

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiCopyProjectAsyncV3Request

  @link https://open.teambition.com/docs/apis/64e810ff912d20d3b58fa8bc document
*/
func (a *ProjectAPIService) CopyProjectAsyncV3(ctx context.Context, projectId string) ApiCopyProjectAsyncV3Request {
	return ApiCopyProjectAsyncV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CopyProjectAsyncV3Response
func (a *ProjectAPIService) CopyProjectAsyncV3Execute(r ApiCopyProjectAsyncV3Request) (*CopyProjectAsyncV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CopyProjectAsyncV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/copy-async"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.waitForCompletion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "waitForCompletion", r.waitForCompletion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.copyProjectV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCopyProjectV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	waitForCompletion *bool
	copyProjectV3Request *CopyProjectV3Request
}

// 操作者ID
func (r ApiCopyProjectV3Request) XOperatorId(xOperatorId string) ApiCopyProjectV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCopyProjectV3Request) XTenantId(xTenantId string) ApiCopyProjectV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 是否等待项目下资源全部复制完成
func (r ApiCopyProjectV3Request) WaitForCompletion(waitForCompletion bool) ApiCopyProjectV3Request {
	r.waitForCompletion = &waitForCompletion
	return r
}

// 
func (r ApiCopyProjectV3Request) CopyProjectV3Request(copyProjectV3Request CopyProjectV3Request) ApiCopyProjectV3Request {
	r.copyProjectV3Request = &copyProjectV3Request
	return r
}

func (r ApiCopyProjectV3Request) Execute() (*CopyProjectV3Response, *http.Response, error) {
	return r.ApiService.CopyProjectV3Execute(r)
}

/*
CopyProjectV3 复制项目

复制项目

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiCopyProjectV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a49724 document
*/
func (a *ProjectAPIService) CopyProjectV3(ctx context.Context, projectId string) ApiCopyProjectV3Request {
	return ApiCopyProjectV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CopyProjectV3Response
func (a *ProjectAPIService) CopyProjectV3Execute(r ApiCopyProjectV3Request) (*CopyProjectV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CopyProjectV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/copy"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.waitForCompletion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "waitForCompletion", r.waitForCompletion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.copyProjectV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCountProjectTasksV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	q *string
	includeArchived *bool
}

// 查询人ID, 有些查询语句依赖查询人
func (r ApiCountProjectTasksV3Request) XOperatorId(xOperatorId string) ApiCountProjectTasksV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCountProjectTasksV3Request) XTenantId(xTenantId string) ApiCountProjectTasksV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 查询语句 参考[TQL查询文档](doc.fullPath&#x3D;/tql-doc)
func (r ApiCountProjectTasksV3Request) Q(q string) ApiCountProjectTasksV3Request {
	r.q = &q
	return r
}

// 是否包含已归档任务, 默认 false
func (r ApiCountProjectTasksV3Request) IncludeArchived(includeArchived bool) ApiCountProjectTasksV3Request {
	r.includeArchived = &includeArchived
	return r
}

func (r ApiCountProjectTasksV3Request) Execute() (*CountProjectTasksV3Response, *http.Response, error) {
	return r.ApiService.CountProjectTasksV3Execute(r)
}

/*
CountProjectTasksV3 计数项目任务

计数项目任务

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiCountProjectTasksV3Request

  @link https://open.teambition.com/docs/apis/6646e45a912d20d3b576c01a document
*/
func (a *ProjectAPIService) CountProjectTasksV3(ctx context.Context, projectId string) ApiCountProjectTasksV3Request {
	return ApiCountProjectTasksV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CountProjectTasksV3Response
func (a *ProjectAPIService) CountProjectTasksV3Execute(r ApiCountProjectTasksV3Request) (*CountProjectTasksV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CountProjectTasksV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/task/count"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.includeArchived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeArchived", r.includeArchived, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateBugGroupRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createBugGroupRequest *CreateBugGroupRequest
}

// 
func (r ApiCreateBugGroupRequest) XOperatorId(xOperatorId string) ApiCreateBugGroupRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateBugGroupRequest) XTenantId(xTenantId string) ApiCreateBugGroupRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateBugGroupRequest) CreateBugGroupRequest(createBugGroupRequest CreateBugGroupRequest) ApiCreateBugGroupRequest {
	r.createBugGroupRequest = &createBugGroupRequest
	return r
}

func (r ApiCreateBugGroupRequest) Execute() (*CreateBugGroupResponse, *http.Response, error) {
	return r.ApiService.CreateBugGroupExecute(r)
}

/*
CreateBugGroup 创建缺陷分类

创建缺陷分类

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiCreateBugGroupRequest

  @link https://open.teambition.com/docs/apis/682c1944912d20d3b5a29c8c document
*/
func (a *ProjectAPIService) CreateBugGroup(ctx context.Context, projectId string) ApiCreateBugGroupRequest {
	return ApiCreateBugGroupRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateBugGroupResponse
func (a *ProjectAPIService) CreateBugGroupExecute(r ApiCreateBugGroupRequest) (*CreateBugGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateBugGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/bug/commongroup/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createBugGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateOrgProjectRoleV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	xOperatorId *string
	xTenantId *string
	createOrgProjectRoleV3Request *CreateOrgProjectRoleV3Request
}

// 创建者 ID
func (r ApiCreateOrgProjectRoleV3Request) XOperatorId(xOperatorId string) ApiCreateOrgProjectRoleV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateOrgProjectRoleV3Request) XTenantId(xTenantId string) ApiCreateOrgProjectRoleV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateOrgProjectRoleV3Request) CreateOrgProjectRoleV3Request(createOrgProjectRoleV3Request CreateOrgProjectRoleV3Request) ApiCreateOrgProjectRoleV3Request {
	r.createOrgProjectRoleV3Request = &createOrgProjectRoleV3Request
	return r
}

func (r ApiCreateOrgProjectRoleV3Request) Execute() (*CreateOrgProjectRoleV3Response, *http.Response, error) {
	return r.ApiService.CreateOrgProjectRoleV3Execute(r)
}

/*
CreateOrgProjectRoleV3 创建企业后台项目角色

创建企业后台项目角色

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateOrgProjectRoleV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a356 document
*/
func (a *ProjectAPIService) CreateOrgProjectRoleV3(ctx context.Context) ApiCreateOrgProjectRoleV3Request {
	return ApiCreateOrgProjectRoleV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateOrgProjectRoleV3Response
func (a *ProjectAPIService) CreateOrgProjectRoleV3Execute(r ApiCreateOrgProjectRoleV3Request) (*CreateOrgProjectRoleV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateOrgProjectRoleV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-role/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createOrgProjectRoleV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProjectFromTemplateV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	xOperatorId *string
	xTenantId *string
	organizationId *string
	waitForCompletion *bool
	createProjectFromTemplateV3Request *CreateProjectFromTemplateV3Request
}

// 操作者ID
func (r ApiCreateProjectFromTemplateV3Request) XOperatorId(xOperatorId string) ApiCreateProjectFromTemplateV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateProjectFromTemplateV3Request) XTenantId(xTenantId string) ApiCreateProjectFromTemplateV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 企业ID, 如果提供&#x60;x-tenant-id&#x60;, query中不是必须的, 如果提供必须和&#x60;x-tenant-id&#x60;一致
func (r ApiCreateProjectFromTemplateV3Request) OrganizationId(organizationId string) ApiCreateProjectFromTemplateV3Request {
	r.organizationId = &organizationId
	return r
}

// 是否等待项目下资源全部复制完成
func (r ApiCreateProjectFromTemplateV3Request) WaitForCompletion(waitForCompletion bool) ApiCreateProjectFromTemplateV3Request {
	r.waitForCompletion = &waitForCompletion
	return r
}

// 
func (r ApiCreateProjectFromTemplateV3Request) CreateProjectFromTemplateV3Request(createProjectFromTemplateV3Request CreateProjectFromTemplateV3Request) ApiCreateProjectFromTemplateV3Request {
	r.createProjectFromTemplateV3Request = &createProjectFromTemplateV3Request
	return r
}

func (r ApiCreateProjectFromTemplateV3Request) Execute() (*CreateProjectFromTemplateV3Response, *http.Response, error) {
	return r.ApiService.CreateProjectFromTemplateV3Execute(r)
}

/*
CreateProjectFromTemplateV3 从模板创建项目

从模板创建项目

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateProjectFromTemplateV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a49753 document
*/
func (a *ProjectAPIService) CreateProjectFromTemplateV3(ctx context.Context) ApiCreateProjectFromTemplateV3Request {
	return ApiCreateProjectFromTemplateV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateProjectFromTemplateV3Response
func (a *ProjectAPIService) CreateProjectFromTemplateV3Execute(r ApiCreateProjectFromTemplateV3Request) (*CreateProjectFromTemplateV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateProjectFromTemplateV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/create-from-template"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.organizationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organizationId", r.organizationId, "")
	}
	if r.waitForCompletion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "waitForCompletion", r.waitForCompletion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createProjectFromTemplateV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProjectGroupV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	xOperatorId *string
	xTenantId *string
	createProjectGroupV3Request *CreateProjectGroupV3Request
}

// 操作者 ID
func (r ApiCreateProjectGroupV3Request) XOperatorId(xOperatorId string) ApiCreateProjectGroupV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateProjectGroupV3Request) XTenantId(xTenantId string) ApiCreateProjectGroupV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateProjectGroupV3Request) CreateProjectGroupV3Request(createProjectGroupV3Request CreateProjectGroupV3Request) ApiCreateProjectGroupV3Request {
	r.createProjectGroupV3Request = &createProjectGroupV3Request
	return r
}

func (r ApiCreateProjectGroupV3Request) Execute() (*CreateProjectGroupV3Response, *http.Response, error) {
	return r.ApiService.CreateProjectGroupV3Execute(r)
}

/*
CreateProjectGroupV3 创建项目分组

创建项目分组

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateProjectGroupV3Request

  @link https://open.teambition.com/docs/apis/6363b54f912d20d3b567d83b document
*/
func (a *ProjectAPIService) CreateProjectGroupV3(ctx context.Context) ApiCreateProjectGroupV3Request {
	return ApiCreateProjectGroupV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateProjectGroupV3Response
func (a *ProjectAPIService) CreateProjectGroupV3Execute(r ApiCreateProjectGroupV3Request) (*CreateProjectGroupV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateProjectGroupV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-tag/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createProjectGroupV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProjectLinkV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createProjectLinkV3Request *CreateProjectLinkV3Request
}

// 操作者 ID
func (r ApiCreateProjectLinkV3Request) XOperatorId(xOperatorId string) ApiCreateProjectLinkV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateProjectLinkV3Request) XTenantId(xTenantId string) ApiCreateProjectLinkV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateProjectLinkV3Request) CreateProjectLinkV3Request(createProjectLinkV3Request CreateProjectLinkV3Request) ApiCreateProjectLinkV3Request {
	r.createProjectLinkV3Request = &createProjectLinkV3Request
	return r
}

func (r ApiCreateProjectLinkV3Request) Execute() (*CreateProjectLinkV3Response, *http.Response, error) {
	return r.ApiService.CreateProjectLinkV3Execute(r)
}

/*
CreateProjectLinkV3 创建项目关联

创建项目关联

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiCreateProjectLinkV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a499a5 document
*/
func (a *ProjectAPIService) CreateProjectLinkV3(ctx context.Context, projectId string) ApiCreateProjectLinkV3Request {
	return ApiCreateProjectLinkV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateProjectLinkV3Response
func (a *ProjectAPIService) CreateProjectLinkV3Execute(r ApiCreateProjectLinkV3Request) (*CreateProjectLinkV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateProjectLinkV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/objectlinks"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createProjectLinkV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProjectMemberV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createProjectMemberV3Request *CreateProjectMemberV3Request
}

// 操作者ID
func (r ApiCreateProjectMemberV3Request) XOperatorId(xOperatorId string) ApiCreateProjectMemberV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateProjectMemberV3Request) XTenantId(xTenantId string) ApiCreateProjectMemberV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateProjectMemberV3Request) CreateProjectMemberV3Request(createProjectMemberV3Request CreateProjectMemberV3Request) ApiCreateProjectMemberV3Request {
	r.createProjectMemberV3Request = &createProjectMemberV3Request
	return r
}

func (r ApiCreateProjectMemberV3Request) Execute() (*CreateProjectMemberV3Response, *http.Response, error) {
	return r.ApiService.CreateProjectMemberV3Execute(r)
}

/*
CreateProjectMemberV3 创建项目成员(弃用)

创建项目成员(弃用)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiCreateProjectMemberV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a498c0 document
*/
func (a *ProjectAPIService) CreateProjectMemberV3(ctx context.Context, projectId string) ApiCreateProjectMemberV3Request {
	return ApiCreateProjectMemberV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateProjectMemberV3Response
func (a *ProjectAPIService) CreateProjectMemberV3Execute(r ApiCreateProjectMemberV3Request) (*CreateProjectMemberV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateProjectMemberV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/member/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createProjectMemberV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProjectRoleV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createProjectRoleV3Request *CreateProjectRoleV3Request
}

// 操作者ID
func (r ApiCreateProjectRoleV3Request) XOperatorId(xOperatorId string) ApiCreateProjectRoleV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateProjectRoleV3Request) XTenantId(xTenantId string) ApiCreateProjectRoleV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateProjectRoleV3Request) CreateProjectRoleV3Request(createProjectRoleV3Request CreateProjectRoleV3Request) ApiCreateProjectRoleV3Request {
	r.createProjectRoleV3Request = &createProjectRoleV3Request
	return r
}

func (r ApiCreateProjectRoleV3Request) Execute() (*CreateProjectRoleV3Response, *http.Response, error) {
	return r.ApiService.CreateProjectRoleV3Execute(r)
}

/*
CreateProjectRoleV3 创建项目角色

创建项目角色

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiCreateProjectRoleV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49b28 document
*/
func (a *ProjectAPIService) CreateProjectRoleV3(ctx context.Context, projectId string) ApiCreateProjectRoleV3Request {
	return ApiCreateProjectRoleV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateProjectRoleV3Response
func (a *ProjectAPIService) CreateProjectRoleV3Execute(r ApiCreateProjectRoleV3Request) (*CreateProjectRoleV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateProjectRoleV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/role/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createProjectRoleV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProjectStatusV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createProjectStatusV3Request *CreateProjectStatusV3Request
}

// 操作者ID
func (r ApiCreateProjectStatusV3Request) XOperatorId(xOperatorId string) ApiCreateProjectStatusV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateProjectStatusV3Request) XTenantId(xTenantId string) ApiCreateProjectStatusV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateProjectStatusV3Request) CreateProjectStatusV3Request(createProjectStatusV3Request CreateProjectStatusV3Request) ApiCreateProjectStatusV3Request {
	r.createProjectStatusV3Request = &createProjectStatusV3Request
	return r
}

func (r ApiCreateProjectStatusV3Request) Execute() (*CreateProjectStatusV3Response, *http.Response, error) {
	return r.ApiService.CreateProjectStatusV3Execute(r)
}

/*
CreateProjectStatusV3 创建项目状态

创建项目状态

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiCreateProjectStatusV3Request

  @link https://open.teambition.com/docs/apis/63e2387a912d20d3b5d3fe38 document
*/
func (a *ProjectAPIService) CreateProjectStatusV3(ctx context.Context, projectId string) ApiCreateProjectStatusV3Request {
	return ApiCreateProjectStatusV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateProjectStatusV3Response
func (a *ProjectAPIService) CreateProjectStatusV3Execute(r ApiCreateProjectStatusV3Request) (*CreateProjectStatusV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateProjectStatusV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/status/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createProjectStatusV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProjectTagV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createProjectTagV3Request *CreateProjectTagV3Request
}

// 操作者ID
func (r ApiCreateProjectTagV3Request) XOperatorId(xOperatorId string) ApiCreateProjectTagV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateProjectTagV3Request) XTenantId(xTenantId string) ApiCreateProjectTagV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateProjectTagV3Request) CreateProjectTagV3Request(createProjectTagV3Request CreateProjectTagV3Request) ApiCreateProjectTagV3Request {
	r.createProjectTagV3Request = &createProjectTagV3Request
	return r
}

func (r ApiCreateProjectTagV3Request) Execute() (*CreateProjectTagV3Response, *http.Response, error) {
	return r.ApiService.CreateProjectTagV3Execute(r)
}

/*
CreateProjectTagV3 创建项目标签

创建项目标签

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiCreateProjectTagV3Request

  @link https://open.teambition.com/docs/apis/63e2386b912d20d3b5d3ef64 document
*/
func (a *ProjectAPIService) CreateProjectTagV3(ctx context.Context, projectId string) ApiCreateProjectTagV3Request {
	return ApiCreateProjectTagV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateProjectTagV3Response
func (a *ProjectAPIService) CreateProjectTagV3Execute(r ApiCreateProjectTagV3Request) (*CreateProjectTagV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateProjectTagV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/tag/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createProjectTagV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProjectTemplateV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	xOperatorId *string
	xTenantId *string
	createProjectTemplateV3Request *CreateProjectTemplateV3Request
}

// 操作者 ID
func (r ApiCreateProjectTemplateV3Request) XOperatorId(xOperatorId string) ApiCreateProjectTemplateV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateProjectTemplateV3Request) XTenantId(xTenantId string) ApiCreateProjectTemplateV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateProjectTemplateV3Request) CreateProjectTemplateV3Request(createProjectTemplateV3Request CreateProjectTemplateV3Request) ApiCreateProjectTemplateV3Request {
	r.createProjectTemplateV3Request = &createProjectTemplateV3Request
	return r
}

func (r ApiCreateProjectTemplateV3Request) Execute() (*CreateProjectTemplateV3Response, *http.Response, error) {
	return r.ApiService.CreateProjectTemplateV3Execute(r)
}

/*
CreateProjectTemplateV3 创建项目模版

创建项目模版

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateProjectTemplateV3Request

  @link https://open.teambition.com/docs/apis/66431ec5912d20d3b5436e4c document
*/
func (a *ProjectAPIService) CreateProjectTemplateV3(ctx context.Context) ApiCreateProjectTemplateV3Request {
	return ApiCreateProjectTemplateV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateProjectTemplateV3Response
func (a *ProjectAPIService) CreateProjectTemplateV3Execute(r ApiCreateProjectTemplateV3Request) (*CreateProjectTemplateV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateProjectTemplateV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-template/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createProjectTemplateV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProjectV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	xOperatorId *string
	xTenantId *string
	organizationId *string
	createProjectV3Request *CreateProjectV3Request
}

// 操作者ID
func (r ApiCreateProjectV3Request) XOperatorId(xOperatorId string) ApiCreateProjectV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateProjectV3Request) XTenantId(xTenantId string) ApiCreateProjectV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 企业ID, 如果提供&#x60;x-tenant-id&#x60;, query中不是必须的, 如果提供必须和&#x60;x-tenant-id&#x60;一致
func (r ApiCreateProjectV3Request) OrganizationId(organizationId string) ApiCreateProjectV3Request {
	r.organizationId = &organizationId
	return r
}

// 
func (r ApiCreateProjectV3Request) CreateProjectV3Request(createProjectV3Request CreateProjectV3Request) ApiCreateProjectV3Request {
	r.createProjectV3Request = &createProjectV3Request
	return r
}

func (r ApiCreateProjectV3Request) Execute() (*CreateProjectV3Response, *http.Response, error) {
	return r.ApiService.CreateProjectV3Execute(r)
}

/*
CreateProjectV3 创建项目

创建项目

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateProjectV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a49780 document
*/
func (a *ProjectAPIService) CreateProjectV3(ctx context.Context) ApiCreateProjectV3Request {
	return ApiCreateProjectV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateProjectV3Response
func (a *ProjectAPIService) CreateProjectV3Execute(r ApiCreateProjectV3Request) (*CreateProjectV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateProjectV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.organizationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organizationId", r.organizationId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createProjectV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateRoleFromTemplateV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createRoleFromTemplateV3Request *CreateRoleFromTemplateV3Request
}

// 操作者ID
func (r ApiCreateRoleFromTemplateV3Request) XOperatorId(xOperatorId string) ApiCreateRoleFromTemplateV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateRoleFromTemplateV3Request) XTenantId(xTenantId string) ApiCreateRoleFromTemplateV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateRoleFromTemplateV3Request) CreateRoleFromTemplateV3Request(createRoleFromTemplateV3Request CreateRoleFromTemplateV3Request) ApiCreateRoleFromTemplateV3Request {
	r.createRoleFromTemplateV3Request = &createRoleFromTemplateV3Request
	return r
}

func (r ApiCreateRoleFromTemplateV3Request) Execute() (*CreateRoleFromTemplateV3Response, *http.Response, error) {
	return r.ApiService.CreateRoleFromTemplateV3Execute(r)
}

/*
CreateRoleFromTemplateV3 引入企业后台项目角色到项目

引入企业后台项目角色到项目

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiCreateRoleFromTemplateV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a49ae8 document
*/
func (a *ProjectAPIService) CreateRoleFromTemplateV3(ctx context.Context, projectId string) ApiCreateRoleFromTemplateV3Request {
	return ApiCreateRoleFromTemplateV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateRoleFromTemplateV3Response
func (a *ProjectAPIService) CreateRoleFromTemplateV3Execute(r ApiCreateRoleFromTemplateV3Request) (*CreateRoleFromTemplateV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateRoleFromTemplateV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/role/create-by-project-role"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createRoleFromTemplateV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateSprintV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createSprintV3Request *CreateSprintV3Request
}

// 操作者ID
func (r ApiCreateSprintV3Request) XOperatorId(xOperatorId string) ApiCreateSprintV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateSprintV3Request) XTenantId(xTenantId string) ApiCreateSprintV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateSprintV3Request) CreateSprintV3Request(createSprintV3Request CreateSprintV3Request) ApiCreateSprintV3Request {
	r.createSprintV3Request = &createSprintV3Request
	return r
}

func (r ApiCreateSprintV3Request) Execute() (*CreateSprintV3Response, *http.Response, error) {
	return r.ApiService.CreateSprintV3Execute(r)
}

/*
CreateSprintV3 创建迭代

创建迭代

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiCreateSprintV3Request

  @link https://open.teambition.com/docs/apis/63a08188912d20d3b56b92b9 document
*/
func (a *ProjectAPIService) CreateSprintV3(ctx context.Context, projectId string) ApiCreateSprintV3Request {
	return ApiCreateSprintV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateSprintV3Response
func (a *ProjectAPIService) CreateSprintV3Execute(r ApiCreateSprintV3Request) (*CreateSprintV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateSprintV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/sprint/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createSprintV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateStatusCustomFieldV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createStatusCustomFieldV3Request *CreateStatusCustomFieldV3Request
}

// 操作者ID
func (r ApiCreateStatusCustomFieldV3Request) XOperatorId(xOperatorId string) ApiCreateStatusCustomFieldV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateStatusCustomFieldV3Request) XTenantId(xTenantId string) ApiCreateStatusCustomFieldV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateStatusCustomFieldV3Request) CreateStatusCustomFieldV3Request(createStatusCustomFieldV3Request CreateStatusCustomFieldV3Request) ApiCreateStatusCustomFieldV3Request {
	r.createStatusCustomFieldV3Request = &createStatusCustomFieldV3Request
	return r
}

func (r ApiCreateStatusCustomFieldV3Request) Execute() (*CreateStatusCustomFieldV3Response, *http.Response, error) {
	return r.ApiService.CreateStatusCustomFieldV3Execute(r)
}

/*
CreateStatusCustomFieldV3 更新项目概览自定义字段值

更新项目概览自定义字段值

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiCreateStatusCustomFieldV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49d3f document
*/
func (a *ProjectAPIService) CreateStatusCustomFieldV3(ctx context.Context, projectId string) ApiCreateStatusCustomFieldV3Request {
	return ApiCreateStatusCustomFieldV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateStatusCustomFieldV3Response
func (a *ProjectAPIService) CreateStatusCustomFieldV3Execute(r ApiCreateStatusCustomFieldV3Request) (*CreateStatusCustomFieldV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateStatusCustomFieldV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/status/customfield/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createStatusCustomFieldV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateStoryGroupRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createBugGroupRequest *CreateBugGroupRequest
}

// 
func (r ApiCreateStoryGroupRequest) XOperatorId(xOperatorId string) ApiCreateStoryGroupRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateStoryGroupRequest) XTenantId(xTenantId string) ApiCreateStoryGroupRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateStoryGroupRequest) CreateBugGroupRequest(createBugGroupRequest CreateBugGroupRequest) ApiCreateStoryGroupRequest {
	r.createBugGroupRequest = &createBugGroupRequest
	return r
}

func (r ApiCreateStoryGroupRequest) Execute() (*CreateBugGroupResponse, *http.Response, error) {
	return r.ApiService.CreateStoryGroupExecute(r)
}

/*
CreateStoryGroup 创建需求分类

创建需求分类

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiCreateStoryGroupRequest

  @link https://open.teambition.com/docs/apis/682c1948912d20d3b5a2b50e document
*/
func (a *ProjectAPIService) CreateStoryGroup(ctx context.Context, projectId string) ApiCreateStoryGroupRequest {
	return ApiCreateStoryGroupRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateBugGroupResponse
func (a *ProjectAPIService) CreateStoryGroupExecute(r ApiCreateStoryGroupRequest) (*CreateBugGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateBugGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/story/commongroup/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createBugGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTaskGroupV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createTaskGroupV3Request *CreateTaskGroupV3Request
}

// 操作者ID
func (r ApiCreateTaskGroupV3Request) XOperatorId(xOperatorId string) ApiCreateTaskGroupV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateTaskGroupV3Request) XTenantId(xTenantId string) ApiCreateTaskGroupV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateTaskGroupV3Request) CreateTaskGroupV3Request(createTaskGroupV3Request CreateTaskGroupV3Request) ApiCreateTaskGroupV3Request {
	r.createTaskGroupV3Request = &createTaskGroupV3Request
	return r
}

func (r ApiCreateTaskGroupV3Request) Execute() (*CreateTaskGroupV3Response, *http.Response, error) {
	return r.ApiService.CreateTaskGroupV3Execute(r)
}

/*
CreateTaskGroupV3 创建任务分组

创建任务分组

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiCreateTaskGroupV3Request

  @link https://open.teambition.com/docs/apis/64264d40912d20d3b58848b3 document
*/
func (a *ProjectAPIService) CreateTaskGroupV3(ctx context.Context, projectId string) ApiCreateTaskGroupV3Request {
	return ApiCreateTaskGroupV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateTaskGroupV3Response
func (a *ProjectAPIService) CreateTaskGroupV3Execute(r ApiCreateTaskGroupV3Request) (*CreateTaskGroupV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTaskGroupV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/tasklist/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createTaskGroupV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTaskStageV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createTaskStageV3Request *CreateTaskStageV3Request
}

// 操作者ID
func (r ApiCreateTaskStageV3Request) XOperatorId(xOperatorId string) ApiCreateTaskStageV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateTaskStageV3Request) XTenantId(xTenantId string) ApiCreateTaskStageV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateTaskStageV3Request) CreateTaskStageV3Request(createTaskStageV3Request CreateTaskStageV3Request) ApiCreateTaskStageV3Request {
	r.createTaskStageV3Request = &createTaskStageV3Request
	return r
}

func (r ApiCreateTaskStageV3Request) Execute() (*CreateTaskStageV3Response, *http.Response, error) {
	return r.ApiService.CreateTaskStageV3Execute(r)
}

/*
CreateTaskStageV3 创建任务列表

创建任务列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiCreateTaskStageV3Request

  @link https://open.teambition.com/docs/apis/64264d40912d20d3b5884608 document
*/
func (a *ProjectAPIService) CreateTaskStageV3(ctx context.Context, projectId string) ApiCreateTaskStageV3Request {
	return ApiCreateTaskStageV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateTaskStageV3Response
func (a *ProjectAPIService) CreateTaskStageV3Execute(r ApiCreateTaskStageV3Request) (*CreateTaskStageV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTaskStageV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/stage/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createTaskStageV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTaskflowStatusV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createTaskflowStatusV3Request *CreateTaskflowStatusV3Request
}

// 操作者ID
func (r ApiCreateTaskflowStatusV3Request) XOperatorId(xOperatorId string) ApiCreateTaskflowStatusV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateTaskflowStatusV3Request) XTenantId(xTenantId string) ApiCreateTaskflowStatusV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateTaskflowStatusV3Request) CreateTaskflowStatusV3Request(createTaskflowStatusV3Request CreateTaskflowStatusV3Request) ApiCreateTaskflowStatusV3Request {
	r.createTaskflowStatusV3Request = &createTaskflowStatusV3Request
	return r
}

func (r ApiCreateTaskflowStatusV3Request) Execute() (*CreateTaskflowStatusV3Response, *http.Response, error) {
	return r.ApiService.CreateTaskflowStatusV3Execute(r)
}

/*
CreateTaskflowStatusV3 创建项目工作流状态

创建项目工作流状态

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiCreateTaskflowStatusV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a003 document
*/
func (a *ProjectAPIService) CreateTaskflowStatusV3(ctx context.Context, projectId string) ApiCreateTaskflowStatusV3Request {
	return ApiCreateTaskflowStatusV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateTaskflowStatusV3Response
func (a *ProjectAPIService) CreateTaskflowStatusV3Execute(r ApiCreateTaskflowStatusV3Request) (*CreateTaskflowStatusV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTaskflowStatusV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/taskflowstatus/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createTaskflowStatusV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTaskflowV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createTaskflowV3Request *CreateTaskflowV3Request
}

// 操作者ID
func (r ApiCreateTaskflowV3Request) XOperatorId(xOperatorId string) ApiCreateTaskflowV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateTaskflowV3Request) XTenantId(xTenantId string) ApiCreateTaskflowV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateTaskflowV3Request) CreateTaskflowV3Request(createTaskflowV3Request CreateTaskflowV3Request) ApiCreateTaskflowV3Request {
	r.createTaskflowV3Request = &createTaskflowV3Request
	return r
}

func (r ApiCreateTaskflowV3Request) Execute() (*CreateTaskflowV3Response, *http.Response, error) {
	return r.ApiService.CreateTaskflowV3Execute(r)
}

/*
CreateTaskflowV3 创建项目工作流

创建项目工作流

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiCreateTaskflowV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49ef9 document
*/
func (a *ProjectAPIService) CreateTaskflowV3(ctx context.Context, projectId string) ApiCreateTaskflowV3Request {
	return ApiCreateTaskflowV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateTaskflowV3Response
func (a *ProjectAPIService) CreateTaskflowV3Execute(r ApiCreateTaskflowV3Request) (*CreateTaskflowV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTaskflowV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/taskflow/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createTaskflowV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTestPlanRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createTestPlanRequest *CreateTestPlanRequest
}

// 创建者 ID
func (r ApiCreateTestPlanRequest) XOperatorId(xOperatorId string) ApiCreateTestPlanRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateTestPlanRequest) XTenantId(xTenantId string) ApiCreateTestPlanRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateTestPlanRequest) CreateTestPlanRequest(createTestPlanRequest CreateTestPlanRequest) ApiCreateTestPlanRequest {
	r.createTestPlanRequest = &createTestPlanRequest
	return r
}

func (r ApiCreateTestPlanRequest) Execute() (*CreateTestPlanResponse, *http.Response, error) {
	return r.ApiService.CreateTestPlanExecute(r)
}

/*
CreateTestPlan 创建测试计划

创建测试计划

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiCreateTestPlanRequest

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a92e document
*/
func (a *ProjectAPIService) CreateTestPlan(ctx context.Context, projectId string) ApiCreateTestPlanRequest {
	return ApiCreateTestPlanRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateTestPlanResponse
func (a *ProjectAPIService) CreateTestPlanExecute(r ApiCreateTestPlanRequest) (*CreateTestPlanResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTestPlanResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/testplan/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createTestPlanRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTestPlanGroupRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	testplanId string
	xOperatorId *string
	xTenantId *string
	createTestPlanGroupRequest *CreateTestPlanGroupRequest
}

// 创建者 ID
func (r ApiCreateTestPlanGroupRequest) XOperatorId(xOperatorId string) ApiCreateTestPlanGroupRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateTestPlanGroupRequest) XTenantId(xTenantId string) ApiCreateTestPlanGroupRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateTestPlanGroupRequest) CreateTestPlanGroupRequest(createTestPlanGroupRequest CreateTestPlanGroupRequest) ApiCreateTestPlanGroupRequest {
	r.createTestPlanGroupRequest = &createTestPlanGroupRequest
	return r
}

func (r ApiCreateTestPlanGroupRequest) Execute() (*CreateTestPlanGroupResponse, *http.Response, error) {
	return r.ApiService.CreateTestPlanGroupExecute(r)
}

/*
CreateTestPlanGroup 创建测试计划分组

创建测试计划分组

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @param testplanId 测试计划 ID
 @return ApiCreateTestPlanGroupRequest

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a886 document
*/
func (a *ProjectAPIService) CreateTestPlanGroup(ctx context.Context, projectId string, testplanId string) ApiCreateTestPlanGroupRequest {
	return ApiCreateTestPlanGroupRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		testplanId: testplanId,
	}
}

// Execute executes the request
//  @return CreateTestPlanGroupResponse
func (a *ProjectAPIService) CreateTestPlanGroupExecute(r ApiCreateTestPlanGroupRequest) (*CreateTestPlanGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTestPlanGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/testplan/{testplanId}/commongroup/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"testplanId"+"}", url.PathEscape(parameterValueToString(r.testplanId, "testplanId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createTestPlanGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteOrgProjectRoleV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	roleId string
	xOperatorId *string
	xTenantId *string
}

// 操作者ID
func (r ApiDeleteOrgProjectRoleV3Request) XOperatorId(xOperatorId string) ApiDeleteOrgProjectRoleV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteOrgProjectRoleV3Request) XTenantId(xTenantId string) ApiDeleteOrgProjectRoleV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiDeleteOrgProjectRoleV3Request) Execute() (*DeleteOrgProjectRoleV3Response, *http.Response, error) {
	return r.ApiService.DeleteOrgProjectRoleV3Execute(r)
}

/*
DeleteOrgProjectRoleV3 删除企业后台项目角色

删除企业后台项目角色

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roleId 角色ID
 @return ApiDeleteOrgProjectRoleV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a399 document
*/
func (a *ProjectAPIService) DeleteOrgProjectRoleV3(ctx context.Context, roleId string) ApiDeleteOrgProjectRoleV3Request {
	return ApiDeleteOrgProjectRoleV3Request{
		ApiService: a,
		ctx: ctx,
		roleId: roleId,
	}
}

// Execute executes the request
//  @return DeleteOrgProjectRoleV3Response
func (a *ProjectAPIService) DeleteOrgProjectRoleV3Execute(r ApiDeleteOrgProjectRoleV3Request) (*DeleteOrgProjectRoleV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteOrgProjectRoleV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-role/{roleId}/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"roleId"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteProjectGroupV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectTagId string
	xOperatorId *string
	xTenantId *string
}

// 操作者 ID
func (r ApiDeleteProjectGroupV3Request) XOperatorId(xOperatorId string) ApiDeleteProjectGroupV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteProjectGroupV3Request) XTenantId(xTenantId string) ApiDeleteProjectGroupV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiDeleteProjectGroupV3Request) Execute() (*DeleteProjectGroupV3Response, *http.Response, error) {
	return r.ApiService.DeleteProjectGroupV3Execute(r)
}

/*
DeleteProjectGroupV3 删除项目分组

删除项目分组

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectTagId 项目分组 ID
 @return ApiDeleteProjectGroupV3Request

  @link https://open.teambition.com/docs/apis/6363bcfb912d20d3b56fb3b4 document
*/
func (a *ProjectAPIService) DeleteProjectGroupV3(ctx context.Context, projectTagId string) ApiDeleteProjectGroupV3Request {
	return ApiDeleteProjectGroupV3Request{
		ApiService: a,
		ctx: ctx,
		projectTagId: projectTagId,
	}
}

// Execute executes the request
//  @return DeleteProjectGroupV3Response
func (a *ProjectAPIService) DeleteProjectGroupV3Execute(r ApiDeleteProjectGroupV3Request) (*DeleteProjectGroupV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteProjectGroupV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-tag/{projectTagId}"
	localVarPath = strings.Replace(localVarPath, "{"+"projectTagId"+"}", url.PathEscape(parameterValueToString(r.projectTagId, "projectTagId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteProjectLinkV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	objectlinkId string
	xOperatorId *string
	xTenantId *string
}

// 操作者 ID
func (r ApiDeleteProjectLinkV3Request) XOperatorId(xOperatorId string) ApiDeleteProjectLinkV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteProjectLinkV3Request) XTenantId(xTenantId string) ApiDeleteProjectLinkV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiDeleteProjectLinkV3Request) Execute() (*DeleteProjectLinkV3Response, *http.Response, error) {
	return r.ApiService.DeleteProjectLinkV3Execute(r)
}

/*
DeleteProjectLinkV3 删除项目关联

删除项目关联

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @param objectlinkId 关联 ID
 @return ApiDeleteProjectLinkV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a499df document
*/
func (a *ProjectAPIService) DeleteProjectLinkV3(ctx context.Context, projectId string, objectlinkId string) ApiDeleteProjectLinkV3Request {
	return ApiDeleteProjectLinkV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		objectlinkId: objectlinkId,
	}
}

// Execute executes the request
//  @return DeleteProjectLinkV3Response
func (a *ProjectAPIService) DeleteProjectLinkV3Execute(r ApiDeleteProjectLinkV3Request) (*DeleteProjectLinkV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteProjectLinkV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/objectlinks/{objectlinkId}"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"objectlinkId"+"}", url.PathEscape(parameterValueToString(r.objectlinkId, "objectlinkId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteProjectMemberV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createProjectMemberV3Request *CreateProjectMemberV3Request
}

// 操作者ID
func (r ApiDeleteProjectMemberV3Request) XOperatorId(xOperatorId string) ApiDeleteProjectMemberV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteProjectMemberV3Request) XTenantId(xTenantId string) ApiDeleteProjectMemberV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiDeleteProjectMemberV3Request) CreateProjectMemberV3Request(createProjectMemberV3Request CreateProjectMemberV3Request) ApiDeleteProjectMemberV3Request {
	r.createProjectMemberV3Request = &createProjectMemberV3Request
	return r
}

func (r ApiDeleteProjectMemberV3Request) Execute() (*DeleteProjectMemberV3Response, *http.Response, error) {
	return r.ApiService.DeleteProjectMemberV3Execute(r)
}

/*
DeleteProjectMemberV3 删除项目成员

删除项目成员

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiDeleteProjectMemberV3Request

  @link https://open.teambition.com/docs/apis/63e23a3e912d20d3b5d599a8 document
*/
func (a *ProjectAPIService) DeleteProjectMemberV3(ctx context.Context, projectId string) ApiDeleteProjectMemberV3Request {
	return ApiDeleteProjectMemberV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return DeleteProjectMemberV3Response
func (a *ProjectAPIService) DeleteProjectMemberV3Execute(r ApiDeleteProjectMemberV3Request) (*DeleteProjectMemberV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteProjectMemberV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/member/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createProjectMemberV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteProjectRoleV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	roleId string
	xOperatorId *string
	xTenantId *string
}

// 操作者ID
func (r ApiDeleteProjectRoleV3Request) XOperatorId(xOperatorId string) ApiDeleteProjectRoleV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteProjectRoleV3Request) XTenantId(xTenantId string) ApiDeleteProjectRoleV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiDeleteProjectRoleV3Request) Execute() (*DeleteProjectRoleV3Response, *http.Response, error) {
	return r.ApiService.DeleteProjectRoleV3Execute(r)
}

/*
DeleteProjectRoleV3 移除项目角色

移除项目角色

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param roleId 项目角色ID
 @return ApiDeleteProjectRoleV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49b61 document
*/
func (a *ProjectAPIService) DeleteProjectRoleV3(ctx context.Context, projectId string, roleId string) ApiDeleteProjectRoleV3Request {
	return ApiDeleteProjectRoleV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		roleId: roleId,
	}
}

// Execute executes the request
//  @return DeleteProjectRoleV3Response
func (a *ProjectAPIService) DeleteProjectRoleV3Execute(r ApiDeleteProjectRoleV3Request) (*DeleteProjectRoleV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteProjectRoleV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/role/{roleId}/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roleId"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteProjectTemplateV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	templateId string
	xOperatorId *string
	xTenantId *string
}

// 操作者 ID
func (r ApiDeleteProjectTemplateV3Request) XOperatorId(xOperatorId string) ApiDeleteProjectTemplateV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteProjectTemplateV3Request) XTenantId(xTenantId string) ApiDeleteProjectTemplateV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiDeleteProjectTemplateV3Request) Execute() (*DeleteProjectTemplateV3Response, *http.Response, error) {
	return r.ApiService.DeleteProjectTemplateV3Execute(r)
}

/*
DeleteProjectTemplateV3 删除项目模版

删除项目模版

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param templateId 项目模板 ID
 @return ApiDeleteProjectTemplateV3Request

  @link https://open.teambition.com/docs/apis/6643341a912d20d3b58ebb5e document
*/
func (a *ProjectAPIService) DeleteProjectTemplateV3(ctx context.Context, templateId string) ApiDeleteProjectTemplateV3Request {
	return ApiDeleteProjectTemplateV3Request{
		ApiService: a,
		ctx: ctx,
		templateId: templateId,
	}
}

// Execute executes the request
//  @return DeleteProjectTemplateV3Response
func (a *ProjectAPIService) DeleteProjectTemplateV3Execute(r ApiDeleteProjectTemplateV3Request) (*DeleteProjectTemplateV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteProjectTemplateV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-template/{templateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"templateId"+"}", url.PathEscape(parameterValueToString(r.templateId, "templateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteProjectV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
}

// 操作者 ID
func (r ApiDeleteProjectV3Request) XOperatorId(xOperatorId string) ApiDeleteProjectV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteProjectV3Request) XTenantId(xTenantId string) ApiDeleteProjectV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiDeleteProjectV3Request) Execute() (*DeleteProjectV3Response, *http.Response, error) {
	return r.ApiService.DeleteProjectV3Execute(r)
}

/*
DeleteProjectV3 删除项目

删除项目

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiDeleteProjectV3Request

  @link https://open.teambition.com/docs/apis/66e00a73912d20d3b5a1593b document
*/
func (a *ProjectAPIService) DeleteProjectV3(ctx context.Context, projectId string) ApiDeleteProjectV3Request {
	return ApiDeleteProjectV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return DeleteProjectV3Response
func (a *ProjectAPIService) DeleteProjectV3Execute(r ApiDeleteProjectV3Request) (*DeleteProjectV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteProjectV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteSprintV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	sprintId string
	xOperatorId *string
	xTenantId *string
	body *map[string]interface{}
}

// 操作者ID
func (r ApiDeleteSprintV3Request) XOperatorId(xOperatorId string) ApiDeleteSprintV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteSprintV3Request) XTenantId(xTenantId string) ApiDeleteSprintV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiDeleteSprintV3Request) Body(body map[string]interface{}) ApiDeleteSprintV3Request {
	r.body = &body
	return r
}

func (r ApiDeleteSprintV3Request) Execute() (*DeleteSprintV3Response, *http.Response, error) {
	return r.ApiService.DeleteSprintV3Execute(r)
}

/*
DeleteSprintV3 删除迭代

删除迭代

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @param sprintId 迭代ID
 @return ApiDeleteSprintV3Request

  @link https://open.teambition.com/docs/apis/63a08188912d20d3b56b9340 document
*/
func (a *ProjectAPIService) DeleteSprintV3(ctx context.Context, projectId string, sprintId string) ApiDeleteSprintV3Request {
	return ApiDeleteSprintV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		sprintId: sprintId,
	}
}

// Execute executes the request
//  @return DeleteSprintV3Response
func (a *ProjectAPIService) DeleteSprintV3Execute(r ApiDeleteSprintV3Request) (*DeleteSprintV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteSprintV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/sprint/{sprintId}/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sprintId"+"}", url.PathEscape(parameterValueToString(r.sprintId, "sprintId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteStatusCustomFieldV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	customfieldId string
	xOperatorId *string
	xTenantId *string
	body *map[string]interface{}
}

// 操作者ID
func (r ApiDeleteStatusCustomFieldV3Request) XOperatorId(xOperatorId string) ApiDeleteStatusCustomFieldV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteStatusCustomFieldV3Request) XTenantId(xTenantId string) ApiDeleteStatusCustomFieldV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiDeleteStatusCustomFieldV3Request) Body(body map[string]interface{}) ApiDeleteStatusCustomFieldV3Request {
	r.body = &body
	return r
}

func (r ApiDeleteStatusCustomFieldV3Request) Execute() (*DeleteOrgMemberResponse, *http.Response, error) {
	return r.ApiService.DeleteStatusCustomFieldV3Execute(r)
}

/*
DeleteStatusCustomFieldV3 删除项目概览自定义字段(弃用)

删除项目概览自定义字段(弃用)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param customfieldId 自定义字段ID
 @return ApiDeleteStatusCustomFieldV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49d6f document
*/
func (a *ProjectAPIService) DeleteStatusCustomFieldV3(ctx context.Context, projectId string, customfieldId string) ApiDeleteStatusCustomFieldV3Request {
	return ApiDeleteStatusCustomFieldV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		customfieldId: customfieldId,
	}
}

// Execute executes the request
//  @return DeleteOrgMemberResponse
func (a *ProjectAPIService) DeleteStatusCustomFieldV3Execute(r ApiDeleteStatusCustomFieldV3Request) (*DeleteOrgMemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteOrgMemberResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/status/customfield/{customfieldId}/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customfieldId"+"}", url.PathEscape(parameterValueToString(r.customfieldId, "customfieldId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTaskFlowStatusV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	tfsId string
	xOperatorId *string
	xTenantId *string
	archiveWhenImplemented *bool
	body *map[string]interface{}
}

// 操作者ID
func (r ApiDeleteTaskFlowStatusV3Request) XOperatorId(xOperatorId string) ApiDeleteTaskFlowStatusV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteTaskFlowStatusV3Request) XTenantId(xTenantId string) ApiDeleteTaskFlowStatusV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 如果存在这个工作流节点的任务，是否自动归档替换删除.
func (r ApiDeleteTaskFlowStatusV3Request) ArchiveWhenImplemented(archiveWhenImplemented bool) ApiDeleteTaskFlowStatusV3Request {
	r.archiveWhenImplemented = &archiveWhenImplemented
	return r
}

// 
func (r ApiDeleteTaskFlowStatusV3Request) Body(body map[string]interface{}) ApiDeleteTaskFlowStatusV3Request {
	r.body = &body
	return r
}

func (r ApiDeleteTaskFlowStatusV3Request) Execute() (*DeleteTaskFlowStatusV3Response, *http.Response, error) {
	return r.ApiService.DeleteTaskFlowStatusV3Execute(r)
}

/*
DeleteTaskFlowStatusV3 删除项目工作流状态

删除项目工作流状态

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param tfsId 工作流状态ID
 @return ApiDeleteTaskFlowStatusV3Request

  @link https://open.teambition.com/docs/apis/6437eaa1912d20d3b5685875 document
*/
func (a *ProjectAPIService) DeleteTaskFlowStatusV3(ctx context.Context, projectId string, tfsId string) ApiDeleteTaskFlowStatusV3Request {
	return ApiDeleteTaskFlowStatusV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		tfsId: tfsId,
	}
}

// Execute executes the request
//  @return DeleteTaskFlowStatusV3Response
func (a *ProjectAPIService) DeleteTaskFlowStatusV3Execute(r ApiDeleteTaskFlowStatusV3Request) (*DeleteTaskFlowStatusV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteTaskFlowStatusV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/taskflowstatus/{tfsId}/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tfsId"+"}", url.PathEscape(parameterValueToString(r.tfsId, "tfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.archiveWhenImplemented != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archiveWhenImplemented", r.archiveWhenImplemented, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTaskflowV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	taskflowId string
	xOperatorId *string
	xTenantId *string
	body *map[string]interface{}
}

// 操作者ID
func (r ApiDeleteTaskflowV3Request) XOperatorId(xOperatorId string) ApiDeleteTaskflowV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteTaskflowV3Request) XTenantId(xTenantId string) ApiDeleteTaskflowV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiDeleteTaskflowV3Request) Body(body map[string]interface{}) ApiDeleteTaskflowV3Request {
	r.body = &body
	return r
}

func (r ApiDeleteTaskflowV3Request) Execute() (*DeleteTaskflowV3Response, *http.Response, error) {
	return r.ApiService.DeleteTaskflowV3Execute(r)
}

/*
DeleteTaskflowV3 删除项目工作流

删除项目工作流

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param taskflowId 工作流ID
 @return ApiDeleteTaskflowV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49f36 document
*/
func (a *ProjectAPIService) DeleteTaskflowV3(ctx context.Context, projectId string, taskflowId string) ApiDeleteTaskflowV3Request {
	return ApiDeleteTaskflowV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		taskflowId: taskflowId,
	}
}

// Execute executes the request
//  @return DeleteTaskflowV3Response
func (a *ProjectAPIService) DeleteTaskflowV3Execute(r ApiDeleteTaskflowV3Request) (*DeleteTaskflowV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteTaskflowV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/taskflow/{taskflowId}/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskflowId"+"}", url.PathEscape(parameterValueToString(r.taskflowId, "taskflowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAsyncJobResultV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	xOperatorId *string
	xTenantId *string
	keys *string
}

// 操作者ID
func (r ApiGetAsyncJobResultV3Request) XOperatorId(xOperatorId string) ApiGetAsyncJobResultV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiGetAsyncJobResultV3Request) XTenantId(xTenantId string) ApiGetAsyncJobResultV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 异步 job 的 readyKey，多个以逗号分隔
func (r ApiGetAsyncJobResultV3Request) Keys(keys string) ApiGetAsyncJobResultV3Request {
	r.keys = &keys
	return r
}

func (r ApiGetAsyncJobResultV3Request) Execute() (*GetAsyncJobResultV3Response, *http.Response, error) {
	return r.ApiService.GetAsyncJobResultV3Execute(r)
}

/*
GetAsyncJobResultV3 获取异步 job 执行结果

获取异步 job 执行结果，执行完毕则返回结果，否则继续用 readyKey 轮询

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAsyncJobResultV3Request

  @link https://open.teambition.com/docs/apis/6501ad12912d20d3b50846fc document
*/
func (a *ProjectAPIService) GetAsyncJobResultV3(ctx context.Context) ApiGetAsyncJobResultV3Request {
	return ApiGetAsyncJobResultV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAsyncJobResultV3Response
func (a *ProjectAPIService) GetAsyncJobResultV3Execute(r ApiGetAsyncJobResultV3Request) (*GetAsyncJobResultV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAsyncJobResultV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/async-job/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.keys != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keys", r.keys, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMemberRolesV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	userIds *string
}

// 操作者ID
func (r ApiGetMemberRolesV3Request) XOperatorId(xOperatorId string) ApiGetMemberRolesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiGetMemberRolesV3Request) XTenantId(xTenantId string) ApiGetMemberRolesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 查询用户ID， 用逗号组合
func (r ApiGetMemberRolesV3Request) UserIds(userIds string) ApiGetMemberRolesV3Request {
	r.userIds = &userIds
	return r
}

func (r ApiGetMemberRolesV3Request) Execute() (*GetMemberRolesV3Response, *http.Response, error) {
	return r.ApiService.GetMemberRolesV3Execute(r)
}

/*
GetMemberRolesV3 获取项目成员角色（包含权限穿透角色）

获取项目成员角色（包含权限穿透角色）

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiGetMemberRolesV3Request

  @link https://open.teambition.com/docs/apis/6363bcfb912d20d3b56fafcb document
*/
func (a *ProjectAPIService) GetMemberRolesV3(ctx context.Context, projectId string) ApiGetMemberRolesV3Request {
	return ApiGetMemberRolesV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return GetMemberRolesV3Response
func (a *ProjectAPIService) GetMemberRolesV3Execute(r ApiGetMemberRolesV3Request) (*GetMemberRolesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetMemberRolesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/member-role"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userIds", r.userIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectLinksV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
}

// 操作者 ID
func (r ApiGetProjectLinksV3Request) XOperatorId(xOperatorId string) ApiGetProjectLinksV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiGetProjectLinksV3Request) XTenantId(xTenantId string) ApiGetProjectLinksV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiGetProjectLinksV3Request) Execute() (*GetProjectLinksV3Response, *http.Response, error) {
	return r.ApiService.GetProjectLinksV3Execute(r)
}

/*
GetProjectLinksV3 获取项目关联列表

获取项目关联列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiGetProjectLinksV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a4996f document
*/
func (a *ProjectAPIService) GetProjectLinksV3(ctx context.Context, projectId string) ApiGetProjectLinksV3Request {
	return ApiGetProjectLinksV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return GetProjectLinksV3Response
func (a *ProjectAPIService) GetProjectLinksV3Execute(r ApiGetProjectLinksV3Request) (*GetProjectLinksV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetProjectLinksV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/objectlinks"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectOrgChartRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
}

// 操作者 ID
func (r ApiGetProjectOrgChartRequest) XOperatorId(xOperatorId string) ApiGetProjectOrgChartRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiGetProjectOrgChartRequest) XTenantId(xTenantId string) ApiGetProjectOrgChartRequest {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiGetProjectOrgChartRequest) Execute() (*GetProjectOrgChartResponse, *http.Response, error) {
	return r.ApiService.GetProjectOrgChartExecute(r)
}

/*
GetProjectOrgChart 获取项目组织架构图

获取项目组织架构图

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiGetProjectOrgChartRequest

  @link https://open.teambition.com/docs/apis/6808506d912d20d3b5bfe3a5 document
*/
func (a *ProjectAPIService) GetProjectOrgChart(ctx context.Context, projectId string) ApiGetProjectOrgChartRequest {
	return ApiGetProjectOrgChartRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return GetProjectOrgChartResponse
func (a *ProjectAPIService) GetProjectOrgChartExecute(r ApiGetProjectOrgChartRequest) (*GetProjectOrgChartResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetProjectOrgChartResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/preference/project-team"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProgramRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xTenantId *string
}

// 企业 ID
func (r ApiGetProjectProgramRequest) XTenantId(xTenantId string) ApiGetProjectProgramRequest {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiGetProjectProgramRequest) Execute() (*GetProjectProgramResponse, *http.Response, error) {
	return r.ApiService.GetProjectProgramExecute(r)
}

/*
GetProjectProgram 查询项目所属项目集id

查询项目所属项目集id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiGetProjectProgramRequest

  @link https://open.teambition.com/docs/apis/67d0f72e912d20d3b5f09e35 document
*/
func (a *ProjectAPIService) GetProjectProgram(ctx context.Context, projectId string) ApiGetProjectProgramRequest {
	return ApiGetProjectProgramRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return GetProjectProgramResponse
func (a *ProjectAPIService) GetProjectProgramExecute(r ApiGetProjectProgramRequest) (*GetProjectProgramResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetProjectProgramResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/program/query"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTableCustomFieldRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	customfieldId *string
}

// 
func (r ApiGetProjectTableCustomFieldRequest) XOperatorId(xOperatorId string) ApiGetProjectTableCustomFieldRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiGetProjectTableCustomFieldRequest) XTenantId(xTenantId string) ApiGetProjectTableCustomFieldRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiGetProjectTableCustomFieldRequest) CustomfieldId(customfieldId string) ApiGetProjectTableCustomFieldRequest {
	r.customfieldId = &customfieldId
	return r
}

func (r ApiGetProjectTableCustomFieldRequest) Execute() (*GetProjectTableCustomFieldResponse, *http.Response, error) {
	return r.ApiService.GetProjectTableCustomFieldExecute(r)
}

/*
GetProjectTableCustomField 获取项目的表格自定义字段

获取项目的表格自定义字段

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiGetProjectTableCustomFieldRequest

  @link https://open.teambition.com/docs/apis/682c18da912d20d3b5a16e8c document
*/
func (a *ProjectAPIService) GetProjectTableCustomField(ctx context.Context, projectId string) ApiGetProjectTableCustomFieldRequest {
	return ApiGetProjectTableCustomFieldRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return GetProjectTableCustomFieldResponse
func (a *ProjectAPIService) GetProjectTableCustomFieldExecute(r ApiGetProjectTableCustomFieldRequest) (*GetProjectTableCustomFieldResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetProjectTableCustomFieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/customfield/table"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.customfieldId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customfieldId", r.customfieldId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTagsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
}

// 操作者ID
func (r ApiGetProjectTagsV3Request) XOperatorId(xOperatorId string) ApiGetProjectTagsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiGetProjectTagsV3Request) XTenantId(xTenantId string) ApiGetProjectTagsV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiGetProjectTagsV3Request) Execute() (*GetProjectTagsV3Response, *http.Response, error) {
	return r.ApiService.GetProjectTagsV3Execute(r)
}

/*
GetProjectTagsV3 查看项目的项目分组

查看项目的项目分组

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiGetProjectTagsV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a49a2e document
*/
func (a *ProjectAPIService) GetProjectTagsV3(ctx context.Context, projectId string) ApiGetProjectTagsV3Request {
	return ApiGetProjectTagsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return GetProjectTagsV3Response
func (a *ProjectAPIService) GetProjectTagsV3Execute(r ApiGetProjectTagsV3Request) (*GetProjectTagsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetProjectTagsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/project-tag"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScenarioFieldsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xTenantId *string
	sfcIds *string
	q *string
	pageToken *string
	pageSize *int32
	objectTypes *string
	sources *string
}

// 企业 ID
func (r ApiGetScenarioFieldsV3Request) XTenantId(xTenantId string) ApiGetScenarioFieldsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 任务类型ID集合，逗号组合
func (r ApiGetScenarioFieldsV3Request) SfcIds(sfcIds string) ApiGetScenarioFieldsV3Request {
	r.sfcIds = &sfcIds
	return r
}

// 搜索关键字
func (r ApiGetScenarioFieldsV3Request) Q(q string) ApiGetScenarioFieldsV3Request {
	r.q = &q
	return r
}

// 分页标
func (r ApiGetScenarioFieldsV3Request) PageToken(pageToken string) ApiGetScenarioFieldsV3Request {
	r.pageToken = &pageToken
	return r
}

// 每页任务数量(默认为50)
func (r ApiGetScenarioFieldsV3Request) PageSize(pageSize int32) ApiGetScenarioFieldsV3Request {
	r.pageSize = &pageSize
	return r
}

// 查询指定资源类型的字段配置,以逗号分隔,例如:&#39;task,testcase&#39; 默认为task，可选值： - &#39;task&#39; 任务 - &#39;testcase&#39; 测试用例 - &#39;event&#39; 日程  
func (r ApiGetScenarioFieldsV3Request) ObjectTypes(objectTypes string) ApiGetScenarioFieldsV3Request {
	r.objectTypes = &objectTypes
	return r
}

// 是否来自安装应用,可能有 application.risk | application.story | application.bug
func (r ApiGetScenarioFieldsV3Request) Sources(sources string) ApiGetScenarioFieldsV3Request {
	r.sources = &sources
	return r
}

func (r ApiGetScenarioFieldsV3Request) Execute() (*GetScenarioFieldsV3Response, *http.Response, error) {
	return r.ApiService.GetScenarioFieldsV3Execute(r)
}

/*
GetScenarioFieldsV3 获取项目任务类型

获取项目任务类型

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiGetScenarioFieldsV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49cc4 document
*/
func (a *ProjectAPIService) GetScenarioFieldsV3(ctx context.Context, projectId string) ApiGetScenarioFieldsV3Request {
	return ApiGetScenarioFieldsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return GetScenarioFieldsV3Response
func (a *ProjectAPIService) GetScenarioFieldsV3Execute(r ApiGetScenarioFieldsV3Request) (*GetScenarioFieldsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetScenarioFieldsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/scenariofieldconfig/search"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sfcIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sfcIds", r.sfcIds, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.objectTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objectTypes", r.objectTypes, "")
	}
	if r.sources != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sources", r.sources, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTestCaseGroupMappingsRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	testcaseIds *string
}

// 操作者 ID
func (r ApiGetTestCaseGroupMappingsRequest) XOperatorId(xOperatorId string) ApiGetTestCaseGroupMappingsRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiGetTestCaseGroupMappingsRequest) XTenantId(xTenantId string) ApiGetTestCaseGroupMappingsRequest {
	r.xTenantId = &xTenantId
	return r
}

// 测试用例ID 集合,使用逗号分隔
func (r ApiGetTestCaseGroupMappingsRequest) TestcaseIds(testcaseIds string) ApiGetTestCaseGroupMappingsRequest {
	r.testcaseIds = &testcaseIds
	return r
}

func (r ApiGetTestCaseGroupMappingsRequest) Execute() (*GetTestCaseGroupMappingsResponse, *http.Response, error) {
	return r.ApiService.GetTestCaseGroupMappingsExecute(r)
}

/*
GetTestCaseGroupMappings 批量获取测试用例与归属分组的对应关系

批量获取测试用例与归属分组的对应关系

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiGetTestCaseGroupMappingsRequest

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a1b6 document
*/
func (a *ProjectAPIService) GetTestCaseGroupMappings(ctx context.Context, projectId string) ApiGetTestCaseGroupMappingsRequest {
	return ApiGetTestCaseGroupMappingsRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return GetTestCaseGroupMappingsResponse
func (a *ProjectAPIService) GetTestCaseGroupMappingsExecute(r ApiGetTestCaseGroupMappingsRequest) (*GetTestCaseGroupMappingsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTestCaseGroupMappingsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/testcase/commongroup-mapping"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.testcaseIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "testcaseIds", r.testcaseIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInstallProjectAppV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	appId string
	xOperatorId *string
	xTenantId *string
	body *map[string]interface{}
}

// 操作者ID
func (r ApiInstallProjectAppV3Request) XOperatorId(xOperatorId string) ApiInstallProjectAppV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiInstallProjectAppV3Request) XTenantId(xTenantId string) ApiInstallProjectAppV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiInstallProjectAppV3Request) Body(body map[string]interface{}) ApiInstallProjectAppV3Request {
	r.body = &body
	return r
}

func (r ApiInstallProjectAppV3Request) Execute() (*InstallProjectAppV3Response, *http.Response, error) {
	return r.ApiService.InstallProjectAppV3Execute(r)
}

/*
InstallProjectAppV3 安装项目应用

安装项目应用

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param appId 应用ID
 @return ApiInstallProjectAppV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a49662 document
*/
func (a *ProjectAPIService) InstallProjectAppV3(ctx context.Context, projectId string, appId string) ApiInstallProjectAppV3Request {
	return ApiInstallProjectAppV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		appId: appId,
	}
}

// Execute executes the request
//  @return InstallProjectAppV3Response
func (a *ProjectAPIService) InstallProjectAppV3Execute(r ApiInstallProjectAppV3Request) (*InstallProjectAppV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InstallProjectAppV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/application/{appId}/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListBugGroupsRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xTenantId *string
	commongroupIds *string
	parentCommongroupId *string
	pageSize *string
	pageToken *string
}

// 企业 ID
func (r ApiListBugGroupsRequest) XTenantId(xTenantId string) ApiListBugGroupsRequest {
	r.xTenantId = &xTenantId
	return r
}

// 缺陷分类 ID集合，逗号分隔
func (r ApiListBugGroupsRequest) CommongroupIds(commongroupIds string) ApiListBugGroupsRequest {
	r.commongroupIds = &commongroupIds
	return r
}

// 父缺陷分类 ID
func (r ApiListBugGroupsRequest) ParentCommongroupId(parentCommongroupId string) ApiListBugGroupsRequest {
	r.parentCommongroupId = &parentCommongroupId
	return r
}

// 每页缺陷分类数量，默认为 50
func (r ApiListBugGroupsRequest) PageSize(pageSize string) ApiListBugGroupsRequest {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiListBugGroupsRequest) PageToken(pageToken string) ApiListBugGroupsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListBugGroupsRequest) Execute() (*ListBugGroupsResponse, *http.Response, error) {
	return r.ApiService.ListBugGroupsExecute(r)
}

/*
ListBugGroups 获取缺陷分类列表

获取缺陷分类列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiListBugGroupsRequest

  @link https://open.teambition.com/docs/apis/66b4ae32912d20d3b5840871 document
*/
func (a *ProjectAPIService) ListBugGroups(ctx context.Context, projectId string) ApiListBugGroupsRequest {
	return ApiListBugGroupsRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ListBugGroupsResponse
func (a *ProjectAPIService) ListBugGroupsExecute(r ApiListBugGroupsRequest) (*ListBugGroupsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListBugGroupsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/bug/commongroup"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.commongroupIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commongroupIds", r.commongroupIds, "")
	}
	if r.parentCommongroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parentCommongroupId", r.parentCommongroupId, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOrgProjectRolesV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	xOperatorId *string
	xTenantId *string
	organizationId *string
	pageSize *int32
	pageToken *string
}

// 操作者ID
func (r ApiListOrgProjectRolesV3Request) XOperatorId(xOperatorId string) ApiListOrgProjectRolesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListOrgProjectRolesV3Request) XTenantId(xTenantId string) ApiListOrgProjectRolesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 企业 Id
func (r ApiListOrgProjectRolesV3Request) OrganizationId(organizationId string) ApiListOrgProjectRolesV3Request {
	r.organizationId = &organizationId
	return r
}

// 返回数量
func (r ApiListOrgProjectRolesV3Request) PageSize(pageSize int32) ApiListOrgProjectRolesV3Request {
	r.pageSize = &pageSize
	return r
}

// pageToken
func (r ApiListOrgProjectRolesV3Request) PageToken(pageToken string) ApiListOrgProjectRolesV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiListOrgProjectRolesV3Request) Execute() (*ListOrgProjectRolesV3Response, *http.Response, error) {
	return r.ApiService.ListOrgProjectRolesV3Execute(r)
}

/*
ListOrgProjectRolesV3 获取企业后台项目角色

获取企业后台项目角色

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListOrgProjectRolesV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a3d2 document
*/
func (a *ProjectAPIService) ListOrgProjectRolesV3(ctx context.Context) ApiListOrgProjectRolesV3Request {
	return ApiListOrgProjectRolesV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListOrgProjectRolesV3Response
func (a *ProjectAPIService) ListOrgProjectRolesV3Execute(r ApiListOrgProjectRolesV3Request) (*ListOrgProjectRolesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListOrgProjectRolesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-role/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.organizationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organizationId", r.organizationId, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPrioritiesV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	xTenantId *string
	organizationId *string
}

// 企业 ID
func (r ApiListPrioritiesV3Request) XTenantId(xTenantId string) ApiListPrioritiesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 企业ID
func (r ApiListPrioritiesV3Request) OrganizationId(organizationId string) ApiListPrioritiesV3Request {
	r.organizationId = &organizationId
	return r
}

func (r ApiListPrioritiesV3Request) Execute() (*ListPrioritiesV3Response, *http.Response, error) {
	return r.ApiService.ListPrioritiesV3Execute(r)
}

/*
ListPrioritiesV3 查询企业优先级

查询企业优先级

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListPrioritiesV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a4961c document
*/
func (a *ProjectAPIService) ListPrioritiesV3(ctx context.Context) ApiListPrioritiesV3Request {
	return ApiListPrioritiesV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListPrioritiesV3Response
func (a *ProjectAPIService) ListPrioritiesV3Execute(r ApiListPrioritiesV3Request) (*ListPrioritiesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListPrioritiesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/priority/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.organizationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organizationId", r.organizationId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListProjectAppsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xTenantId *string
	appIds *string
	scope *string
}

// 企业 ID
func (r ApiListProjectAppsV3Request) XTenantId(xTenantId string) ApiListProjectAppsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 应用ID集合，逗号分隔，如果传递该参数仅查询指定 应用ID
func (r ApiListProjectAppsV3Request) AppIds(appIds string) ApiListProjectAppsV3Request {
	r.appIds = &appIds
	return r
}

// installed 或者 all，默认查询已经安装的应用
func (r ApiListProjectAppsV3Request) Scope(scope string) ApiListProjectAppsV3Request {
	r.scope = &scope
	return r
}

func (r ApiListProjectAppsV3Request) Execute() (*ListProjectAppsV3Response, *http.Response, error) {
	return r.ApiService.ListProjectAppsV3Execute(r)
}

/*
ListProjectAppsV3 查询项目应用列表

查询项目应用列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiListProjectAppsV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a496c1 document
*/
func (a *ProjectAPIService) ListProjectAppsV3(ctx context.Context, projectId string) ApiListProjectAppsV3Request {
	return ApiListProjectAppsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ListProjectAppsV3Response
func (a *ProjectAPIService) ListProjectAppsV3Execute(r ApiListProjectAppsV3Request) (*ListProjectAppsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListProjectAppsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/application/list"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.appIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appIds", r.appIds, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListProjectGroupMembersV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectTagId string
	xTenantId *string
	pageSize *int32
	pageToken *string
}

// 企业 ID
func (r ApiListProjectGroupMembersV3Request) XTenantId(xTenantId string) ApiListProjectGroupMembersV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 分页大小
func (r ApiListProjectGroupMembersV3Request) PageSize(pageSize int32) ApiListProjectGroupMembersV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiListProjectGroupMembersV3Request) PageToken(pageToken string) ApiListProjectGroupMembersV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiListProjectGroupMembersV3Request) Execute() (*ListProjectGroupMembersV3Response, *http.Response, error) {
	return r.ApiService.ListProjectGroupMembersV3Execute(r)
}

/*
ListProjectGroupMembersV3 获取项目分组成员列表

获取项目分组成员列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectTagId 项目分组 ID
 @return ApiListProjectGroupMembersV3Request

  @link https://open.teambition.com/docs/apis/6646e45a912d20d3b576c3fd document
*/
func (a *ProjectAPIService) ListProjectGroupMembersV3(ctx context.Context, projectTagId string) ApiListProjectGroupMembersV3Request {
	return ApiListProjectGroupMembersV3Request{
		ApiService: a,
		ctx: ctx,
		projectTagId: projectTagId,
	}
}

// Execute executes the request
//  @return ListProjectGroupMembersV3Response
func (a *ProjectAPIService) ListProjectGroupMembersV3Execute(r ApiListProjectGroupMembersV3Request) (*ListProjectGroupMembersV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListProjectGroupMembersV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-tag/{projectTagId}/member/list"
	localVarPath = strings.Replace(localVarPath, "{"+"projectTagId"+"}", url.PathEscape(parameterValueToString(r.projectTagId, "projectTagId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListProjectMembersV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	userIds *string
	projectRoleId *string
	limit *int32
	skip *int32
	pageSize *int32
	pageToken *string
}

// 操作者ID
func (r ApiListProjectMembersV3Request) XOperatorId(xOperatorId string) ApiListProjectMembersV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListProjectMembersV3Request) XTenantId(xTenantId string) ApiListProjectMembersV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 如果传递，仅查询这些用户ID， 用逗号组合
func (r ApiListProjectMembersV3Request) UserIds(userIds string) ApiListProjectMembersV3Request {
	r.userIds = &userIds
	return r
}

// 项目角色ID，仅查询拥有该角色的成员，并且仅支持单个角色查询
func (r ApiListProjectMembersV3Request) ProjectRoleId(projectRoleId string) ApiListProjectMembersV3Request {
	r.projectRoleId = &projectRoleId
	return r
}

// 每一页数量
// Deprecated
func (r ApiListProjectMembersV3Request) Limit(limit int32) ApiListProjectMembersV3Request {
	r.limit = &limit
	return r
}

// 分页
// Deprecated
func (r ApiListProjectMembersV3Request) Skip(skip int32) ApiListProjectMembersV3Request {
	r.skip = &skip
	return r
}

// 分页大小
func (r ApiListProjectMembersV3Request) PageSize(pageSize int32) ApiListProjectMembersV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiListProjectMembersV3Request) PageToken(pageToken string) ApiListProjectMembersV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiListProjectMembersV3Request) Execute() (*ListProjectMembersV3Response, *http.Response, error) {
	return r.ApiService.ListProjectMembersV3Execute(r)
}

/*
ListProjectMembersV3 获取项目成员列表

获取项目成员列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiListProjectMembersV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a49906 document
*/
func (a *ProjectAPIService) ListProjectMembersV3(ctx context.Context, projectId string) ApiListProjectMembersV3Request {
	return ApiListProjectMembersV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ListProjectMembersV3Response
func (a *ProjectAPIService) ListProjectMembersV3Execute(r ApiListProjectMembersV3Request) (*ListProjectMembersV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListProjectMembersV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/member"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userIds", r.userIds, "")
	}
	if r.projectRoleId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectRoleId", r.projectRoleId, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skip", r.skip, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListProjectRemindersV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xTenantId *string
	pageSize *int32
	pageToken *string
}

// 企业 ID
func (r ApiListProjectRemindersV3Request) XTenantId(xTenantId string) ApiListProjectRemindersV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 分页数量
func (r ApiListProjectRemindersV3Request) PageSize(pageSize int32) ApiListProjectRemindersV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiListProjectRemindersV3Request) PageToken(pageToken string) ApiListProjectRemindersV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiListProjectRemindersV3Request) Execute() (*ListProjectRemindersV3Response, *http.Response, error) {
	return r.ApiService.ListProjectRemindersV3Execute(r)
}

/*
ListProjectRemindersV3 获取项目「默认任务提醒」列表

获取项目「默认任务提醒」列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiListProjectRemindersV3Request

  @link https://open.teambition.com/docs/apis/63292c59912d20d3b5da9e3c document
*/
func (a *ProjectAPIService) ListProjectRemindersV3(ctx context.Context, projectId string) ApiListProjectRemindersV3Request {
	return ApiListProjectRemindersV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ListProjectRemindersV3Response
func (a *ProjectAPIService) ListProjectRemindersV3Execute(r ApiListProjectRemindersV3Request) (*ListProjectRemindersV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListProjectRemindersV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/reminder/list"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListProjectRolesV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	pageSize *int32
	pageToken *string
	level *float32
	includeHidden *bool
}

// 操作者ID
func (r ApiListProjectRolesV3Request) XOperatorId(xOperatorId string) ApiListProjectRolesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListProjectRolesV3Request) XTenantId(xTenantId string) ApiListProjectRolesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 分页大小
func (r ApiListProjectRolesV3Request) PageSize(pageSize int32) ApiListProjectRolesV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiListProjectRolesV3Request) PageToken(pageToken string) ApiListProjectRolesV3Request {
	r.pageToken = &pageToken
	return r
}

// 角色等级
func (r ApiListProjectRolesV3Request) Level(level float32) ApiListProjectRolesV3Request {
	r.level = &level
	return r
}

// 是否返回隐藏角色,默认为否
func (r ApiListProjectRolesV3Request) IncludeHidden(includeHidden bool) ApiListProjectRolesV3Request {
	r.includeHidden = &includeHidden
	return r
}

func (r ApiListProjectRolesV3Request) Execute() (*ListProjectRolesV3Response, *http.Response, error) {
	return r.ApiService.ListProjectRolesV3Execute(r)
}

/*
ListProjectRolesV3 获取项目角色列表

获取项目角色列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiListProjectRolesV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49b8f document
*/
func (a *ProjectAPIService) ListProjectRolesV3(ctx context.Context, projectId string) ApiListProjectRolesV3Request {
	return ApiListProjectRolesV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ListProjectRolesV3Response
func (a *ProjectAPIService) ListProjectRolesV3Execute(r ApiListProjectRolesV3Request) (*ListProjectRolesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListProjectRolesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/role"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level", r.level, "")
	}
	if r.includeHidden != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeHidden", r.includeHidden, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListProjectStatusesV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	pageToken *string
	pageSize *int32
	renderHtml *bool
	htmlExpireSeconds *int32
}

// 查询人ID
func (r ApiListProjectStatusesV3Request) XOperatorId(xOperatorId string) ApiListProjectStatusesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListProjectStatusesV3Request) XTenantId(xTenantId string) ApiListProjectStatusesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 分页标
func (r ApiListProjectStatusesV3Request) PageToken(pageToken string) ApiListProjectStatusesV3Request {
	r.pageToken = &pageToken
	return r
}

// 分页大小
func (r ApiListProjectStatusesV3Request) PageSize(pageSize int32) ApiListProjectStatusesV3Request {
	r.pageSize = &pageSize
	return r
}

// 是否对富文本内容html渲染，仅对白名单的应用开放
func (r ApiListProjectStatusesV3Request) RenderHtml(renderHtml bool) ApiListProjectStatusesV3Request {
	r.renderHtml = &renderHtml
	return r
}

// 渲染html时内容过期时间，默认为 1800(秒)
func (r ApiListProjectStatusesV3Request) HtmlExpireSeconds(htmlExpireSeconds int32) ApiListProjectStatusesV3Request {
	r.htmlExpireSeconds = &htmlExpireSeconds
	return r
}

func (r ApiListProjectStatusesV3Request) Execute() (*ListProjectStatusesV3Response, *http.Response, error) {
	return r.ApiService.ListProjectStatusesV3Execute(r)
}

/*
ListProjectStatusesV3 查询项目状态和状态历史

查询项目状态和状态历史

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiListProjectStatusesV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49dd1 document
*/
func (a *ProjectAPIService) ListProjectStatusesV3(ctx context.Context, projectId string) ApiListProjectStatusesV3Request {
	return ApiListProjectStatusesV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ListProjectStatusesV3Response
func (a *ProjectAPIService) ListProjectStatusesV3Execute(r ApiListProjectStatusesV3Request) (*ListProjectStatusesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListProjectStatusesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/status/list"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.renderHtml != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "renderHtml", r.renderHtml, "")
	}
	if r.htmlExpireSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "htmlExpireSeconds", r.htmlExpireSeconds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListStarredProjectsRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	xOperatorId *string
	xTenantId *string
	pageSize *int32
	pageToken *string
}

// 操作者 ID
func (r ApiListStarredProjectsRequest) XOperatorId(xOperatorId string) ApiListStarredProjectsRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListStarredProjectsRequest) XTenantId(xTenantId string) ApiListStarredProjectsRequest {
	r.xTenantId = &xTenantId
	return r
}

// 分页大小，默认 1000
func (r ApiListStarredProjectsRequest) PageSize(pageSize int32) ApiListStarredProjectsRequest {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiListStarredProjectsRequest) PageToken(pageToken string) ApiListStarredProjectsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListStarredProjectsRequest) Execute() (*ListStarredProjectsResponse, *http.Response, error) {
	return r.ApiService.ListStarredProjectsExecute(r)
}

/*
ListStarredProjects 查询用户星标项目

查询用户星标项目

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListStarredProjectsRequest

  @link https://open.teambition.com/docs/apis/66e00a73912d20d3b5a15a91 document
*/
func (a *ProjectAPIService) ListStarredProjects(ctx context.Context) ApiListStarredProjectsRequest {
	return ApiListStarredProjectsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListStarredProjectsResponse
func (a *ProjectAPIService) ListStarredProjectsExecute(r ApiListStarredProjectsRequest) (*ListStarredProjectsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListStarredProjectsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-star/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListStatusCustomFieldsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xTenantId *string
}

// 企业 ID
func (r ApiListStatusCustomFieldsV3Request) XTenantId(xTenantId string) ApiListStatusCustomFieldsV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiListStatusCustomFieldsV3Request) Execute() (*ListStatusCustomFieldsV3Response, *http.Response, error) {
	return r.ApiService.ListStatusCustomFieldsV3Execute(r)
}

/*
ListStatusCustomFieldsV3 查询项目概览自定义字段列表

查询项目概览自定义字段列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiListStatusCustomFieldsV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49d9d document
*/
func (a *ProjectAPIService) ListStatusCustomFieldsV3(ctx context.Context, projectId string) ApiListStatusCustomFieldsV3Request {
	return ApiListStatusCustomFieldsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ListStatusCustomFieldsV3Response
func (a *ProjectAPIService) ListStatusCustomFieldsV3Execute(r ApiListStatusCustomFieldsV3Request) (*ListStatusCustomFieldsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListStatusCustomFieldsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/status/customfield/list"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListStatusExecutorsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	tfsId string
	xOperatorId *string
	xTenantId *string
}

// 操作者ID
func (r ApiListStatusExecutorsV3Request) XOperatorId(xOperatorId string) ApiListStatusExecutorsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListStatusExecutorsV3Request) XTenantId(xTenantId string) ApiListStatusExecutorsV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiListStatusExecutorsV3Request) Execute() (*ListStatusExecutorsV3Response, *http.Response, error) {
	return r.ApiService.ListStatusExecutorsV3Execute(r)
}

/*
ListStatusExecutorsV3 列出项目工作流状态流转执行角色列表

列出项目工作流状态流转执行角色列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param tfsId 工作流状态ID
 @return ApiListStatusExecutorsV3Request

  @link https://open.teambition.com/docs/apis/6363bcfb912d20d3b56fb176 document
*/
func (a *ProjectAPIService) ListStatusExecutorsV3(ctx context.Context, projectId string, tfsId string) ApiListStatusExecutorsV3Request {
	return ApiListStatusExecutorsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		tfsId: tfsId,
	}
}

// Execute executes the request
//  @return ListStatusExecutorsV3Response
func (a *ProjectAPIService) ListStatusExecutorsV3Execute(r ApiListStatusExecutorsV3Request) (*ListStatusExecutorsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListStatusExecutorsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/taskflowstatus/{tfsId}/executor/list"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tfsId"+"}", url.PathEscape(parameterValueToString(r.tfsId, "tfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListStatusFieldGroupsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xTenantId *string
}

// 企业 ID
func (r ApiListStatusFieldGroupsV3Request) XTenantId(xTenantId string) ApiListStatusFieldGroupsV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiListStatusFieldGroupsV3Request) Execute() (*ListStatusFieldGroupsV3Response, *http.Response, error) {
	return r.ApiService.ListStatusFieldGroupsV3Execute(r)
}

/*
ListStatusFieldGroupsV3 查询项目概览字段分组列表

查询项目概览字段分组列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiListStatusFieldGroupsV3Request

  @link https://open.teambition.com/docs/apis/66e00a73912d20d3b5a15b19 document
*/
func (a *ProjectAPIService) ListStatusFieldGroupsV3(ctx context.Context, projectId string) ApiListStatusFieldGroupsV3Request {
	return ApiListStatusFieldGroupsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ListStatusFieldGroupsV3Response
func (a *ProjectAPIService) ListStatusFieldGroupsV3Execute(r ApiListStatusFieldGroupsV3Request) (*ListStatusFieldGroupsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListStatusFieldGroupsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/status/field-group/list"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListStatusValidatorsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	tfsId string
	xOperatorId *string
	xTenantId *string
}

// 操作者ID
func (r ApiListStatusValidatorsV3Request) XOperatorId(xOperatorId string) ApiListStatusValidatorsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListStatusValidatorsV3Request) XTenantId(xTenantId string) ApiListStatusValidatorsV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiListStatusValidatorsV3Request) Execute() (*ListStatusValidatorsV3Response, *http.Response, error) {
	return r.ApiService.ListStatusValidatorsV3Execute(r)
}

/*
ListStatusValidatorsV3 列出项目工作流状态流转校验列表

列出项目工作流状态流转校验列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param tfsId 工作流状态ID
 @return ApiListStatusValidatorsV3Request

  @link https://open.teambition.com/docs/apis/6363bcfb912d20d3b56fb20e document
*/
func (a *ProjectAPIService) ListStatusValidatorsV3(ctx context.Context, projectId string, tfsId string) ApiListStatusValidatorsV3Request {
	return ApiListStatusValidatorsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		tfsId: tfsId,
	}
}

// Execute executes the request
//  @return ListStatusValidatorsV3Response
func (a *ProjectAPIService) ListStatusValidatorsV3Execute(r ApiListStatusValidatorsV3Request) (*ListStatusValidatorsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListStatusValidatorsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/taskflowstatus/{tfsId}/validator/list"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tfsId"+"}", url.PathEscape(parameterValueToString(r.tfsId, "tfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListStoryGroupsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xTenantId *string
	commongroupIds *string
	parentCommongroupId *string
	pageSize *string
	pageToken *string
}

// 企业 ID
func (r ApiListStoryGroupsV3Request) XTenantId(xTenantId string) ApiListStoryGroupsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 需求分类 ID集合，逗号分隔
func (r ApiListStoryGroupsV3Request) CommongroupIds(commongroupIds string) ApiListStoryGroupsV3Request {
	r.commongroupIds = &commongroupIds
	return r
}

// 父需求分类 ID
func (r ApiListStoryGroupsV3Request) ParentCommongroupId(parentCommongroupId string) ApiListStoryGroupsV3Request {
	r.parentCommongroupId = &parentCommongroupId
	return r
}

// 每页需求分类数量，默认为 50
func (r ApiListStoryGroupsV3Request) PageSize(pageSize string) ApiListStoryGroupsV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiListStoryGroupsV3Request) PageToken(pageToken string) ApiListStoryGroupsV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiListStoryGroupsV3Request) Execute() (*ListStoryGroupsV3Response, *http.Response, error) {
	return r.ApiService.ListStoryGroupsV3Execute(r)
}

/*
ListStoryGroupsV3 获取需求分类列表

获取需求分类列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiListStoryGroupsV3Request

  @link https://open.teambition.com/docs/apis/6360900d912d20d3b5bb02a6 document
*/
func (a *ProjectAPIService) ListStoryGroupsV3(ctx context.Context, projectId string) ApiListStoryGroupsV3Request {
	return ApiListStoryGroupsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ListStoryGroupsV3Response
func (a *ProjectAPIService) ListStoryGroupsV3Execute(r ApiListStoryGroupsV3Request) (*ListStoryGroupsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListStoryGroupsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/story/commongroup"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.commongroupIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commongroupIds", r.commongroupIds, "")
	}
	if r.parentCommongroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parentCommongroupId", r.parentCommongroupId, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTestPlanGroupsRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	testplanId string
	xOperatorId *string
	xTenantId *string
}

// 操作者 ID
func (r ApiListTestPlanGroupsRequest) XOperatorId(xOperatorId string) ApiListTestPlanGroupsRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListTestPlanGroupsRequest) XTenantId(xTenantId string) ApiListTestPlanGroupsRequest {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiListTestPlanGroupsRequest) Execute() (*ListTestPlanGroupsResponse, *http.Response, error) {
	return r.ApiService.ListTestPlanGroupsExecute(r)
}

/*
ListTestPlanGroups 获取测试计划分组列表

获取测试计划分组列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @param testplanId 测试计划 ID
 @return ApiListTestPlanGroupsRequest

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a8f1 document
*/
func (a *ProjectAPIService) ListTestPlanGroups(ctx context.Context, projectId string, testplanId string) ApiListTestPlanGroupsRequest {
	return ApiListTestPlanGroupsRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		testplanId: testplanId,
	}
}

// Execute executes the request
//  @return ListTestPlanGroupsResponse
func (a *ProjectAPIService) ListTestPlanGroupsExecute(r ApiListTestPlanGroupsRequest) (*ListTestPlanGroupsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListTestPlanGroupsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/testplan/{testplanId}/commongroup"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"testplanId"+"}", url.PathEscape(parameterValueToString(r.testplanId, "testplanId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTestPlansRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xTenantId *string
	pageSize *int32
	pageToken *string
}

// 企业 ID
func (r ApiListTestPlansRequest) XTenantId(xTenantId string) ApiListTestPlansRequest {
	r.xTenantId = &xTenantId
	return r
}

// 返回数量, 默认 50 条
func (r ApiListTestPlansRequest) PageSize(pageSize int32) ApiListTestPlansRequest {
	r.pageSize = &pageSize
	return r
}

// pageToken
func (r ApiListTestPlansRequest) PageToken(pageToken string) ApiListTestPlansRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListTestPlansRequest) Execute() (*ListTestPlansResponse, *http.Response, error) {
	return r.ApiService.ListTestPlansExecute(r)
}

/*
ListTestPlans 获取测试计划

获取测试计划

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiListTestPlansRequest

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a996 document
*/
func (a *ProjectAPIService) ListTestPlans(ctx context.Context, projectId string) ApiListTestPlansRequest {
	return ApiListTestPlansRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ListTestPlansResponse
func (a *ProjectAPIService) ListTestPlansExecute(r ApiListTestPlansRequest) (*ListTestPlansResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListTestPlansResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/testplan"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUserProjectsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	xOperatorId *string
	xTenantId *string
	projectIds *string
	projectRoleLevels *string
	sortBy *string
	pageSize *int32
	pageToken *string
}

// 查询人 ID
func (r ApiListUserProjectsV3Request) XOperatorId(xOperatorId string) ApiListUserProjectsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListUserProjectsV3Request) XTenantId(xTenantId string) ApiListUserProjectsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 项目ID集合，逗号分隔
func (r ApiListUserProjectsV3Request) ProjectIds(projectIds string) ApiListUserProjectsV3Request {
	r.projectIds = &projectIds
	return r
}

// 过滤指定的项目角色等级，逗号分割，可以填写 0,1,2 分别表示成员, 管理员, 拥有者
func (r ApiListUserProjectsV3Request) ProjectRoleLevels(projectRoleLevels string) ApiListUserProjectsV3Request {
	r.projectRoleLevels = &projectRoleLevels
	return r
}

// 排序，可选 &#x60;updated:desc&#x60; 或者 &#x60;pinyin:asc&#x60;
func (r ApiListUserProjectsV3Request) SortBy(sortBy string) ApiListUserProjectsV3Request {
	r.sortBy = &sortBy
	return r
}

// 分页大小
func (r ApiListUserProjectsV3Request) PageSize(pageSize int32) ApiListUserProjectsV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiListUserProjectsV3Request) PageToken(pageToken string) ApiListUserProjectsV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiListUserProjectsV3Request) Execute() (*ListUserProjectsV3Response, *http.Response, error) {
	return r.ApiService.ListUserProjectsV3Execute(r)
}

/*
ListUserProjectsV3 获取用户参与项目

获取用户参与项目

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListUserProjectsV3Request

  @link https://open.teambition.com/docs/apis/6321c912912d20d3b5a6beb7 document
*/
func (a *ProjectAPIService) ListUserProjectsV3(ctx context.Context) ApiListUserProjectsV3Request {
	return ApiListUserProjectsV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListUserProjectsV3Response
func (a *ProjectAPIService) ListUserProjectsV3Execute(r ApiListUserProjectsV3Request) (*ListUserProjectsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListUserProjectsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/user-joined"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectIds", r.projectIds, "")
	}
	if r.projectRoleLevels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectRoleLevels", r.projectRoleLevels, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMoveTaskFlowStatusV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	tfsId string
	xOperatorId *string
	xTenantId *string
	moveTaskFlowStatusV3Request *MoveTaskFlowStatusV3Request
}

// 操作者ID
func (r ApiMoveTaskFlowStatusV3Request) XOperatorId(xOperatorId string) ApiMoveTaskFlowStatusV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiMoveTaskFlowStatusV3Request) XTenantId(xTenantId string) ApiMoveTaskFlowStatusV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiMoveTaskFlowStatusV3Request) MoveTaskFlowStatusV3Request(moveTaskFlowStatusV3Request MoveTaskFlowStatusV3Request) ApiMoveTaskFlowStatusV3Request {
	r.moveTaskFlowStatusV3Request = &moveTaskFlowStatusV3Request
	return r
}

func (r ApiMoveTaskFlowStatusV3Request) Execute() (*UpdateTaskFlowStatusTypeV3Response, *http.Response, error) {
	return r.ApiService.MoveTaskFlowStatusV3Execute(r)
}

/*
MoveTaskFlowStatusV3 更新项目工作流状态位置

更新项目工作流状态位置

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param tfsId 工作流状态ID
 @return ApiMoveTaskFlowStatusV3Request

  @link https://open.teambition.com/docs/apis/6437eaa1912d20d3b5685947 document
*/
func (a *ProjectAPIService) MoveTaskFlowStatusV3(ctx context.Context, projectId string, tfsId string) ApiMoveTaskFlowStatusV3Request {
	return ApiMoveTaskFlowStatusV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		tfsId: tfsId,
	}
}

// Execute executes the request
//  @return UpdateTaskFlowStatusTypeV3Response
func (a *ProjectAPIService) MoveTaskFlowStatusV3Execute(r ApiMoveTaskFlowStatusV3Request) (*UpdateTaskFlowStatusTypeV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskFlowStatusTypeV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/taskflowstatus/{tfsId}/move"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tfsId"+"}", url.PathEscape(parameterValueToString(r.tfsId, "tfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.moveTaskFlowStatusV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryGroupProjectsRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectTagId string
	xTenantId *string
	organizationId *string
	pageSize *int32
	pageToken *string
	includeSuspended *bool
}

// 企业 ID
func (r ApiQueryGroupProjectsRequest) XTenantId(xTenantId string) ApiQueryGroupProjectsRequest {
	r.xTenantId = &xTenantId
	return r
}

// 企业ID, 如果提供&#x60;x-tenant-id&#x60;, query中不是必须的, 如果提供必须和&#x60;x-tenant-id&#x60;一致
func (r ApiQueryGroupProjectsRequest) OrganizationId(organizationId string) ApiQueryGroupProjectsRequest {
	r.organizationId = &organizationId
	return r
}

// 分页大小，默认 1000
func (r ApiQueryGroupProjectsRequest) PageSize(pageSize int32) ApiQueryGroupProjectsRequest {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiQueryGroupProjectsRequest) PageToken(pageToken string) ApiQueryGroupProjectsRequest {
	r.pageToken = &pageToken
	return r
}

// 是否包含归档项目，默认 false
func (r ApiQueryGroupProjectsRequest) IncludeSuspended(includeSuspended bool) ApiQueryGroupProjectsRequest {
	r.includeSuspended = &includeSuspended
	return r
}

func (r ApiQueryGroupProjectsRequest) Execute() (*QueryGroupProjectsResponse, *http.Response, error) {
	return r.ApiService.QueryGroupProjectsExecute(r)
}

/*
QueryGroupProjects 根据项目分组 ID 查询项目

根据项目分组 ID 查询项目

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectTagId 项目分组 ID
 @return ApiQueryGroupProjectsRequest

  @link https://open.teambition.com/docs/apis/66600ca7912d20d3b57431b0 document
*/
func (a *ProjectAPIService) QueryGroupProjects(ctx context.Context, projectTagId string) ApiQueryGroupProjectsRequest {
	return ApiQueryGroupProjectsRequest{
		ApiService: a,
		ctx: ctx,
		projectTagId: projectTagId,
	}
}

// Execute executes the request
//  @return QueryGroupProjectsResponse
func (a *ProjectAPIService) QueryGroupProjectsExecute(r ApiQueryGroupProjectsRequest) (*QueryGroupProjectsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryGroupProjectsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-tag/{projectTagId}/project/query"
	localVarPath = strings.Replace(localVarPath, "{"+"projectTagId"+"}", url.PathEscape(parameterValueToString(r.projectTagId, "projectTagId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.organizationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organizationId", r.organizationId, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.includeSuspended != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSuspended", r.includeSuspended, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryProjectGroupsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	xTenantId *string
	organizationId *string
	ids *string
	parentProjectTagId *string
	q *string
	pageSize *int32
	pageToken *string
}

// 企业 ID
func (r ApiQueryProjectGroupsV3Request) XTenantId(xTenantId string) ApiQueryProjectGroupsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 企业ID, 如果提供&#x60;x-tenant-id&#x60;, query中不是必须的, 如果提供必须和&#x60;x-tenant-id&#x60;一致
func (r ApiQueryProjectGroupsV3Request) OrganizationId(organizationId string) ApiQueryProjectGroupsV3Request {
	r.organizationId = &organizationId
	return r
}

// 项目分组ID列表，用逗号分隔。
func (r ApiQueryProjectGroupsV3Request) Ids(ids string) ApiQueryProjectGroupsV3Request {
	r.ids = &ids
	return r
}

// 项目分组ID列表，用逗号分隔。
func (r ApiQueryProjectGroupsV3Request) ParentProjectTagId(parentProjectTagId string) ApiQueryProjectGroupsV3Request {
	r.parentProjectTagId = &parentProjectTagId
	return r
}

// 项目分组模糊查询关键词
func (r ApiQueryProjectGroupsV3Request) Q(q string) ApiQueryProjectGroupsV3Request {
	r.q = &q
	return r
}

// 分页
func (r ApiQueryProjectGroupsV3Request) PageSize(pageSize int32) ApiQueryProjectGroupsV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiQueryProjectGroupsV3Request) PageToken(pageToken string) ApiQueryProjectGroupsV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiQueryProjectGroupsV3Request) Execute() (*QueryProjectGroupsV3Response, *http.Response, error) {
	return r.ApiService.QueryProjectGroupsV3Execute(r)
}

/*
QueryProjectGroupsV3 查询项目分组

查询项目分组

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryProjectGroupsV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a2c7 document
*/
func (a *ProjectAPIService) QueryProjectGroupsV3(ctx context.Context) ApiQueryProjectGroupsV3Request {
	return ApiQueryProjectGroupsV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryProjectGroupsV3Response
func (a *ProjectAPIService) QueryProjectGroupsV3Execute(r ApiQueryProjectGroupsV3Request) (*QueryProjectGroupsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryProjectGroupsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-tag/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.organizationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organizationId", r.organizationId, "")
	}
	if r.ids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ids", r.ids, "")
	}
	if r.parentProjectTagId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parentProjectTagId", r.parentProjectTagId, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryProjectsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	xTenantId *string
	projectIds *string
	name *string
	pageSize *int32
	pageToken *string
	sourceId *string
	visible *string
	includeTemplate *bool
}

// 企业 ID
func (r ApiQueryProjectsV3Request) XTenantId(xTenantId string) ApiQueryProjectsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 项目ID集合，逗号分隔
func (r ApiQueryProjectsV3Request) ProjectIds(projectIds string) ApiQueryProjectsV3Request {
	r.projectIds = &projectIds
	return r
}

// 项目名字(模糊匹配)
func (r ApiQueryProjectsV3Request) Name(name string) ApiQueryProjectsV3Request {
	r.name = &name
	return r
}

// 分页大小
func (r ApiQueryProjectsV3Request) PageSize(pageSize int32) ApiQueryProjectsV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiQueryProjectsV3Request) PageToken(pageToken string) ApiQueryProjectsV3Request {
	r.pageToken = &pageToken
	return r
}

// 原始项目ID
func (r ApiQueryProjectsV3Request) SourceId(sourceId string) ApiQueryProjectsV3Request {
	r.sourceId = &sourceId
	return r
}

// 项目可见性 - &#39;project&#39;: 私有项目 - &#39;organization&#39;: 企业公开项目 
func (r ApiQueryProjectsV3Request) Visible(visible string) ApiQueryProjectsV3Request {
	r.visible = &visible
	return r
}

// 是否包含模板项目，默认 false
func (r ApiQueryProjectsV3Request) IncludeTemplate(includeTemplate bool) ApiQueryProjectsV3Request {
	r.includeTemplate = &includeTemplate
	return r
}

func (r ApiQueryProjectsV3Request) Execute() (*QueryProjectsV3Response, *http.Response, error) {
	return r.ApiService.QueryProjectsV3Execute(r)
}

/*
QueryProjectsV3 查询项目

查询项目

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryProjectsV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a49aa7 document
*/
func (a *ProjectAPIService) QueryProjectsV3(ctx context.Context) ApiQueryProjectsV3Request {
	return ApiQueryProjectsV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryProjectsV3Response
func (a *ProjectAPIService) QueryProjectsV3Execute(r ApiQueryProjectsV3Request) (*QueryProjectsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryProjectsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectIds", r.projectIds, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.sourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sourceId", r.sourceId, "")
	}
	if r.visible != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "visible", r.visible, "")
	}
	if r.includeTemplate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTemplate", r.includeTemplate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryTestPlanGroupsRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	commongroupIds *string
}

// 操作者 ID
func (r ApiQueryTestPlanGroupsRequest) XOperatorId(xOperatorId string) ApiQueryTestPlanGroupsRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiQueryTestPlanGroupsRequest) XTenantId(xTenantId string) ApiQueryTestPlanGroupsRequest {
	r.xTenantId = &xTenantId
	return r
}

// 分组 ID 集合,使用逗号分隔
func (r ApiQueryTestPlanGroupsRequest) CommongroupIds(commongroupIds string) ApiQueryTestPlanGroupsRequest {
	r.commongroupIds = &commongroupIds
	return r
}

func (r ApiQueryTestPlanGroupsRequest) Execute() (*QueryTestPlanGroupsResponse, *http.Response, error) {
	return r.ApiService.QueryTestPlanGroupsExecute(r)
}

/*
QueryTestPlanGroups 查询测试计划分组

查询测试计划分组

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiQueryTestPlanGroupsRequest

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a8bf document
*/
func (a *ProjectAPIService) QueryTestPlanGroups(ctx context.Context, projectId string) ApiQueryTestPlanGroupsRequest {
	return ApiQueryTestPlanGroupsRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return QueryTestPlanGroupsResponse
func (a *ProjectAPIService) QueryTestPlanGroupsExecute(r ApiQueryTestPlanGroupsRequest) (*QueryTestPlanGroupsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryTestPlanGroupsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/commongroup/query"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.commongroupIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commongroupIds", r.commongroupIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryTestPlansRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xTenantId *string
	testplanIds *string
}

// 企业 ID
func (r ApiQueryTestPlansRequest) XTenantId(xTenantId string) ApiQueryTestPlansRequest {
	r.xTenantId = &xTenantId
	return r
}

// 测试计划ID 集合,使用逗号分隔
func (r ApiQueryTestPlansRequest) TestplanIds(testplanIds string) ApiQueryTestPlansRequest {
	r.testplanIds = &testplanIds
	return r
}

func (r ApiQueryTestPlansRequest) Execute() (*QueryTestPlansResponse, *http.Response, error) {
	return r.ApiService.QueryTestPlansExecute(r)
}

/*
QueryTestPlans 查询测试计划

查询测试计划

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiQueryTestPlansRequest

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a96a document
*/
func (a *ProjectAPIService) QueryTestPlans(ctx context.Context, projectId string) ApiQueryTestPlansRequest {
	return ApiQueryTestPlansRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return QueryTestPlansResponse
func (a *ProjectAPIService) QueryTestPlansExecute(r ApiQueryTestPlansRequest) (*QueryTestPlansResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryTestPlansResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/testplan/query"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.testplanIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "testplanIds", r.testplanIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveProjectGroupMemberV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectTagId string
	xOperatorId *string
	xTenantId *string
	addProjectGroupMemberV3Request *AddProjectGroupMemberV3Request
}

// 操作者ID
func (r ApiRemoveProjectGroupMemberV3Request) XOperatorId(xOperatorId string) ApiRemoveProjectGroupMemberV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiRemoveProjectGroupMemberV3Request) XTenantId(xTenantId string) ApiRemoveProjectGroupMemberV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiRemoveProjectGroupMemberV3Request) AddProjectGroupMemberV3Request(addProjectGroupMemberV3Request AddProjectGroupMemberV3Request) ApiRemoveProjectGroupMemberV3Request {
	r.addProjectGroupMemberV3Request = &addProjectGroupMemberV3Request
	return r
}

func (r ApiRemoveProjectGroupMemberV3Request) Execute() (*RemoveProjectGroupMemberV3Response, *http.Response, error) {
	return r.ApiService.RemoveProjectGroupMemberV3Execute(r)
}

/*
RemoveProjectGroupMemberV3 删除项目分组成员

删除项目分组成员

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectTagId 项目分组 ID
 @return ApiRemoveProjectGroupMemberV3Request

  @link https://open.teambition.com/docs/apis/664ffdf1912d20d3b5897a22 document
*/
func (a *ProjectAPIService) RemoveProjectGroupMemberV3(ctx context.Context, projectTagId string) ApiRemoveProjectGroupMemberV3Request {
	return ApiRemoveProjectGroupMemberV3Request{
		ApiService: a,
		ctx: ctx,
		projectTagId: projectTagId,
	}
}

// Execute executes the request
//  @return RemoveProjectGroupMemberV3Response
func (a *ProjectAPIService) RemoveProjectGroupMemberV3Execute(r ApiRemoveProjectGroupMemberV3Request) (*RemoveProjectGroupMemberV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemoveProjectGroupMemberV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-tag/{projectTagId}/member/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"projectTagId"+"}", url.PathEscape(parameterValueToString(r.projectTagId, "projectTagId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.addProjectGroupMemberV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveStatusCustomFieldV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	removeStatusCustomFieldV3Request *RemoveStatusCustomFieldV3Request
}

// 操作者ID
func (r ApiRemoveStatusCustomFieldV3Request) XOperatorId(xOperatorId string) ApiRemoveStatusCustomFieldV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiRemoveStatusCustomFieldV3Request) XTenantId(xTenantId string) ApiRemoveStatusCustomFieldV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiRemoveStatusCustomFieldV3Request) RemoveStatusCustomFieldV3Request(removeStatusCustomFieldV3Request RemoveStatusCustomFieldV3Request) ApiRemoveStatusCustomFieldV3Request {
	r.removeStatusCustomFieldV3Request = &removeStatusCustomFieldV3Request
	return r
}

func (r ApiRemoveStatusCustomFieldV3Request) Execute() (*DeleteOrgMemberResponse, *http.Response, error) {
	return r.ApiService.RemoveStatusCustomFieldV3Execute(r)
}

/*
RemoveStatusCustomFieldV3 删除项目概览自定义字段

删除项目概览自定义字段

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiRemoveStatusCustomFieldV3Request

  @link https://open.teambition.com/docs/apis/637f7783912d20d3b5886bf1 document
*/
func (a *ProjectAPIService) RemoveStatusCustomFieldV3(ctx context.Context, projectId string) ApiRemoveStatusCustomFieldV3Request {
	return ApiRemoveStatusCustomFieldV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return DeleteOrgMemberResponse
func (a *ProjectAPIService) RemoveStatusCustomFieldV3Execute(r ApiRemoveStatusCustomFieldV3Request) (*DeleteOrgMemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteOrgMemberResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/status/customfield/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.removeStatusCustomFieldV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestartSprintV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	sprintId string
	xOperatorId *string
	xTenantId *string
	body *map[string]interface{}
}

// 操作者ID
func (r ApiRestartSprintV3Request) XOperatorId(xOperatorId string) ApiRestartSprintV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiRestartSprintV3Request) XTenantId(xTenantId string) ApiRestartSprintV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiRestartSprintV3Request) Body(body map[string]interface{}) ApiRestartSprintV3Request {
	r.body = &body
	return r
}

func (r ApiRestartSprintV3Request) Execute() (*RestartSprintV3Response, *http.Response, error) {
	return r.ApiService.RestartSprintV3Execute(r)
}

/*
RestartSprintV3 重新开始迭代

重新开始迭代

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @param sprintId 迭代 ID
 @return ApiRestartSprintV3Request

  @link https://open.teambition.com/docs/apis/63a08188912d20d3b56b94d3 document
*/
func (a *ProjectAPIService) RestartSprintV3(ctx context.Context, projectId string, sprintId string) ApiRestartSprintV3Request {
	return ApiRestartSprintV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		sprintId: sprintId,
	}
}

// Execute executes the request
//  @return RestartSprintV3Response
func (a *ProjectAPIService) RestartSprintV3Execute(r ApiRestartSprintV3Request) (*RestartSprintV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RestartSprintV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/sprint/{sprintId}/restart"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sprintId"+"}", url.PathEscape(parameterValueToString(r.sprintId, "sprintId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestoreProjectV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
}

// 操作者ID
func (r ApiRestoreProjectV3Request) XOperatorId(xOperatorId string) ApiRestoreProjectV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiRestoreProjectV3Request) XTenantId(xTenantId string) ApiRestoreProjectV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiRestoreProjectV3Request) Execute() (*RestoreProjectV3Response, *http.Response, error) {
	return r.ApiService.RestoreProjectV3Execute(r)
}

/*
RestoreProjectV3 恢复归档项目

恢复归档项目

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiRestoreProjectV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49e13 document
*/
func (a *ProjectAPIService) RestoreProjectV3(ctx context.Context, projectId string) ApiRestoreProjectV3Request {
	return ApiRestoreProjectV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return RestoreProjectV3Response
func (a *ProjectAPIService) RestoreProjectV3Execute(r ApiRestoreProjectV3Request) (*RestoreProjectV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RestoreProjectV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/suspend-restore"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchOrgTaskFlowStatusesV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	xOperatorId *string
	xTenantId *string
	tfIds *string
	q *string
	pageSize *int32
	pageToken *string
}

// 操作者ID
func (r ApiSearchOrgTaskFlowStatusesV3Request) XOperatorId(xOperatorId string) ApiSearchOrgTaskFlowStatusesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiSearchOrgTaskFlowStatusesV3Request) XTenantId(xTenantId string) ApiSearchOrgTaskFlowStatusesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 工作流ID集合，逗号组合
func (r ApiSearchOrgTaskFlowStatusesV3Request) TfIds(tfIds string) ApiSearchOrgTaskFlowStatusesV3Request {
	r.tfIds = &tfIds
	return r
}

// 模糊查询工作流名字
func (r ApiSearchOrgTaskFlowStatusesV3Request) Q(q string) ApiSearchOrgTaskFlowStatusesV3Request {
	r.q = &q
	return r
}

// 每页工作流长度
func (r ApiSearchOrgTaskFlowStatusesV3Request) PageSize(pageSize int32) ApiSearchOrgTaskFlowStatusesV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchOrgTaskFlowStatusesV3Request) PageToken(pageToken string) ApiSearchOrgTaskFlowStatusesV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiSearchOrgTaskFlowStatusesV3Request) Execute() (*SearchOrgTaskFlowStatusesV3Response, *http.Response, error) {
	return r.ApiService.SearchOrgTaskFlowStatusesV3Execute(r)
}

/*
SearchOrgTaskFlowStatusesV3 搜索企业工作流状态

搜索企业工作流状态

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchOrgTaskFlowStatusesV3Request

  @link https://open.teambition.com/docs/apis/6593c8ee912d20d3b5cd6c75 document
*/
func (a *ProjectAPIService) SearchOrgTaskFlowStatusesV3(ctx context.Context) ApiSearchOrgTaskFlowStatusesV3Request {
	return ApiSearchOrgTaskFlowStatusesV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchOrgTaskFlowStatusesV3Response
func (a *ProjectAPIService) SearchOrgTaskFlowStatusesV3Execute(r ApiSearchOrgTaskFlowStatusesV3Request) (*SearchOrgTaskFlowStatusesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchOrgTaskFlowStatusesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/tfs/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tfIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tfIds", r.tfIds, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchProjectCustomFiledsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xTenantId *string
	scope *string
	q *string
	pageSize *int32
	pageToken *string
	sfcId *string
	cfIds *string
	instanceIds *string
	originalIds *string
	subtype *string
}

// 企业 ID
func (r ApiSearchProjectCustomFiledsV3Request) XTenantId(xTenantId string) ApiSearchProjectCustomFiledsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 根据不同应用场景获取字段, 应用场景可选值： - taskTableHeader  获取任务列表视图表头可用字段 - searcherAdd  获取筛选器可用字段 - taskExportHeader  获取任务导出可用字段 - sfcAdd  获取任务类型可添加字段 - kanbanCardAdd  获取看板卡片可用字段 - all  获取所有字段（默认） 
func (r ApiSearchProjectCustomFiledsV3Request) Scope(scope string) ApiSearchProjectCustomFiledsV3Request {
	r.scope = &scope
	return r
}

// 过滤字段名字
func (r ApiSearchProjectCustomFiledsV3Request) Q(q string) ApiSearchProjectCustomFiledsV3Request {
	r.q = &q
	return r
}

// 每页长度
func (r ApiSearchProjectCustomFiledsV3Request) PageSize(pageSize int32) ApiSearchProjectCustomFiledsV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchProjectCustomFiledsV3Request) PageToken(pageToken string) ApiSearchProjectCustomFiledsV3Request {
	r.pageToken = &pageToken
	return r
}

// 任务类型ID，获取该sfcId中的字段，需配合scope使用: taskTableHeader, searcherAdd, kanbanCardAdd 
func (r ApiSearchProjectCustomFiledsV3Request) SfcId(sfcId string) ApiSearchProjectCustomFiledsV3Request {
	r.sfcId = &sfcId
	return r
}

// 自定义字段ID集合，逗号组合
func (r ApiSearchProjectCustomFiledsV3Request) CfIds(cfIds string) ApiSearchProjectCustomFiledsV3Request {
	r.cfIds = &cfIds
	return r
}

// 字段InstanceId集合，用逗号组合
func (r ApiSearchProjectCustomFiledsV3Request) InstanceIds(instanceIds string) ApiSearchProjectCustomFiledsV3Request {
	r.instanceIds = &instanceIds
	return r
}

// 字段OriginalIds集合，用逗号组合
func (r ApiSearchProjectCustomFiledsV3Request) OriginalIds(originalIds string) ApiSearchProjectCustomFiledsV3Request {
	r.originalIds = &originalIds
	return r
}

// 任务类型 story | bug
func (r ApiSearchProjectCustomFiledsV3Request) Subtype(subtype string) ApiSearchProjectCustomFiledsV3Request {
	r.subtype = &subtype
	return r
}

func (r ApiSearchProjectCustomFiledsV3Request) Execute() (*SearchProjectCustomFiledsV3Response, *http.Response, error) {
	return r.ApiService.SearchProjectCustomFiledsV3Execute(r)
}

/*
SearchProjectCustomFiledsV3 搜索项目自定义字段

搜索项目自定义字段

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiSearchProjectCustomFiledsV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a497f6 document
*/
func (a *ProjectAPIService) SearchProjectCustomFiledsV3(ctx context.Context, projectId string) ApiSearchProjectCustomFiledsV3Request {
	return ApiSearchProjectCustomFiledsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return SearchProjectCustomFiledsV3Response
func (a *ProjectAPIService) SearchProjectCustomFiledsV3Execute(r ApiSearchProjectCustomFiledsV3Request) (*SearchProjectCustomFiledsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchProjectCustomFiledsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/customfield/search"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.sfcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sfcId", r.sfcId, "")
	}
	if r.cfIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cfIds", r.cfIds, "")
	}
	if r.instanceIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceIds", r.instanceIds, "")
	}
	if r.originalIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "originalIds", r.originalIds, "")
	}
	if r.subtype != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtype", r.subtype, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchProjectTagsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xTenantId *string
	q *string
	pageSize *int32
	pageToken *string
	tagIds *string
}

// 企业 ID
func (r ApiSearchProjectTagsV3Request) XTenantId(xTenantId string) ApiSearchProjectTagsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 模糊查询标签名字
func (r ApiSearchProjectTagsV3Request) Q(q string) ApiSearchProjectTagsV3Request {
	r.q = &q
	return r
}

// 每页长度
func (r ApiSearchProjectTagsV3Request) PageSize(pageSize int32) ApiSearchProjectTagsV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchProjectTagsV3Request) PageToken(pageToken string) ApiSearchProjectTagsV3Request {
	r.pageToken = &pageToken
	return r
}

// 标签ID集合，逗号组合
func (r ApiSearchProjectTagsV3Request) TagIds(tagIds string) ApiSearchProjectTagsV3Request {
	r.tagIds = &tagIds
	return r
}

func (r ApiSearchProjectTagsV3Request) Execute() (*SearchProjectTagsV3Response, *http.Response, error) {
	return r.ApiService.SearchProjectTagsV3Execute(r)
}

/*
SearchProjectTagsV3 搜索项目标签

搜索项目标签

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiSearchProjectTagsV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49e83 document
*/
func (a *ProjectAPIService) SearchProjectTagsV3(ctx context.Context, projectId string) ApiSearchProjectTagsV3Request {
	return ApiSearchProjectTagsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return SearchProjectTagsV3Response
func (a *ProjectAPIService) SearchProjectTagsV3Execute(r ApiSearchProjectTagsV3Request) (*SearchProjectTagsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchProjectTagsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/tag/search"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.tagIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tagIds", r.tagIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchProjectTasksV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	q *string
	includeArchived *bool
	pageToken *string
	pageSize *int32
}

// 查询人ID, 有些查询语句依赖查询人
func (r ApiSearchProjectTasksV3Request) XOperatorId(xOperatorId string) ApiSearchProjectTasksV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiSearchProjectTasksV3Request) XTenantId(xTenantId string) ApiSearchProjectTasksV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 查询语句 参考[TQL查询文档](doc.fullPath&#x3D;/tql-doc)
func (r ApiSearchProjectTasksV3Request) Q(q string) ApiSearchProjectTasksV3Request {
	r.q = &q
	return r
}

// 是否包含已归档任务, 默认 false
func (r ApiSearchProjectTasksV3Request) IncludeArchived(includeArchived bool) ApiSearchProjectTasksV3Request {
	r.includeArchived = &includeArchived
	return r
}

// 分页标
func (r ApiSearchProjectTasksV3Request) PageToken(pageToken string) ApiSearchProjectTasksV3Request {
	r.pageToken = &pageToken
	return r
}

// 每页任务数量，默认为10
func (r ApiSearchProjectTasksV3Request) PageSize(pageSize int32) ApiSearchProjectTasksV3Request {
	r.pageSize = &pageSize
	return r
}

func (r ApiSearchProjectTasksV3Request) Execute() (*SearchProjectTasksV3Response, *http.Response, error) {
	return r.ApiService.SearchProjectTasksV3Execute(r)
}

/*
SearchProjectTasksV3 查询项目任务

查询项目任务

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiSearchProjectTasksV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49ec1 document
*/
func (a *ProjectAPIService) SearchProjectTasksV3(ctx context.Context, projectId string) ApiSearchProjectTasksV3Request {
	return ApiSearchProjectTasksV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return SearchProjectTasksV3Response
func (a *ProjectAPIService) SearchProjectTasksV3Execute(r ApiSearchProjectTasksV3Request) (*SearchProjectTasksV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchProjectTasksV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/task/query"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.includeArchived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeArchived", r.includeArchived, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchProjectTemplatesV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	xOperatorId *string
	xTenantId *string
	ptIds *string
	projectIds *string
	includeDraft *bool
	q *string
	pageSize *int32
	pageToken *string
}

// 操作人ID，如果传递操作人，以操作人视角权限查询模板
func (r ApiSearchProjectTemplatesV3Request) XOperatorId(xOperatorId string) ApiSearchProjectTemplatesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiSearchProjectTemplatesV3Request) XTenantId(xTenantId string) ApiSearchProjectTemplatesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 模板ID集合，逗号组合
func (r ApiSearchProjectTemplatesV3Request) PtIds(ptIds string) ApiSearchProjectTemplatesV3Request {
	r.ptIds = &ptIds
	return r
}

// 模板对应的项目ID集合，逗号组合，对应项目模型上的 sourceId
func (r ApiSearchProjectTemplatesV3Request) ProjectIds(projectIds string) ApiSearchProjectTemplatesV3Request {
	r.projectIds = &projectIds
	return r
}

// 是否包含草稿态模板
func (r ApiSearchProjectTemplatesV3Request) IncludeDraft(includeDraft bool) ApiSearchProjectTemplatesV3Request {
	r.includeDraft = &includeDraft
	return r
}

// 模糊查询名字
func (r ApiSearchProjectTemplatesV3Request) Q(q string) ApiSearchProjectTemplatesV3Request {
	r.q = &q
	return r
}

// 分页长度
func (r ApiSearchProjectTemplatesV3Request) PageSize(pageSize int32) ApiSearchProjectTemplatesV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchProjectTemplatesV3Request) PageToken(pageToken string) ApiSearchProjectTemplatesV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiSearchProjectTemplatesV3Request) Execute() (*SearchProjectTemplatesV3Response, *http.Response, error) {
	return r.ApiService.SearchProjectTemplatesV3Execute(r)
}

/*
SearchProjectTemplatesV3 搜索企业项目模板

搜索企业项目模板

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchProjectTemplatesV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a30f document
*/
func (a *ProjectAPIService) SearchProjectTemplatesV3(ctx context.Context) ApiSearchProjectTemplatesV3Request {
	return ApiSearchProjectTemplatesV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchProjectTemplatesV3Response
func (a *ProjectAPIService) SearchProjectTemplatesV3Execute(r ApiSearchProjectTemplatesV3Request) (*SearchProjectTemplatesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchProjectTemplatesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-template/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ptIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ptIds", r.ptIds, "")
	}
	if r.projectIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectIds", r.projectIds, "")
	}
	if r.includeDraft != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeDraft", r.includeDraft, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchProjectsTQLRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	xTenantId *string
	tql *string
	pageSize *int32
	pageToken *string
	includeTemplate *bool
}

// 企业 ID
func (r ApiSearchProjectsTQLRequest) XTenantId(xTenantId string) ApiSearchProjectsTQLRequest {
	r.xTenantId = &xTenantId
	return r
}

// 项目搜索TQL语句
func (r ApiSearchProjectsTQLRequest) Tql(tql string) ApiSearchProjectsTQLRequest {
	r.tql = &tql
	return r
}

// 分页大小, 默认 10
func (r ApiSearchProjectsTQLRequest) PageSize(pageSize int32) ApiSearchProjectsTQLRequest {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchProjectsTQLRequest) PageToken(pageToken string) ApiSearchProjectsTQLRequest {
	r.pageToken = &pageToken
	return r
}

// 是否包含模板项目，默认 false
func (r ApiSearchProjectsTQLRequest) IncludeTemplate(includeTemplate bool) ApiSearchProjectsTQLRequest {
	r.includeTemplate = &includeTemplate
	return r
}

func (r ApiSearchProjectsTQLRequest) Execute() (*SearchProjectsTQLResponse, *http.Response, error) {
	return r.ApiService.SearchProjectsTQLExecute(r)
}

/*
SearchProjectsTQL 通过TQL搜索项目

通过TQL搜索项目

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchProjectsTQLRequest

  @link https://open.teambition.com/docs/apis/6728570f912d20d3b53ed2ea document
*/
func (a *ProjectAPIService) SearchProjectsTQL(ctx context.Context) ApiSearchProjectsTQLRequest {
	return ApiSearchProjectsTQLRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchProjectsTQLResponse
func (a *ProjectAPIService) SearchProjectsTQLExecute(r ApiSearchProjectsTQLRequest) (*SearchProjectsTQLResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchProjectsTQLResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tql != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tql", r.tql, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.includeTemplate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTemplate", r.includeTemplate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchSprintsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xTenantId *string
	q *string
	pageSize *int32
	pageToken *string
	sprintIds *string
}

// 企业 ID
func (r ApiSearchSprintsV3Request) XTenantId(xTenantId string) ApiSearchSprintsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 迭代名字
func (r ApiSearchSprintsV3Request) Q(q string) ApiSearchSprintsV3Request {
	r.q = &q
	return r
}

// 每页长度
func (r ApiSearchSprintsV3Request) PageSize(pageSize int32) ApiSearchSprintsV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchSprintsV3Request) PageToken(pageToken string) ApiSearchSprintsV3Request {
	r.pageToken = &pageToken
	return r
}

// 迭代 ID 集合，逗号组合
func (r ApiSearchSprintsV3Request) SprintIds(sprintIds string) ApiSearchSprintsV3Request {
	r.sprintIds = &sprintIds
	return r
}

func (r ApiSearchSprintsV3Request) Execute() (*SearchSprintsV3Response, *http.Response, error) {
	return r.ApiService.SearchSprintsV3Execute(r)
}

/*
SearchSprintsV3 迭代搜索

迭代搜索

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiSearchSprintsV3Request

  @link https://open.teambition.com/docs/apis/6397f1dc912d20d3b572dc9d document
*/
func (a *ProjectAPIService) SearchSprintsV3(ctx context.Context, projectId string) ApiSearchSprintsV3Request {
	return ApiSearchSprintsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return SearchSprintsV3Response
func (a *ProjectAPIService) SearchSprintsV3Execute(r ApiSearchSprintsV3Request) (*SearchSprintsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchSprintsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/sprint/search"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.sprintIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sprintIds", r.sprintIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchStagesV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xTenantId *string
	tasklistId *string
	q *string
	pageSize *int32
	pageToken *string
	stageIds *string
}

// 企业 ID
func (r ApiSearchStagesV3Request) XTenantId(xTenantId string) ApiSearchStagesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 项目分组 ID
func (r ApiSearchStagesV3Request) TasklistId(tasklistId string) ApiSearchStagesV3Request {
	r.tasklistId = &tasklistId
	return r
}

// 任务列表名字
func (r ApiSearchStagesV3Request) Q(q string) ApiSearchStagesV3Request {
	r.q = &q
	return r
}

// 每页长度
func (r ApiSearchStagesV3Request) PageSize(pageSize int32) ApiSearchStagesV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchStagesV3Request) PageToken(pageToken string) ApiSearchStagesV3Request {
	r.pageToken = &pageToken
	return r
}

// 任务列表 ID 集合，逗号组合
func (r ApiSearchStagesV3Request) StageIds(stageIds string) ApiSearchStagesV3Request {
	r.stageIds = &stageIds
	return r
}

func (r ApiSearchStagesV3Request) Execute() (*SearchStagesV3Response, *http.Response, error) {
	return r.ApiService.SearchStagesV3Execute(r)
}

/*
SearchStagesV3 搜索任务列表

搜索任务列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiSearchStagesV3Request

  @link https://open.teambition.com/docs/apis/6363bcfb912d20d3b56fb13f document
*/
func (a *ProjectAPIService) SearchStagesV3(ctx context.Context, projectId string) ApiSearchStagesV3Request {
	return ApiSearchStagesV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return SearchStagesV3Response
func (a *ProjectAPIService) SearchStagesV3Execute(r ApiSearchStagesV3Request) (*SearchStagesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchStagesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/stage/search"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tasklistId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tasklistId", r.tasklistId, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.stageIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stageIds", r.stageIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchTaskGroupsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	q *string
	pageSize *int32
	pageToken *string
	tasklistIds *string
}

// 操作者ID
func (r ApiSearchTaskGroupsV3Request) XOperatorId(xOperatorId string) ApiSearchTaskGroupsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiSearchTaskGroupsV3Request) XTenantId(xTenantId string) ApiSearchTaskGroupsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 模糊任务分组名字
func (r ApiSearchTaskGroupsV3Request) Q(q string) ApiSearchTaskGroupsV3Request {
	r.q = &q
	return r
}

// 每页长度
func (r ApiSearchTaskGroupsV3Request) PageSize(pageSize int32) ApiSearchTaskGroupsV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchTaskGroupsV3Request) PageToken(pageToken string) ApiSearchTaskGroupsV3Request {
	r.pageToken = &pageToken
	return r
}

// 任务分组ID集合，逗号组合
func (r ApiSearchTaskGroupsV3Request) TasklistIds(tasklistIds string) ApiSearchTaskGroupsV3Request {
	r.tasklistIds = &tasklistIds
	return r
}

func (r ApiSearchTaskGroupsV3Request) Execute() (*SearchTaskGroupsV3Response, *http.Response, error) {
	return r.ApiService.SearchTaskGroupsV3Execute(r)
}

/*
SearchTaskGroupsV3 搜索任务分组

搜索任务分组

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiSearchTaskGroupsV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a17d document
*/
func (a *ProjectAPIService) SearchTaskGroupsV3(ctx context.Context, projectId string) ApiSearchTaskGroupsV3Request {
	return ApiSearchTaskGroupsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return SearchTaskGroupsV3Response
func (a *ProjectAPIService) SearchTaskGroupsV3Execute(r ApiSearchTaskGroupsV3Request) (*SearchTaskGroupsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchTaskGroupsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/tasklist/search"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.tasklistIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tasklistIds", r.tasklistIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchTaskflowNodesRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	taskflowId *string
	q *string
	nodeIds *string
	pageSize *float32
	pageToken *string
}

// 操作者ID
func (r ApiSearchTaskflowNodesRequest) XOperatorId(xOperatorId string) ApiSearchTaskflowNodesRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiSearchTaskflowNodesRequest) XTenantId(xTenantId string) ApiSearchTaskflowNodesRequest {
	r.xTenantId = &xTenantId
	return r
}

// 工作流ID
func (r ApiSearchTaskflowNodesRequest) TaskflowId(taskflowId string) ApiSearchTaskflowNodesRequest {
	r.taskflowId = &taskflowId
	return r
}

// 模糊搜索字符串
func (r ApiSearchTaskflowNodesRequest) Q(q string) ApiSearchTaskflowNodesRequest {
	r.q = &q
	return r
}

// 节点ID列表，逗号分隔
func (r ApiSearchTaskflowNodesRequest) NodeIds(nodeIds string) ApiSearchTaskflowNodesRequest {
	r.nodeIds = &nodeIds
	return r
}

// 每页长度
func (r ApiSearchTaskflowNodesRequest) PageSize(pageSize float32) ApiSearchTaskflowNodesRequest {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchTaskflowNodesRequest) PageToken(pageToken string) ApiSearchTaskflowNodesRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiSearchTaskflowNodesRequest) Execute() (*SearchTaskflowNodesResponse, *http.Response, error) {
	return r.ApiService.SearchTaskflowNodesExecute(r)
}

/*
SearchTaskflowNodes 搜索项目工作流节点

搜索项目工作流节点

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiSearchTaskflowNodesRequest

  @link https://open.teambition.com/docs/apis/682c1944912d20d3b5a299b2 document
*/
func (a *ProjectAPIService) SearchTaskflowNodes(ctx context.Context, projectId string) ApiSearchTaskflowNodesRequest {
	return ApiSearchTaskflowNodesRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return SearchTaskflowNodesResponse
func (a *ProjectAPIService) SearchTaskflowNodesExecute(r ApiSearchTaskflowNodesRequest) (*SearchTaskflowNodesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchTaskflowNodesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/taskflow/node/search"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.taskflowId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskflowId", r.taskflowId, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.nodeIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nodeIds", r.nodeIds, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchTaskflowStatusesV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	q *string
	pageSize *int32
	pageToken *string
	tfIds *string
	tfsIds *string
}

// 操作者ID
func (r ApiSearchTaskflowStatusesV3Request) XOperatorId(xOperatorId string) ApiSearchTaskflowStatusesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiSearchTaskflowStatusesV3Request) XTenantId(xTenantId string) ApiSearchTaskflowStatusesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 模糊查询工作流状态名字
func (r ApiSearchTaskflowStatusesV3Request) Q(q string) ApiSearchTaskflowStatusesV3Request {
	r.q = &q
	return r
}

// 每页长度
func (r ApiSearchTaskflowStatusesV3Request) PageSize(pageSize int32) ApiSearchTaskflowStatusesV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchTaskflowStatusesV3Request) PageToken(pageToken string) ApiSearchTaskflowStatusesV3Request {
	r.pageToken = &pageToken
	return r
}

// 工作流ID集合，逗号组合
func (r ApiSearchTaskflowStatusesV3Request) TfIds(tfIds string) ApiSearchTaskflowStatusesV3Request {
	r.tfIds = &tfIds
	return r
}

// 工作流状态ID集合，逗号组合
func (r ApiSearchTaskflowStatusesV3Request) TfsIds(tfsIds string) ApiSearchTaskflowStatusesV3Request {
	r.tfsIds = &tfsIds
	return r
}

func (r ApiSearchTaskflowStatusesV3Request) Execute() (*SearchTaskflowStatusesV3Response, *http.Response, error) {
	return r.ApiService.SearchTaskflowStatusesV3Execute(r)
}

/*
SearchTaskflowStatusesV3 搜索项目工作流状态

搜索项目工作流状态

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiSearchTaskflowStatusesV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a142 document
*/
func (a *ProjectAPIService) SearchTaskflowStatusesV3(ctx context.Context, projectId string) ApiSearchTaskflowStatusesV3Request {
	return ApiSearchTaskflowStatusesV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return SearchTaskflowStatusesV3Response
func (a *ProjectAPIService) SearchTaskflowStatusesV3Execute(r ApiSearchTaskflowStatusesV3Request) (*SearchTaskflowStatusesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchTaskflowStatusesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/taskflowstatus/search"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.tfIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tfIds", r.tfIds, "")
	}
	if r.tfsIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tfsIds", r.tfsIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchTaskflowsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	q *string
	pageSize *int32
	pageToken *string
	tfIds *string
}

// 操作者ID
func (r ApiSearchTaskflowsV3Request) XOperatorId(xOperatorId string) ApiSearchTaskflowsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiSearchTaskflowsV3Request) XTenantId(xTenantId string) ApiSearchTaskflowsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 模糊查询工作流名字
func (r ApiSearchTaskflowsV3Request) Q(q string) ApiSearchTaskflowsV3Request {
	r.q = &q
	return r
}

// 每页长度
func (r ApiSearchTaskflowsV3Request) PageSize(pageSize int32) ApiSearchTaskflowsV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchTaskflowsV3Request) PageToken(pageToken string) ApiSearchTaskflowsV3Request {
	r.pageToken = &pageToken
	return r
}

// 工作流ID集合，逗号组合
func (r ApiSearchTaskflowsV3Request) TfIds(tfIds string) ApiSearchTaskflowsV3Request {
	r.tfIds = &tfIds
	return r
}

func (r ApiSearchTaskflowsV3Request) Execute() (*SearchTaskflowsV3Response, *http.Response, error) {
	return r.ApiService.SearchTaskflowsV3Execute(r)
}

/*
SearchTaskflowsV3 搜索项目工作流

搜索项目工作流

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiSearchTaskflowsV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49fc3 document
*/
func (a *ProjectAPIService) SearchTaskflowsV3(ctx context.Context, projectId string) ApiSearchTaskflowsV3Request {
	return ApiSearchTaskflowsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return SearchTaskflowsV3Response
func (a *ProjectAPIService) SearchTaskflowsV3Execute(r ApiSearchTaskflowsV3Request) (*SearchTaskflowsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchTaskflowsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/taskflow/search"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.tfIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tfIds", r.tfIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStarProjectRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	xOperatorId *string
	xTenantId *string
	deleteProjectV3ResponseResult *DeleteProjectV3ResponseResult
}

// 操作者 ID
func (r ApiStarProjectRequest) XOperatorId(xOperatorId string) ApiStarProjectRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiStarProjectRequest) XTenantId(xTenantId string) ApiStarProjectRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiStarProjectRequest) DeleteProjectV3ResponseResult(deleteProjectV3ResponseResult DeleteProjectV3ResponseResult) ApiStarProjectRequest {
	r.deleteProjectV3ResponseResult = &deleteProjectV3ResponseResult
	return r
}

func (r ApiStarProjectRequest) Execute() (*StarProjectResponse, *http.Response, error) {
	return r.ApiService.StarProjectExecute(r)
}

/*
StarProject 创建用户星标项目

创建用户星标项目

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiStarProjectRequest

  @link https://open.teambition.com/docs/apis/66e00a73912d20d3b5a159e2 document
*/
func (a *ProjectAPIService) StarProject(ctx context.Context) ApiStarProjectRequest {
	return ApiStarProjectRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return StarProjectResponse
func (a *ProjectAPIService) StarProjectExecute(r ApiStarProjectRequest) (*StarProjectResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StarProjectResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-star/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.deleteProjectV3ResponseResult
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStartSprintV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	sprintId string
	xOperatorId *string
	xTenantId *string
	startSprintV3Request *StartSprintV3Request
}

// 操作者ID
func (r ApiStartSprintV3Request) XOperatorId(xOperatorId string) ApiStartSprintV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiStartSprintV3Request) XTenantId(xTenantId string) ApiStartSprintV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiStartSprintV3Request) StartSprintV3Request(startSprintV3Request StartSprintV3Request) ApiStartSprintV3Request {
	r.startSprintV3Request = &startSprintV3Request
	return r
}

func (r ApiStartSprintV3Request) Execute() (*StartSprintV3Response, *http.Response, error) {
	return r.ApiService.StartSprintV3Execute(r)
}

/*
StartSprintV3 开始迭代

开始迭代

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @param sprintId 迭代 ID
 @return ApiStartSprintV3Request

  @link https://open.teambition.com/docs/apis/63a08189912d20d3b56b9593 document
*/
func (a *ProjectAPIService) StartSprintV3(ctx context.Context, projectId string, sprintId string) ApiStartSprintV3Request {
	return ApiStartSprintV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		sprintId: sprintId,
	}
}

// Execute executes the request
//  @return StartSprintV3Response
func (a *ProjectAPIService) StartSprintV3Execute(r ApiStartSprintV3Request) (*StartSprintV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StartSprintV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/sprint/{sprintId}/start"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sprintId"+"}", url.PathEscape(parameterValueToString(r.sprintId, "sprintId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.startSprintV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSuspendProjectV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
}

// 操作者ID
func (r ApiSuspendProjectV3Request) XOperatorId(xOperatorId string) ApiSuspendProjectV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiSuspendProjectV3Request) XTenantId(xTenantId string) ApiSuspendProjectV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiSuspendProjectV3Request) Execute() (*SuspendProjectV3Response, *http.Response, error) {
	return r.ApiService.SuspendProjectV3Execute(r)
}

/*
SuspendProjectV3 归档项目

归档项目

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiSuspendProjectV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49e41 document
*/
func (a *ProjectAPIService) SuspendProjectV3(ctx context.Context, projectId string) ApiSuspendProjectV3Request {
	return ApiSuspendProjectV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return SuspendProjectV3Response
func (a *ProjectAPIService) SuspendProjectV3Execute(r ApiSuspendProjectV3Request) (*SuspendProjectV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuspendProjectV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/suspend"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUninstallProjectAppV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	appId string
	xOperatorId *string
	xTenantId *string
	body *map[string]interface{}
}

// 操作者ID
func (r ApiUninstallProjectAppV3Request) XOperatorId(xOperatorId string) ApiUninstallProjectAppV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUninstallProjectAppV3Request) XTenantId(xTenantId string) ApiUninstallProjectAppV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUninstallProjectAppV3Request) Body(body map[string]interface{}) ApiUninstallProjectAppV3Request {
	r.body = &body
	return r
}

func (r ApiUninstallProjectAppV3Request) Execute() (*UninstallProjectAppV3Response, *http.Response, error) {
	return r.ApiService.UninstallProjectAppV3Execute(r)
}

/*
UninstallProjectAppV3 删除项目应用

删除项目应用

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param appId 应用ID
 @return ApiUninstallProjectAppV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a49691 document
*/
func (a *ProjectAPIService) UninstallProjectAppV3(ctx context.Context, projectId string, appId string) ApiUninstallProjectAppV3Request {
	return ApiUninstallProjectAppV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		appId: appId,
	}
}

// Execute executes the request
//  @return UninstallProjectAppV3Response
func (a *ProjectAPIService) UninstallProjectAppV3Execute(r ApiUninstallProjectAppV3Request) (*UninstallProjectAppV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UninstallProjectAppV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/application/{appId}/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateOrgProjectRoleV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	roleId string
	xOperatorId *string
	xTenantId *string
	updateOrgProjectRoleV3Request *UpdateOrgProjectRoleV3Request
}

// 修改用户ID
func (r ApiUpdateOrgProjectRoleV3Request) XOperatorId(xOperatorId string) ApiUpdateOrgProjectRoleV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateOrgProjectRoleV3Request) XTenantId(xTenantId string) ApiUpdateOrgProjectRoleV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateOrgProjectRoleV3Request) UpdateOrgProjectRoleV3Request(updateOrgProjectRoleV3Request UpdateOrgProjectRoleV3Request) ApiUpdateOrgProjectRoleV3Request {
	r.updateOrgProjectRoleV3Request = &updateOrgProjectRoleV3Request
	return r
}

func (r ApiUpdateOrgProjectRoleV3Request) Execute() (*CreateOrgProjectRoleV3Response, *http.Response, error) {
	return r.ApiService.UpdateOrgProjectRoleV3Execute(r)
}

/*
UpdateOrgProjectRoleV3 更新企业后台项目角色

更新企业后台项目角色

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roleId 项目角色ID
 @return ApiUpdateOrgProjectRoleV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a40e document
*/
func (a *ProjectAPIService) UpdateOrgProjectRoleV3(ctx context.Context, roleId string) ApiUpdateOrgProjectRoleV3Request {
	return ApiUpdateOrgProjectRoleV3Request{
		ApiService: a,
		ctx: ctx,
		roleId: roleId,
	}
}

// Execute executes the request
//  @return CreateOrgProjectRoleV3Response
func (a *ProjectAPIService) UpdateOrgProjectRoleV3Execute(r ApiUpdateOrgProjectRoleV3Request) (*CreateOrgProjectRoleV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateOrgProjectRoleV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-role/{roleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"roleId"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateOrgProjectRoleV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateProjectCodeRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	updateProjectCodeRequest *UpdateProjectCodeRequest
}

// 操作人ID
func (r ApiUpdateProjectCodeRequest) XOperatorId(xOperatorId string) ApiUpdateProjectCodeRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateProjectCodeRequest) XTenantId(xTenantId string) ApiUpdateProjectCodeRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateProjectCodeRequest) UpdateProjectCodeRequest(updateProjectCodeRequest UpdateProjectCodeRequest) ApiUpdateProjectCodeRequest {
	r.updateProjectCodeRequest = &updateProjectCodeRequest
	return r
}

func (r ApiUpdateProjectCodeRequest) Execute() (*UpdateProjectCodeResponse, *http.Response, error) {
	return r.ApiService.UpdateProjectCodeExecute(r)
}

/*
UpdateProjectCode 更新项目编号

更新项目编号

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiUpdateProjectCodeRequest

  @link https://open.teambition.com/docs/apis/6808506d912d20d3b5bfe486 document
*/
func (a *ProjectAPIService) UpdateProjectCode(ctx context.Context, projectId string) ApiUpdateProjectCodeRequest {
	return ApiUpdateProjectCodeRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return UpdateProjectCodeResponse
func (a *ProjectAPIService) UpdateProjectCodeExecute(r ApiUpdateProjectCodeRequest) (*UpdateProjectCodeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateProjectCodeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/unique-id-prefix"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateProjectCodeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateProjectCustomFieldPositionRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	customfieldLinkId string
	xTenantId *string
	xOperatorId *string
	updateProjectCustomFieldPositionRequest *UpdateProjectCustomFieldPositionRequest
}

// 租户 ID
func (r ApiUpdateProjectCustomFieldPositionRequest) XTenantId(xTenantId string) ApiUpdateProjectCustomFieldPositionRequest {
	r.xTenantId = &xTenantId
	return r
}

// 操作人ID
func (r ApiUpdateProjectCustomFieldPositionRequest) XOperatorId(xOperatorId string) ApiUpdateProjectCustomFieldPositionRequest {
	r.xOperatorId = &xOperatorId
	return r
}

func (r ApiUpdateProjectCustomFieldPositionRequest) UpdateProjectCustomFieldPositionRequest(updateProjectCustomFieldPositionRequest UpdateProjectCustomFieldPositionRequest) ApiUpdateProjectCustomFieldPositionRequest {
	r.updateProjectCustomFieldPositionRequest = &updateProjectCustomFieldPositionRequest
	return r
}

func (r ApiUpdateProjectCustomFieldPositionRequest) Execute() (*UpdateProjectCustomFieldPositionResponse, *http.Response, error) {
	return r.ApiService.UpdateProjectCustomFieldPositionExecute(r)
}

/*
UpdateProjectCustomFieldPosition 更新项目概览自定义字段位置

更新项目概览自定义字段位置

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId
 @param customfieldLinkId 
 @return ApiUpdateProjectCustomFieldPositionRequest

  @link https://open.teambition.com/docs/apis/671f8c7fff36bd665c8084cb document
*/
func (a *ProjectAPIService) UpdateProjectCustomFieldPosition(ctx context.Context, projectId string, customfieldLinkId string) ApiUpdateProjectCustomFieldPositionRequest {
	return ApiUpdateProjectCustomFieldPositionRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		customfieldLinkId: customfieldLinkId,
	}
}

// Execute executes the request
//  @return UpdateProjectCustomFieldPositionResponse
func (a *ProjectAPIService) UpdateProjectCustomFieldPositionExecute(r ApiUpdateProjectCustomFieldPositionRequest) (*UpdateProjectCustomFieldPositionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateProjectCustomFieldPositionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/customfieldLink/{customfieldLinkId}/pos"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customfieldLinkId"+"}", url.PathEscape(parameterValueToString(r.customfieldLinkId, "customfieldLinkId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Operator-Id", r.xOperatorId, "")
	}
	// body params
	localVarPostBody = r.updateProjectCustomFieldPositionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateProjectGroupMemberPermissionV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectTagId string
	xOperatorId *string
	xTenantId *string
	updateProjectGroupMemberPermissionV3Request *UpdateProjectGroupMemberPermissionV3Request
}

// 操作者ID
func (r ApiUpdateProjectGroupMemberPermissionV3Request) XOperatorId(xOperatorId string) ApiUpdateProjectGroupMemberPermissionV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateProjectGroupMemberPermissionV3Request) XTenantId(xTenantId string) ApiUpdateProjectGroupMemberPermissionV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateProjectGroupMemberPermissionV3Request) UpdateProjectGroupMemberPermissionV3Request(updateProjectGroupMemberPermissionV3Request UpdateProjectGroupMemberPermissionV3Request) ApiUpdateProjectGroupMemberPermissionV3Request {
	r.updateProjectGroupMemberPermissionV3Request = &updateProjectGroupMemberPermissionV3Request
	return r
}

func (r ApiUpdateProjectGroupMemberPermissionV3Request) Execute() (*UpdateProjectGroupMemberPermissionV3Response, *http.Response, error) {
	return r.ApiService.UpdateProjectGroupMemberPermissionV3Execute(r)
}

/*
UpdateProjectGroupMemberPermissionV3 更新项目分组成员权限

更新项目分组成员权限

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectTagId 项目分组 ID
 @return ApiUpdateProjectGroupMemberPermissionV3Request

  @link https://open.teambition.com/docs/apis/664ffdf1912d20d3b5897b32 document
*/
func (a *ProjectAPIService) UpdateProjectGroupMemberPermissionV3(ctx context.Context, projectTagId string) ApiUpdateProjectGroupMemberPermissionV3Request {
	return ApiUpdateProjectGroupMemberPermissionV3Request{
		ApiService: a,
		ctx: ctx,
		projectTagId: projectTagId,
	}
}

// Execute executes the request
//  @return UpdateProjectGroupMemberPermissionV3Response
func (a *ProjectAPIService) UpdateProjectGroupMemberPermissionV3Execute(r ApiUpdateProjectGroupMemberPermissionV3Request) (*UpdateProjectGroupMemberPermissionV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateProjectGroupMemberPermissionV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-tag/{projectTagId}/member/permissions/update"
	localVarPath = strings.Replace(localVarPath, "{"+"projectTagId"+"}", url.PathEscape(parameterValueToString(r.projectTagId, "projectTagId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateProjectGroupMemberPermissionV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateProjectGroupV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectTagId string
	xOperatorId *string
	xTenantId *string
	updateProjectGroupV3Request *UpdateProjectGroupV3Request
}

// 操作者 ID
func (r ApiUpdateProjectGroupV3Request) XOperatorId(xOperatorId string) ApiUpdateProjectGroupV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateProjectGroupV3Request) XTenantId(xTenantId string) ApiUpdateProjectGroupV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateProjectGroupV3Request) UpdateProjectGroupV3Request(updateProjectGroupV3Request UpdateProjectGroupV3Request) ApiUpdateProjectGroupV3Request {
	r.updateProjectGroupV3Request = &updateProjectGroupV3Request
	return r
}

func (r ApiUpdateProjectGroupV3Request) Execute() (*UpdateProjectGroupV3Response, *http.Response, error) {
	return r.ApiService.UpdateProjectGroupV3Execute(r)
}

/*
UpdateProjectGroupV3 修改项目分组

修改项目分组

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectTagId 项目分组 ID
 @return ApiUpdateProjectGroupV3Request

  @link https://open.teambition.com/docs/apis/6363bcfb912d20d3b56fb36f document
*/
func (a *ProjectAPIService) UpdateProjectGroupV3(ctx context.Context, projectTagId string) ApiUpdateProjectGroupV3Request {
	return ApiUpdateProjectGroupV3Request{
		ApiService: a,
		ctx: ctx,
		projectTagId: projectTagId,
	}
}

// Execute executes the request
//  @return UpdateProjectGroupV3Response
func (a *ProjectAPIService) UpdateProjectGroupV3Execute(r ApiUpdateProjectGroupV3Request) (*UpdateProjectGroupV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateProjectGroupV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-tag/{projectTagId}"
	localVarPath = strings.Replace(localVarPath, "{"+"projectTagId"+"}", url.PathEscape(parameterValueToString(r.projectTagId, "projectTagId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateProjectGroupV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateProjectTableCustomFieldRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	updateProjectTableCustomFieldRequest *UpdateProjectTableCustomFieldRequest
}

// 
func (r ApiUpdateProjectTableCustomFieldRequest) XOperatorId(xOperatorId string) ApiUpdateProjectTableCustomFieldRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateProjectTableCustomFieldRequest) XTenantId(xTenantId string) ApiUpdateProjectTableCustomFieldRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateProjectTableCustomFieldRequest) UpdateProjectTableCustomFieldRequest(updateProjectTableCustomFieldRequest UpdateProjectTableCustomFieldRequest) ApiUpdateProjectTableCustomFieldRequest {
	r.updateProjectTableCustomFieldRequest = &updateProjectTableCustomFieldRequest
	return r
}

func (r ApiUpdateProjectTableCustomFieldRequest) Execute() (*UpdateProjectTableCustomFieldResponse, *http.Response, error) {
	return r.ApiService.UpdateProjectTableCustomFieldExecute(r)
}

/*
UpdateProjectTableCustomField 更新项目的表格自定义字段

更新项目的表格自定义字段

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiUpdateProjectTableCustomFieldRequest

  @link https://open.teambition.com/docs/apis/682c18da912d20d3b5a16eea document
*/
func (a *ProjectAPIService) UpdateProjectTableCustomField(ctx context.Context, projectId string) ApiUpdateProjectTableCustomFieldRequest {
	return ApiUpdateProjectTableCustomFieldRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return UpdateProjectTableCustomFieldResponse
func (a *ProjectAPIService) UpdateProjectTableCustomFieldExecute(r ApiUpdateProjectTableCustomFieldRequest) (*UpdateProjectTableCustomFieldResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateProjectTableCustomFieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/customfield/table"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateProjectTableCustomFieldRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateProjectTagsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	updateProjectTagsV3Request *UpdateProjectTagsV3Request
}

// 操作者ID
func (r ApiUpdateProjectTagsV3Request) XOperatorId(xOperatorId string) ApiUpdateProjectTagsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateProjectTagsV3Request) XTenantId(xTenantId string) ApiUpdateProjectTagsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateProjectTagsV3Request) UpdateProjectTagsV3Request(updateProjectTagsV3Request UpdateProjectTagsV3Request) ApiUpdateProjectTagsV3Request {
	r.updateProjectTagsV3Request = &updateProjectTagsV3Request
	return r
}

func (r ApiUpdateProjectTagsV3Request) Execute() (*UpdateProjectTagsV3Response, *http.Response, error) {
	return r.ApiService.UpdateProjectTagsV3Execute(r)
}

/*
UpdateProjectTagsV3 更新项目的项目分组

更新项目的项目分组

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiUpdateProjectTagsV3Request

  @link https://open.teambition.com/docs/apis/6321c6d0912d20d3b5a49a5c document
*/
func (a *ProjectAPIService) UpdateProjectTagsV3(ctx context.Context, projectId string) ApiUpdateProjectTagsV3Request {
	return ApiUpdateProjectTagsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return UpdateProjectTagsV3Response
func (a *ProjectAPIService) UpdateProjectTagsV3Execute(r ApiUpdateProjectTagsV3Request) (*UpdateProjectTagsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateProjectTagsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/project-tag"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateProjectTagsV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateProjectTemplateInfoV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectTemplateId string
	xOperatorId *string
	xTenantId *string
	updateProjectTemplateInfoV3Request *UpdateProjectTemplateInfoV3Request
}

// 操作者 ID
func (r ApiUpdateProjectTemplateInfoV3Request) XOperatorId(xOperatorId string) ApiUpdateProjectTemplateInfoV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateProjectTemplateInfoV3Request) XTenantId(xTenantId string) ApiUpdateProjectTemplateInfoV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateProjectTemplateInfoV3Request) UpdateProjectTemplateInfoV3Request(updateProjectTemplateInfoV3Request UpdateProjectTemplateInfoV3Request) ApiUpdateProjectTemplateInfoV3Request {
	r.updateProjectTemplateInfoV3Request = &updateProjectTemplateInfoV3Request
	return r
}

func (r ApiUpdateProjectTemplateInfoV3Request) Execute() (*UpdateProjectTemplateInfoV3Response, *http.Response, error) {
	return r.ApiService.UpdateProjectTemplateInfoV3Execute(r)
}

/*
UpdateProjectTemplateInfoV3 修改项目模板基本信息

修改项目模板基本信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectTemplateId 项目模板 ID
 @return ApiUpdateProjectTemplateInfoV3Request

  @link https://open.teambition.com/docs/apis/66693d97912d20d3b5ee5e9c document
*/
func (a *ProjectAPIService) UpdateProjectTemplateInfoV3(ctx context.Context, projectTemplateId string) ApiUpdateProjectTemplateInfoV3Request {
	return ApiUpdateProjectTemplateInfoV3Request{
		ApiService: a,
		ctx: ctx,
		projectTemplateId: projectTemplateId,
	}
}

// Execute executes the request
//  @return UpdateProjectTemplateInfoV3Response
func (a *ProjectAPIService) UpdateProjectTemplateInfoV3Execute(r ApiUpdateProjectTemplateInfoV3Request) (*UpdateProjectTemplateInfoV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateProjectTemplateInfoV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project-template/{projectTemplateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"projectTemplateId"+"}", url.PathEscape(parameterValueToString(r.projectTemplateId, "projectTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateProjectTemplateInfoV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateProjectV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	updateProjectV3Request *UpdateProjectV3Request
}

// 操作人ID
func (r ApiUpdateProjectV3Request) XOperatorId(xOperatorId string) ApiUpdateProjectV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateProjectV3Request) XTenantId(xTenantId string) ApiUpdateProjectV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateProjectV3Request) UpdateProjectV3Request(updateProjectV3Request UpdateProjectV3Request) ApiUpdateProjectV3Request {
	r.updateProjectV3Request = &updateProjectV3Request
	return r
}

func (r ApiUpdateProjectV3Request) Execute() (*UpdateProjectV3Response, *http.Response, error) {
	return r.ApiService.UpdateProjectV3Execute(r)
}

/*
UpdateProjectV3 更新项目

更新项目

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiUpdateProjectV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a287 document
*/
func (a *ProjectAPIService) UpdateProjectV3(ctx context.Context, projectId string) ApiUpdateProjectV3Request {
	return ApiUpdateProjectV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return UpdateProjectV3Response
func (a *ProjectAPIService) UpdateProjectV3Execute(r ApiUpdateProjectV3Request) (*UpdateProjectV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateProjectV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateProjectV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateRolePermissionsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	roleId string
	xOperatorId *string
	xTenantId *string
	updateRolePermissionsV3Request *UpdateRolePermissionsV3Request
}

// 操作者ID
func (r ApiUpdateRolePermissionsV3Request) XOperatorId(xOperatorId string) ApiUpdateRolePermissionsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateRolePermissionsV3Request) XTenantId(xTenantId string) ApiUpdateRolePermissionsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateRolePermissionsV3Request) UpdateRolePermissionsV3Request(updateRolePermissionsV3Request UpdateRolePermissionsV3Request) ApiUpdateRolePermissionsV3Request {
	r.updateRolePermissionsV3Request = &updateRolePermissionsV3Request
	return r
}

func (r ApiUpdateRolePermissionsV3Request) Execute() (*UpdateRolePermissionsV3Response, *http.Response, error) {
	return r.ApiService.UpdateRolePermissionsV3Execute(r)
}

/*
UpdateRolePermissionsV3 修改项目角色的权限项

修改项目角色的权限项

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param roleId 项目角色ID
 @return ApiUpdateRolePermissionsV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49bca document
*/
func (a *ProjectAPIService) UpdateRolePermissionsV3(ctx context.Context, projectId string, roleId string) ApiUpdateRolePermissionsV3Request {
	return ApiUpdateRolePermissionsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		roleId: roleId,
	}
}

// Execute executes the request
//  @return UpdateRolePermissionsV3Response
func (a *ProjectAPIService) UpdateRolePermissionsV3Execute(r ApiUpdateRolePermissionsV3Request) (*UpdateRolePermissionsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateRolePermissionsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/role/{roleId}/permission/update"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roleId"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateRolePermissionsV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSprintLabelV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	sprintId string
	xTenantId *string
	updateSprintLabelV3Request *UpdateSprintLabelV3Request
}

// 企业 ID
func (r ApiUpdateSprintLabelV3Request) XTenantId(xTenantId string) ApiUpdateSprintLabelV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateSprintLabelV3Request) UpdateSprintLabelV3Request(updateSprintLabelV3Request UpdateSprintLabelV3Request) ApiUpdateSprintLabelV3Request {
	r.updateSprintLabelV3Request = &updateSprintLabelV3Request
	return r
}

func (r ApiUpdateSprintLabelV3Request) Execute() (*UpdateSprintLabelV3Response, *http.Response, error) {
	return r.ApiService.UpdateSprintLabelV3Execute(r)
}

/*
UpdateSprintLabelV3 迭代标签更新

迭代标签更新

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @param sprintId 迭代 ID
 @return ApiUpdateSprintLabelV3Request

  @link https://open.teambition.com/docs/apis/63a08188912d20d3b56b93a6 document
*/
func (a *ProjectAPIService) UpdateSprintLabelV3(ctx context.Context, projectId string, sprintId string) ApiUpdateSprintLabelV3Request {
	return ApiUpdateSprintLabelV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		sprintId: sprintId,
	}
}

// Execute executes the request
//  @return UpdateSprintLabelV3Response
func (a *ProjectAPIService) UpdateSprintLabelV3Execute(r ApiUpdateSprintLabelV3Request) (*UpdateSprintLabelV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateSprintLabelV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/sprint/{sprintId}/label/update"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sprintId"+"}", url.PathEscape(parameterValueToString(r.sprintId, "sprintId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateSprintLabelV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSprintLockV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	sprintId string
	xOperatorId *string
	xTenantId *string
	updateSprintLockV3Request *UpdateSprintLockV3Request
}

// 操作者ID
func (r ApiUpdateSprintLockV3Request) XOperatorId(xOperatorId string) ApiUpdateSprintLockV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateSprintLockV3Request) XTenantId(xTenantId string) ApiUpdateSprintLockV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateSprintLockV3Request) UpdateSprintLockV3Request(updateSprintLockV3Request UpdateSprintLockV3Request) ApiUpdateSprintLockV3Request {
	r.updateSprintLockV3Request = &updateSprintLockV3Request
	return r
}

func (r ApiUpdateSprintLockV3Request) Execute() (*UpdateSprintLockV3Response, *http.Response, error) {
	return r.ApiService.UpdateSprintLockV3Execute(r)
}

/*
UpdateSprintLockV3 迭代锁定

迭代锁定

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @param sprintId 迭代ID
 @return ApiUpdateSprintLockV3Request

  @link https://open.teambition.com/docs/apis/63a08188912d20d3b56b940a document
*/
func (a *ProjectAPIService) UpdateSprintLockV3(ctx context.Context, projectId string, sprintId string) ApiUpdateSprintLockV3Request {
	return ApiUpdateSprintLockV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		sprintId: sprintId,
	}
}

// Execute executes the request
//  @return UpdateSprintLockV3Response
func (a *ProjectAPIService) UpdateSprintLockV3Execute(r ApiUpdateSprintLockV3Request) (*UpdateSprintLockV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateSprintLockV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/sprint/{sprintId}/lock/update"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sprintId"+"}", url.PathEscape(parameterValueToString(r.sprintId, "sprintId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateSprintLockV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSprintPayloadV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	sprintId string
	xTenantId *string
	updateSprintPayloadV3Request *UpdateSprintPayloadV3Request
}

// 企业 ID
func (r ApiUpdateSprintPayloadV3Request) XTenantId(xTenantId string) ApiUpdateSprintPayloadV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateSprintPayloadV3Request) UpdateSprintPayloadV3Request(updateSprintPayloadV3Request UpdateSprintPayloadV3Request) ApiUpdateSprintPayloadV3Request {
	r.updateSprintPayloadV3Request = &updateSprintPayloadV3Request
	return r
}

func (r ApiUpdateSprintPayloadV3Request) Execute() (*UpdateSprintPayloadV3Response, *http.Response, error) {
	return r.ApiService.UpdateSprintPayloadV3Execute(r)
}

/*
UpdateSprintPayloadV3 迭代操作限制更新

迭代操作限制更新

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @param sprintId 迭代 ID
 @return ApiUpdateSprintPayloadV3Request

  @link https://open.teambition.com/docs/apis/63a08188912d20d3b56b946d document
*/
func (a *ProjectAPIService) UpdateSprintPayloadV3(ctx context.Context, projectId string, sprintId string) ApiUpdateSprintPayloadV3Request {
	return ApiUpdateSprintPayloadV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		sprintId: sprintId,
	}
}

// Execute executes the request
//  @return UpdateSprintPayloadV3Response
func (a *ProjectAPIService) UpdateSprintPayloadV3Execute(r ApiUpdateSprintPayloadV3Request) (*UpdateSprintPayloadV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateSprintPayloadV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/sprint/{sprintId}/payload/update"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sprintId"+"}", url.PathEscape(parameterValueToString(r.sprintId, "sprintId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateSprintPayloadV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSprintV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	sprintId string
	xOperatorId *string
	xTenantId *string
	createSprintV3Request *CreateSprintV3Request
}

// 操作者ID
func (r ApiUpdateSprintV3Request) XOperatorId(xOperatorId string) ApiUpdateSprintV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateSprintV3Request) XTenantId(xTenantId string) ApiUpdateSprintV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateSprintV3Request) CreateSprintV3Request(createSprintV3Request CreateSprintV3Request) ApiUpdateSprintV3Request {
	r.createSprintV3Request = &createSprintV3Request
	return r
}

func (r ApiUpdateSprintV3Request) Execute() (*UpdateSprintV3Response, *http.Response, error) {
	return r.ApiService.UpdateSprintV3Execute(r)
}

/*
UpdateSprintV3 迭代更新

迭代更新

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @param sprintId 迭代 ID
 @return ApiUpdateSprintV3Request

  @link https://open.teambition.com/docs/apis/63a08189912d20d3b56b95f6 document
*/
func (a *ProjectAPIService) UpdateSprintV3(ctx context.Context, projectId string, sprintId string) ApiUpdateSprintV3Request {
	return ApiUpdateSprintV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		sprintId: sprintId,
	}
}

// Execute executes the request
//  @return UpdateSprintV3Response
func (a *ProjectAPIService) UpdateSprintV3Execute(r ApiUpdateSprintV3Request) (*UpdateSprintV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateSprintV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/sprint/{sprintId}/update"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sprintId"+"}", url.PathEscape(parameterValueToString(r.sprintId, "sprintId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createSprintV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateStatusCustomFieldV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	updateStatusCustomFieldV3Request *UpdateStatusCustomFieldV3Request
}

// 操作者ID
func (r ApiUpdateStatusCustomFieldV3Request) XOperatorId(xOperatorId string) ApiUpdateStatusCustomFieldV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateStatusCustomFieldV3Request) XTenantId(xTenantId string) ApiUpdateStatusCustomFieldV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateStatusCustomFieldV3Request) UpdateStatusCustomFieldV3Request(updateStatusCustomFieldV3Request UpdateStatusCustomFieldV3Request) ApiUpdateStatusCustomFieldV3Request {
	r.updateStatusCustomFieldV3Request = &updateStatusCustomFieldV3Request
	return r
}

func (r ApiUpdateStatusCustomFieldV3Request) Execute() (*DeleteOrgMemberResponse, *http.Response, error) {
	return r.ApiService.UpdateStatusCustomFieldV3Execute(r)
}

/*
UpdateStatusCustomFieldV3 更新项目概览自定义字段

更新项目概览自定义字段

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiUpdateStatusCustomFieldV3Request

  @link https://open.teambition.com/docs/apis/677b650d912d20d3b5330978 document
*/
func (a *ProjectAPIService) UpdateStatusCustomFieldV3(ctx context.Context, projectId string) ApiUpdateStatusCustomFieldV3Request {
	return ApiUpdateStatusCustomFieldV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return DeleteOrgMemberResponse
func (a *ProjectAPIService) UpdateStatusCustomFieldV3Execute(r ApiUpdateStatusCustomFieldV3Request) (*DeleteOrgMemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteOrgMemberResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/status/customfield/update"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateStatusCustomFieldV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateStatusExecutorsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	tfsId string
	xOperatorId *string
	xTenantId *string
	updateStatusExecutorsV3Request *UpdateStatusExecutorsV3Request
}

// 操作者ID
func (r ApiUpdateStatusExecutorsV3Request) XOperatorId(xOperatorId string) ApiUpdateStatusExecutorsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateStatusExecutorsV3Request) XTenantId(xTenantId string) ApiUpdateStatusExecutorsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateStatusExecutorsV3Request) UpdateStatusExecutorsV3Request(updateStatusExecutorsV3Request UpdateStatusExecutorsV3Request) ApiUpdateStatusExecutorsV3Request {
	r.updateStatusExecutorsV3Request = &updateStatusExecutorsV3Request
	return r
}

func (r ApiUpdateStatusExecutorsV3Request) Execute() (*UpdateStatusExecutorsV3Response, *http.Response, error) {
	return r.ApiService.UpdateStatusExecutorsV3Execute(r)
}

/*
UpdateStatusExecutorsV3 更新项目工作流状态流转角色列表

更新项目工作流状态流转角色列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param tfsId 工作流状态ID
 @return ApiUpdateStatusExecutorsV3Request

  @link https://open.teambition.com/docs/apis/6363bcfb912d20d3b56fb1ac document
*/
func (a *ProjectAPIService) UpdateStatusExecutorsV3(ctx context.Context, projectId string, tfsId string) ApiUpdateStatusExecutorsV3Request {
	return ApiUpdateStatusExecutorsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		tfsId: tfsId,
	}
}

// Execute executes the request
//  @return UpdateStatusExecutorsV3Response
func (a *ProjectAPIService) UpdateStatusExecutorsV3Execute(r ApiUpdateStatusExecutorsV3Request) (*UpdateStatusExecutorsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateStatusExecutorsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/taskflowstatus/{tfsId}/executor/update"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tfsId"+"}", url.PathEscape(parameterValueToString(r.tfsId, "tfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateStatusExecutorsV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateStatusFieldGroupsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	xTenantId *string
	updateStatusFieldGroupsV3Request *UpdateStatusFieldGroupsV3Request
}

// 企业 ID
func (r ApiUpdateStatusFieldGroupsV3Request) XTenantId(xTenantId string) ApiUpdateStatusFieldGroupsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateStatusFieldGroupsV3Request) UpdateStatusFieldGroupsV3Request(updateStatusFieldGroupsV3Request UpdateStatusFieldGroupsV3Request) ApiUpdateStatusFieldGroupsV3Request {
	r.updateStatusFieldGroupsV3Request = &updateStatusFieldGroupsV3Request
	return r
}

func (r ApiUpdateStatusFieldGroupsV3Request) Execute() (*ListStatusFieldGroupsV3Response, *http.Response, error) {
	return r.ApiService.UpdateStatusFieldGroupsV3Execute(r)
}

/*
UpdateStatusFieldGroupsV3 更新项目概览字段分组列表

更新项目概览字段分组列表，覆盖式全量更新

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiUpdateStatusFieldGroupsV3Request

  @link https://open.teambition.com/docs/apis/66e00a73912d20d3b5a15ba2 document
*/
func (a *ProjectAPIService) UpdateStatusFieldGroupsV3(ctx context.Context, projectId string) ApiUpdateStatusFieldGroupsV3Request {
	return ApiUpdateStatusFieldGroupsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ListStatusFieldGroupsV3Response
func (a *ProjectAPIService) UpdateStatusFieldGroupsV3Execute(r ApiUpdateStatusFieldGroupsV3Request) (*ListStatusFieldGroupsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListStatusFieldGroupsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/status/field-group"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateStatusFieldGroupsV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateStatusValidatorsV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	tfsId string
	xOperatorId *string
	xTenantId *string
	updateStatusValidatorsV3Request *UpdateStatusValidatorsV3Request
}

// 操作者ID
func (r ApiUpdateStatusValidatorsV3Request) XOperatorId(xOperatorId string) ApiUpdateStatusValidatorsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateStatusValidatorsV3Request) XTenantId(xTenantId string) ApiUpdateStatusValidatorsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateStatusValidatorsV3Request) UpdateStatusValidatorsV3Request(updateStatusValidatorsV3Request UpdateStatusValidatorsV3Request) ApiUpdateStatusValidatorsV3Request {
	r.updateStatusValidatorsV3Request = &updateStatusValidatorsV3Request
	return r
}

func (r ApiUpdateStatusValidatorsV3Request) Execute() (*UpdateStatusExecutorsV3Response, *http.Response, error) {
	return r.ApiService.UpdateStatusValidatorsV3Execute(r)
}

/*
UpdateStatusValidatorsV3 更新项目工作流状态流转校验列表

更新项目工作流状态流转校验列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param tfsId 工作流状态ID
 @return ApiUpdateStatusValidatorsV3Request

  @link https://open.teambition.com/docs/apis/6363bcfb912d20d3b56fb244 document
*/
func (a *ProjectAPIService) UpdateStatusValidatorsV3(ctx context.Context, projectId string, tfsId string) ApiUpdateStatusValidatorsV3Request {
	return ApiUpdateStatusValidatorsV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		tfsId: tfsId,
	}
}

// Execute executes the request
//  @return UpdateStatusExecutorsV3Response
func (a *ProjectAPIService) UpdateStatusValidatorsV3Execute(r ApiUpdateStatusValidatorsV3Request) (*UpdateStatusExecutorsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateStatusExecutorsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/taskflowstatus/{tfsId}/validator/update"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tfsId"+"}", url.PathEscape(parameterValueToString(r.tfsId, "tfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateStatusValidatorsV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskFlowRejectStatusV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	tfsId string
	xOperatorId *string
	xTenantId *string
	updateTaskFlowRejectStatusV3Request *UpdateTaskFlowRejectStatusV3Request
}

// 操作者ID
func (r ApiUpdateTaskFlowRejectStatusV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskFlowRejectStatusV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskFlowRejectStatusV3Request) XTenantId(xTenantId string) ApiUpdateTaskFlowRejectStatusV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskFlowRejectStatusV3Request) UpdateTaskFlowRejectStatusV3Request(updateTaskFlowRejectStatusV3Request UpdateTaskFlowRejectStatusV3Request) ApiUpdateTaskFlowRejectStatusV3Request {
	r.updateTaskFlowRejectStatusV3Request = &updateTaskFlowRejectStatusV3Request
	return r
}

func (r ApiUpdateTaskFlowRejectStatusV3Request) Execute() (*UpdateTaskFlowStatusTypeV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskFlowRejectStatusV3Execute(r)
}

/*
UpdateTaskFlowRejectStatusV3 更新项目工作流状态流转列表

更新项目工作流状态流转列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param tfsId 工作流状态ID
 @return ApiUpdateTaskFlowRejectStatusV3Request

  @link https://open.teambition.com/docs/apis/6437eaa1912d20d3b5685a00 document
*/
func (a *ProjectAPIService) UpdateTaskFlowRejectStatusV3(ctx context.Context, projectId string, tfsId string) ApiUpdateTaskFlowRejectStatusV3Request {
	return ApiUpdateTaskFlowRejectStatusV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		tfsId: tfsId,
	}
}

// Execute executes the request
//  @return UpdateTaskFlowStatusTypeV3Response
func (a *ProjectAPIService) UpdateTaskFlowRejectStatusV3Execute(r ApiUpdateTaskFlowRejectStatusV3Request) (*UpdateTaskFlowStatusTypeV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskFlowStatusTypeV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/taskflowstatus/{tfsId}/rejectstatus"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tfsId"+"}", url.PathEscape(parameterValueToString(r.tfsId, "tfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskFlowRejectStatusV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskFlowStatusNameV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	tfsId string
	xOperatorId *string
	xTenantId *string
	updateTaskFlowStatusNameV3Request *UpdateTaskFlowStatusNameV3Request
}

// 操作者ID
func (r ApiUpdateTaskFlowStatusNameV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskFlowStatusNameV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskFlowStatusNameV3Request) XTenantId(xTenantId string) ApiUpdateTaskFlowStatusNameV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskFlowStatusNameV3Request) UpdateTaskFlowStatusNameV3Request(updateTaskFlowStatusNameV3Request UpdateTaskFlowStatusNameV3Request) ApiUpdateTaskFlowStatusNameV3Request {
	r.updateTaskFlowStatusNameV3Request = &updateTaskFlowStatusNameV3Request
	return r
}

func (r ApiUpdateTaskFlowStatusNameV3Request) Execute() (*UpdateTaskFlowStatusTypeV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskFlowStatusNameV3Execute(r)
}

/*
UpdateTaskFlowStatusNameV3 更新项目工作流状态名字

更新项目工作流状态名字

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param tfsId 工作流状态ID
 @return ApiUpdateTaskFlowStatusNameV3Request

  @link https://open.teambition.com/docs/apis/6437eaa1912d20d3b56859a4 document
*/
func (a *ProjectAPIService) UpdateTaskFlowStatusNameV3(ctx context.Context, projectId string, tfsId string) ApiUpdateTaskFlowStatusNameV3Request {
	return ApiUpdateTaskFlowStatusNameV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		tfsId: tfsId,
	}
}

// Execute executes the request
//  @return UpdateTaskFlowStatusTypeV3Response
func (a *ProjectAPIService) UpdateTaskFlowStatusNameV3Execute(r ApiUpdateTaskFlowStatusNameV3Request) (*UpdateTaskFlowStatusTypeV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskFlowStatusTypeV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/taskflowstatus/{tfsId}/name"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tfsId"+"}", url.PathEscape(parameterValueToString(r.tfsId, "tfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskFlowStatusNameV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskFlowStatusTypeV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	tfsId string
	xOperatorId *string
	xTenantId *string
	updateTaskFlowStatusTypeV3Request *UpdateTaskFlowStatusTypeV3Request
}

// 操作者ID
func (r ApiUpdateTaskFlowStatusTypeV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskFlowStatusTypeV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskFlowStatusTypeV3Request) XTenantId(xTenantId string) ApiUpdateTaskFlowStatusTypeV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskFlowStatusTypeV3Request) UpdateTaskFlowStatusTypeV3Request(updateTaskFlowStatusTypeV3Request UpdateTaskFlowStatusTypeV3Request) ApiUpdateTaskFlowStatusTypeV3Request {
	r.updateTaskFlowStatusTypeV3Request = &updateTaskFlowStatusTypeV3Request
	return r
}

func (r ApiUpdateTaskFlowStatusTypeV3Request) Execute() (*UpdateTaskFlowStatusTypeV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskFlowStatusTypeV3Execute(r)
}

/*
UpdateTaskFlowStatusTypeV3 更新项目工作流状态

更新项目工作流状态

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param tfsId 工作流状态ID
 @return ApiUpdateTaskFlowStatusTypeV3Request

  @link https://open.teambition.com/docs/apis/6437eaa1912d20d3b56858e6 document
*/
func (a *ProjectAPIService) UpdateTaskFlowStatusTypeV3(ctx context.Context, projectId string, tfsId string) ApiUpdateTaskFlowStatusTypeV3Request {
	return ApiUpdateTaskFlowStatusTypeV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		tfsId: tfsId,
	}
}

// Execute executes the request
//  @return UpdateTaskFlowStatusTypeV3Response
func (a *ProjectAPIService) UpdateTaskFlowStatusTypeV3Execute(r ApiUpdateTaskFlowStatusTypeV3Request) (*UpdateTaskFlowStatusTypeV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskFlowStatusTypeV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/taskflowstatus/{tfsId}/kind"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tfsId"+"}", url.PathEscape(parameterValueToString(r.tfsId, "tfsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskFlowStatusTypeV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskGroupTitleV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	tasklistId string
	xOperatorId *string
	xTenantId *string
	updateTaskGroupTitleV3Request *UpdateTaskGroupTitleV3Request
}

// 操作者ID
func (r ApiUpdateTaskGroupTitleV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskGroupTitleV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskGroupTitleV3Request) XTenantId(xTenantId string) ApiUpdateTaskGroupTitleV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskGroupTitleV3Request) UpdateTaskGroupTitleV3Request(updateTaskGroupTitleV3Request UpdateTaskGroupTitleV3Request) ApiUpdateTaskGroupTitleV3Request {
	r.updateTaskGroupTitleV3Request = &updateTaskGroupTitleV3Request
	return r
}

func (r ApiUpdateTaskGroupTitleV3Request) Execute() (*UpdateTaskGroupTitleV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskGroupTitleV3Execute(r)
}

/*
UpdateTaskGroupTitleV3 更新任务分组名称

更新任务分组名称

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param tasklistId 任务分组ID
 @return ApiUpdateTaskGroupTitleV3Request

  @link https://open.teambition.com/docs/apis/64264d43912d20d3b588593e document
*/
func (a *ProjectAPIService) UpdateTaskGroupTitleV3(ctx context.Context, projectId string, tasklistId string) ApiUpdateTaskGroupTitleV3Request {
	return ApiUpdateTaskGroupTitleV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		tasklistId: tasklistId,
	}
}

// Execute executes the request
//  @return UpdateTaskGroupTitleV3Response
func (a *ProjectAPIService) UpdateTaskGroupTitleV3Execute(r ApiUpdateTaskGroupTitleV3Request) (*UpdateTaskGroupTitleV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskGroupTitleV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/tasklist/{tasklistId}/title"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tasklistId"+"}", url.PathEscape(parameterValueToString(r.tasklistId, "tasklistId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskGroupTitleV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskStageNameV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	stageId string
	xOperatorId *string
	xTenantId *string
	updateTaskStageNameV3Request *UpdateTaskStageNameV3Request
}

// 操作者ID
func (r ApiUpdateTaskStageNameV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskStageNameV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskStageNameV3Request) XTenantId(xTenantId string) ApiUpdateTaskStageNameV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskStageNameV3Request) UpdateTaskStageNameV3Request(updateTaskStageNameV3Request UpdateTaskStageNameV3Request) ApiUpdateTaskStageNameV3Request {
	r.updateTaskStageNameV3Request = &updateTaskStageNameV3Request
	return r
}

func (r ApiUpdateTaskStageNameV3Request) Execute() (*UpdateTaskStageNameV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskStageNameV3Execute(r)
}

/*
UpdateTaskStageNameV3 更新任务列表名称

更新任务列表名称

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param stageId 任务列表ID
 @return ApiUpdateTaskStageNameV3Request

  @link https://open.teambition.com/docs/apis/64264d43912d20d3b588580a document
*/
func (a *ProjectAPIService) UpdateTaskStageNameV3(ctx context.Context, projectId string, stageId string) ApiUpdateTaskStageNameV3Request {
	return ApiUpdateTaskStageNameV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		stageId: stageId,
	}
}

// Execute executes the request
//  @return UpdateTaskStageNameV3Response
func (a *ProjectAPIService) UpdateTaskStageNameV3Execute(r ApiUpdateTaskStageNameV3Request) (*UpdateTaskStageNameV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskStageNameV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/stage/{stageId}/name"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"stageId"+"}", url.PathEscape(parameterValueToString(r.stageId, "stageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskStageNameV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskflowNameV3Request struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	taskflowId string
	xOperatorId *string
	xTenantId *string
	updateTaskflowNameV3Request *UpdateTaskflowNameV3Request
}

// 操作者ID
func (r ApiUpdateTaskflowNameV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskflowNameV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskflowNameV3Request) XTenantId(xTenantId string) ApiUpdateTaskflowNameV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskflowNameV3Request) UpdateTaskflowNameV3Request(updateTaskflowNameV3Request UpdateTaskflowNameV3Request) ApiUpdateTaskflowNameV3Request {
	r.updateTaskflowNameV3Request = &updateTaskflowNameV3Request
	return r
}

func (r ApiUpdateTaskflowNameV3Request) Execute() (*UpdateTaskflowNameV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskflowNameV3Execute(r)
}

/*
UpdateTaskflowNameV3 更新项目工作流

更新项目工作流

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @param taskflowId 工作流ID
 @return ApiUpdateTaskflowNameV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49f80 document
*/
func (a *ProjectAPIService) UpdateTaskflowNameV3(ctx context.Context, projectId string, taskflowId string) ApiUpdateTaskflowNameV3Request {
	return ApiUpdateTaskflowNameV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		taskflowId: taskflowId,
	}
}

// Execute executes the request
//  @return UpdateTaskflowNameV3Response
func (a *ProjectAPIService) UpdateTaskflowNameV3Execute(r ApiUpdateTaskflowNameV3Request) (*UpdateTaskflowNameV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskflowNameV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/taskflow/{taskflowId}/name"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskflowId"+"}", url.PathEscape(parameterValueToString(r.taskflowId, "taskflowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskflowNameV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTestCaseGroupRequest struct {
	ctx context.Context
	ApiService *ProjectAPIService
	projectId string
	testcaseId string
	xOperatorId *string
	xTenantId *string
	updateTestCaseGroupRequest *UpdateTestCaseGroupRequest
}

// 操作者 ID
func (r ApiUpdateTestCaseGroupRequest) XOperatorId(xOperatorId string) ApiUpdateTestCaseGroupRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTestCaseGroupRequest) XTenantId(xTenantId string) ApiUpdateTestCaseGroupRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTestCaseGroupRequest) UpdateTestCaseGroupRequest(updateTestCaseGroupRequest UpdateTestCaseGroupRequest) ApiUpdateTestCaseGroupRequest {
	r.updateTestCaseGroupRequest = &updateTestCaseGroupRequest
	return r
}

func (r ApiUpdateTestCaseGroupRequest) Execute() (*UpdateTestCaseGroupResponse, *http.Response, error) {
	return r.ApiService.UpdateTestCaseGroupExecute(r)
}

/*
UpdateTestCaseGroup 更新项目级测试用例分组

更新项目级测试用例分组

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @param testcaseId 测试用例 ID
 @return ApiUpdateTestCaseGroupRequest

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a1f2 document
*/
func (a *ProjectAPIService) UpdateTestCaseGroup(ctx context.Context, projectId string, testcaseId string) ApiUpdateTestCaseGroupRequest {
	return ApiUpdateTestCaseGroupRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		testcaseId: testcaseId,
	}
}

// Execute executes the request
//  @return UpdateTestCaseGroupResponse
func (a *ProjectAPIService) UpdateTestCaseGroupExecute(r ApiUpdateTestCaseGroupRequest) (*UpdateTestCaseGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTestCaseGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/testcase/{testcaseId}/commongroup"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"testcaseId"+"}", url.PathEscape(parameterValueToString(r.testcaseId, "testcaseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTestCaseGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
