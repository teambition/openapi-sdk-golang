/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProjectplanAPIService ProjectplanAPI service
type ProjectplanAPIService service

type ApiCreatePlanApprovalV3Request struct {
	ctx context.Context
	ApiService *ProjectplanAPIService
	projectPlanId string
	xTenantId *string
	xOperatorId *string
	createPlanApprovalV3Request *CreatePlanApprovalV3Request
}

// 租户 ID
func (r ApiCreatePlanApprovalV3Request) XTenantId(xTenantId string) ApiCreatePlanApprovalV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 操作者ID
func (r ApiCreatePlanApprovalV3Request) XOperatorId(xOperatorId string) ApiCreatePlanApprovalV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 
func (r ApiCreatePlanApprovalV3Request) CreatePlanApprovalV3Request(createPlanApprovalV3Request CreatePlanApprovalV3Request) ApiCreatePlanApprovalV3Request {
	r.createPlanApprovalV3Request = &createPlanApprovalV3Request
	return r
}

func (r ApiCreatePlanApprovalV3Request) Execute() (*ExecutePlanEventV3Response, *http.Response, error) {
	return r.ApiService.CreatePlanApprovalV3Execute(r)
}

/*
CreatePlanApprovalV3 创建计划审批信息

创建计划审批信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectPlanId 计划ID
 @return ApiCreatePlanApprovalV3Request

  @link https://open.teambition.com/docs/apis/67f36da38657139bff2bdd65 document
*/
func (a *ProjectplanAPIService) CreatePlanApprovalV3(ctx context.Context, projectPlanId string) ApiCreatePlanApprovalV3Request {
	return ApiCreatePlanApprovalV3Request{
		ApiService: a,
		ctx: ctx,
		projectPlanId: projectPlanId,
	}
}

// Execute executes the request
//  @return ExecutePlanEventV3Response
func (a *ProjectplanAPIService) CreatePlanApprovalV3Execute(r ApiCreatePlanApprovalV3Request) (*ExecutePlanEventV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExecutePlanEventV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/projectplan/plans/{projectPlanId}/approve"
	localVarPath = strings.Replace(localVarPath, "{"+"projectPlanId"+"}", url.PathEscape(parameterValueToString(r.projectPlanId, "projectPlanId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Operator-Id", r.xOperatorId, "")
	}
	// body params
	localVarPostBody = r.createPlanApprovalV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProjectPlanStatusSettingV3Request struct {
	ctx context.Context
	ApiService *ProjectplanAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	createProjectPlanStatusSettingV3Request *CreateProjectPlanStatusSettingV3Request
}

// 操作者ID
func (r ApiCreateProjectPlanStatusSettingV3Request) XOperatorId(xOperatorId string) ApiCreateProjectPlanStatusSettingV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateProjectPlanStatusSettingV3Request) XTenantId(xTenantId string) ApiCreateProjectPlanStatusSettingV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateProjectPlanStatusSettingV3Request) CreateProjectPlanStatusSettingV3Request(createProjectPlanStatusSettingV3Request CreateProjectPlanStatusSettingV3Request) ApiCreateProjectPlanStatusSettingV3Request {
	r.createProjectPlanStatusSettingV3Request = &createProjectPlanStatusSettingV3Request
	return r
}

func (r ApiCreateProjectPlanStatusSettingV3Request) Execute() (*CreateProjectPlanStatusSettingV3Response, *http.Response, error) {
	return r.ApiService.CreateProjectPlanStatusSettingV3Execute(r)
}

/*
CreateProjectPlanStatusSettingV3 配置项目级计划自定义状态信息

配置项目级计划自定义状态信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiCreateProjectPlanStatusSettingV3Request

  @link https://open.teambition.com/docs/apis/67dd2f378657139bff29cf9c document
*/
func (a *ProjectplanAPIService) CreateProjectPlanStatusSettingV3(ctx context.Context, projectId string) ApiCreateProjectPlanStatusSettingV3Request {
	return ApiCreateProjectPlanStatusSettingV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateProjectPlanStatusSettingV3Response
func (a *ProjectplanAPIService) CreateProjectPlanStatusSettingV3Execute(r ApiCreateProjectPlanStatusSettingV3Request) (*CreateProjectPlanStatusSettingV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateProjectPlanStatusSettingV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/projectplan/projects/{projectId}/planCustomStatusSetting"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createProjectPlanStatusSettingV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExecutePlanEventV3Request struct {
	ctx context.Context
	ApiService *ProjectplanAPIService
	projectPlanId string
	event string
	xTenantId *string
	xOperatorId *string
}

// 租户 ID
func (r ApiExecutePlanEventV3Request) XTenantId(xTenantId string) ApiExecutePlanEventV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 操作者ID
func (r ApiExecutePlanEventV3Request) XOperatorId(xOperatorId string) ApiExecutePlanEventV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

func (r ApiExecutePlanEventV3Request) Execute() (*ExecutePlanEventV3Response, *http.Response, error) {
	return r.ApiService.ExecutePlanEventV3Execute(r)
}

/*
ExecutePlanEventV3 更改计划状态

更改计划状态

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectPlanId 计划ID
 @param event 计划执行操作,可传入自定义操作或默认计划操作，默认enum['change', 'publish']
 @return ApiExecutePlanEventV3Request

  @link https://open.teambition.com/docs/apis/67f36bbb8657139bff2bd260 document
*/
func (a *ProjectplanAPIService) ExecutePlanEventV3(ctx context.Context, projectPlanId string, event string) ApiExecutePlanEventV3Request {
	return ApiExecutePlanEventV3Request{
		ApiService: a,
		ctx: ctx,
		projectPlanId: projectPlanId,
		event: event,
	}
}

// Execute executes the request
//  @return ExecutePlanEventV3Response
func (a *ProjectplanAPIService) ExecutePlanEventV3Execute(r ApiExecutePlanEventV3Request) (*ExecutePlanEventV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExecutePlanEventV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/projectplan/plans/{projectPlanId}/execute/{event}"
	localVarPath = strings.Replace(localVarPath, "{"+"projectPlanId"+"}", url.PathEscape(parameterValueToString(r.projectPlanId, "projectPlanId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event"+"}", url.PathEscape(parameterValueToString(r.event, "event")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Operator-Id", r.xOperatorId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPlanStatusV3Request struct {
	ctx context.Context
	ApiService *ProjectplanAPIService
	projectPlanId string
	xOperatorId *string
	xTenantId *string
}

// 操作人ID
func (r ApiGetPlanStatusV3Request) XOperatorId(xOperatorId string) ApiGetPlanStatusV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiGetPlanStatusV3Request) XTenantId(xTenantId string) ApiGetPlanStatusV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiGetPlanStatusV3Request) Execute() (*GetPlanStatusV3Response, *http.Response, error) {
	return r.ApiService.GetPlanStatusV3Execute(r)
}

/*
GetPlanStatusV3 查询计划状态信息

查询计划状态信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectPlanId 计划ID
 @return ApiGetPlanStatusV3Request

  @link https://open.teambition.com/docs/apis/67dd0bd08657139bff298e21 document
*/
func (a *ProjectplanAPIService) GetPlanStatusV3(ctx context.Context, projectPlanId string) ApiGetPlanStatusV3Request {
	return ApiGetPlanStatusV3Request{
		ApiService: a,
		ctx: ctx,
		projectPlanId: projectPlanId,
	}
}

// Execute executes the request
//  @return GetPlanStatusV3Response
func (a *ProjectplanAPIService) GetPlanStatusV3Execute(r ApiGetPlanStatusV3Request) (*GetPlanStatusV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetPlanStatusV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/projectplan/plans/{projectPlanId}/status-info"
	localVarPath = strings.Replace(localVarPath, "{"+"projectPlanId"+"}", url.PathEscape(parameterValueToString(r.projectPlanId, "projectPlanId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPlanV3Request struct {
	ctx context.Context
	ApiService *ProjectplanAPIService
	projectPlanId string
	xTenantId *string
	xOperatorId *string
}

// 租户 ID
func (r ApiGetPlanV3Request) XTenantId(xTenantId string) ApiGetPlanV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 操作者ID
func (r ApiGetPlanV3Request) XOperatorId(xOperatorId string) ApiGetPlanV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

func (r ApiGetPlanV3Request) Execute() (*GetPlanV3Response, *http.Response, error) {
	return r.ApiService.GetPlanV3Execute(r)
}

/*
GetPlanV3 查询计划

查询计划

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectPlanId 计划ID
 @return ApiGetPlanV3Request

  @link https://open.teambition.com/docs/apis/67dab418a30a3554a5fa69a2 document
*/
func (a *ProjectplanAPIService) GetPlanV3(ctx context.Context, projectPlanId string) ApiGetPlanV3Request {
	return ApiGetPlanV3Request{
		ApiService: a,
		ctx: ctx,
		projectPlanId: projectPlanId,
	}
}

// Execute executes the request
//  @return GetPlanV3Response
func (a *ProjectplanAPIService) GetPlanV3Execute(r ApiGetPlanV3Request) (*GetPlanV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetPlanV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/projectplan/plans/{projectPlanId}/query"
	localVarPath = strings.Replace(localVarPath, "{"+"projectPlanId"+"}", url.PathEscape(parameterValueToString(r.projectPlanId, "projectPlanId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Operator-Id", r.xOperatorId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectPlanStatusSettingV3Request struct {
	ctx context.Context
	ApiService *ProjectplanAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
}

// 操作人ID
func (r ApiGetProjectPlanStatusSettingV3Request) XOperatorId(xOperatorId string) ApiGetProjectPlanStatusSettingV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiGetProjectPlanStatusSettingV3Request) XTenantId(xTenantId string) ApiGetProjectPlanStatusSettingV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiGetProjectPlanStatusSettingV3Request) Execute() (*GetProjectPlanStatusSettingV3Response, *http.Response, error) {
	return r.ApiService.GetProjectPlanStatusSettingV3Execute(r)
}

/*
GetProjectPlanStatusSettingV3 获取项目级计划自定义状态配置

获取项目级计划自定义状态配置

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiGetProjectPlanStatusSettingV3Request

  @link https://open.teambition.com/docs/apis/67dd27bc8657139bff29b100 document
*/
func (a *ProjectplanAPIService) GetProjectPlanStatusSettingV3(ctx context.Context, projectId string) ApiGetProjectPlanStatusSettingV3Request {
	return ApiGetProjectPlanStatusSettingV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return GetProjectPlanStatusSettingV3Response
func (a *ProjectplanAPIService) GetProjectPlanStatusSettingV3Execute(r ApiGetProjectPlanStatusSettingV3Request) (*GetProjectPlanStatusSettingV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetProjectPlanStatusSettingV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/projectplan/projects/{projectId}/planCustomStatusSetting"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPlanMemberRolesV3Request struct {
	ctx context.Context
	ApiService *ProjectplanAPIService
	projectPlanId string
	xOperatorId *string
	xTenantId *string
	role *string
}

// 操作者ID
func (r ApiListPlanMemberRolesV3Request) XOperatorId(xOperatorId string) ApiListPlanMemberRolesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListPlanMemberRolesV3Request) XTenantId(xTenantId string) ApiListPlanMemberRolesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 计划成员角色，-1&#x3D;审批人，0&#x3D;参与者，1&#x3D;管理员
func (r ApiListPlanMemberRolesV3Request) Role(role string) ApiListPlanMemberRolesV3Request {
	r.role = &role
	return r
}

func (r ApiListPlanMemberRolesV3Request) Execute() (*ListPlanMemberRolesV3Response, *http.Response, error) {
	return r.ApiService.ListPlanMemberRolesV3Execute(r)
}

/*
ListPlanMemberRolesV3 查询计划成员角色

查询计划成员角色

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectPlanId 计划ID
 @return ApiListPlanMemberRolesV3Request

  @link https://open.teambition.com/docs/apis/684a3a42912d20d3b5bcea9f document
*/
func (a *ProjectplanAPIService) ListPlanMemberRolesV3(ctx context.Context, projectPlanId string) ApiListPlanMemberRolesV3Request {
	return ApiListPlanMemberRolesV3Request{
		ApiService: a,
		ctx: ctx,
		projectPlanId: projectPlanId,
	}
}

// Execute executes the request
//  @return ListPlanMemberRolesV3Response
func (a *ProjectplanAPIService) ListPlanMemberRolesV3Execute(r ApiListPlanMemberRolesV3Request) (*ListPlanMemberRolesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListPlanMemberRolesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/projectplan/{projectPlanId}/members/list"
	localVarPath = strings.Replace(localVarPath, "{"+"projectPlanId"+"}", url.PathEscape(parameterValueToString(r.projectPlanId, "projectPlanId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.role != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "role", r.role, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPlanVersionsV3Request struct {
	ctx context.Context
	ApiService *ProjectplanAPIService
	projectPlanId string
	xOperatorId *string
	xTenantId *string
	isIncludeDraftVersion *bool
	isIncludeRealVersion *bool
	isIncludeInitVersion *bool
}

// 操作者ID
func (r ApiListPlanVersionsV3Request) XOperatorId(xOperatorId string) ApiListPlanVersionsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListPlanVersionsV3Request) XTenantId(xTenantId string) ApiListPlanVersionsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 是否包括草稿版本
func (r ApiListPlanVersionsV3Request) IsIncludeDraftVersion(isIncludeDraftVersion bool) ApiListPlanVersionsV3Request {
	r.isIncludeDraftVersion = &isIncludeDraftVersion
	return r
}

// 是否包括正式版本
func (r ApiListPlanVersionsV3Request) IsIncludeRealVersion(isIncludeRealVersion bool) ApiListPlanVersionsV3Request {
	r.isIncludeRealVersion = &isIncludeRealVersion
	return r
}

// 是否包括初始化版本
func (r ApiListPlanVersionsV3Request) IsIncludeInitVersion(isIncludeInitVersion bool) ApiListPlanVersionsV3Request {
	r.isIncludeInitVersion = &isIncludeInitVersion
	return r
}

func (r ApiListPlanVersionsV3Request) Execute() (*ListPlanVersionsV3Response, *http.Response, error) {
	return r.ApiService.ListPlanVersionsV3Execute(r)
}

/*
ListPlanVersionsV3 查询计划版本列表

查询用户计划版本列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectPlanId 项目计划ID
 @return ApiListPlanVersionsV3Request

  @link https://open.teambition.com/docs/apis/684a341d912d20d3b5aff931 document
*/
func (a *ProjectplanAPIService) ListPlanVersionsV3(ctx context.Context, projectPlanId string) ApiListPlanVersionsV3Request {
	return ApiListPlanVersionsV3Request{
		ApiService: a,
		ctx: ctx,
		projectPlanId: projectPlanId,
	}
}

// Execute executes the request
//  @return ListPlanVersionsV3Response
func (a *ProjectplanAPIService) ListPlanVersionsV3Execute(r ApiListPlanVersionsV3Request) (*ListPlanVersionsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListPlanVersionsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/projectplan/{projectPlanId}/version/list"
	localVarPath = strings.Replace(localVarPath, "{"+"projectPlanId"+"}", url.PathEscape(parameterValueToString(r.projectPlanId, "projectPlanId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.isIncludeDraftVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isIncludeDraftVersion", r.isIncludeDraftVersion, "")
	}
	if r.isIncludeRealVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isIncludeRealVersion", r.isIncludeRealVersion, "")
	}
	if r.isIncludeInitVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isIncludeInitVersion", r.isIncludeInitVersion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListProjectPlanTasksLegacyV3Request struct {
	ctx context.Context
	ApiService *ProjectplanAPIService
	projectPlanId string
	xOperatorId *string
	xTenantId *string
	filter *string
	pageToken *string
	pageSize *float32
	disableDefaultSort *bool
	includesArchived *bool
	skipSort *bool
	checkInvisible *bool
	myVisible *bool
	listChangeTasks *bool
}

// 操作者ID
func (r ApiListProjectPlanTasksLegacyV3Request) XOperatorId(xOperatorId string) ApiListProjectPlanTasksLegacyV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListProjectPlanTasksLegacyV3Request) XTenantId(xTenantId string) ApiListProjectPlanTasksLegacyV3Request {
	r.xTenantId = &xTenantId
	return r
}

// TQL
func (r ApiListProjectPlanTasksLegacyV3Request) Filter(filter string) ApiListProjectPlanTasksLegacyV3Request {
	r.filter = &filter
	return r
}

// 分页标
func (r ApiListProjectPlanTasksLegacyV3Request) PageToken(pageToken string) ApiListProjectPlanTasksLegacyV3Request {
	r.pageToken = &pageToken
	return r
}

// 每页长度
func (r ApiListProjectPlanTasksLegacyV3Request) PageSize(pageSize float32) ApiListProjectPlanTasksLegacyV3Request {
	r.pageSize = &pageSize
	return r
}

// 去掉系统默认加的筛选条件
func (r ApiListProjectPlanTasksLegacyV3Request) DisableDefaultSort(disableDefaultSort bool) ApiListProjectPlanTasksLegacyV3Request {
	r.disableDefaultSort = &disableDefaultSort
	return r
}

// 是否包含已归档的任务
func (r ApiListProjectPlanTasksLegacyV3Request) IncludesArchived(includesArchived bool) ApiListProjectPlanTasksLegacyV3Request {
	r.includesArchived = &includesArchived
	return r
}

// 是否跳过排序
func (r ApiListProjectPlanTasksLegacyV3Request) SkipSort(skipSort bool) ApiListProjectPlanTasksLegacyV3Request {
	r.skipSort = &skipSort
	return r
}

// 满足 tql 的任务数据是否含有隐私任务
func (r ApiListProjectPlanTasksLegacyV3Request) CheckInvisible(checkInvisible bool) ApiListProjectPlanTasksLegacyV3Request {
	r.checkInvisible = &checkInvisible
	return r
}

// 是否只返回可见的任务
func (r ApiListProjectPlanTasksLegacyV3Request) MyVisible(myVisible bool) ApiListProjectPlanTasksLegacyV3Request {
	r.myVisible = &myVisible
	return r
}

// 是否只返回变更选择的任务
func (r ApiListProjectPlanTasksLegacyV3Request) ListChangeTasks(listChangeTasks bool) ApiListProjectPlanTasksLegacyV3Request {
	r.listChangeTasks = &listChangeTasks
	return r
}

func (r ApiListProjectPlanTasksLegacyV3Request) Execute() (*ListProjectPlanTasksLegacyV3Response, *http.Response, error) {
	return r.ApiService.ListProjectPlanTasksLegacyV3Execute(r)
}

/*
ListProjectPlanTasksLegacyV3 获取计划任务列表

获取计划任务列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectPlanId 计划ID
 @return ApiListProjectPlanTasksLegacyV3Request

  @link https://open.teambition.com/docs/apis/682d4da6912d20d3b5bc4684 document
*/
func (a *ProjectplanAPIService) ListProjectPlanTasksLegacyV3(ctx context.Context, projectPlanId string) ApiListProjectPlanTasksLegacyV3Request {
	return ApiListProjectPlanTasksLegacyV3Request{
		ApiService: a,
		ctx: ctx,
		projectPlanId: projectPlanId,
	}
}

// Execute executes the request
//  @return ListProjectPlanTasksLegacyV3Response
func (a *ProjectplanAPIService) ListProjectPlanTasksLegacyV3Execute(r ApiListProjectPlanTasksLegacyV3Request) (*ListProjectPlanTasksLegacyV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListProjectPlanTasksLegacyV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/projectplan-task/plans/{projectPlanId}/tasks"
	localVarPath = strings.Replace(localVarPath, "{"+"projectPlanId"+"}", url.PathEscape(parameterValueToString(r.projectPlanId, "projectPlanId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.disableDefaultSort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "disableDefaultSort", r.disableDefaultSort, "")
	}
	if r.includesArchived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includesArchived", r.includesArchived, "")
	}
	if r.skipSort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipSort", r.skipSort, "")
	}
	if r.checkInvisible != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "checkInvisible", r.checkInvisible, "")
	}
	if r.myVisible != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "myVisible", r.myVisible, "")
	}
	if r.listChangeTasks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "listChangeTasks", r.listChangeTasks, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListVisiblePlansV3Request struct {
	ctx context.Context
	ApiService *ProjectplanAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	ids *string
	pageToken *string
	pageSize *string
	queryAllLevels *bool
	parentId *string
}

// 操作者ID
func (r ApiListVisiblePlansV3Request) XOperatorId(xOperatorId string) ApiListVisiblePlansV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiListVisiblePlansV3Request) XTenantId(xTenantId string) ApiListVisiblePlansV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 计划ids集合,使用逗号分隔
func (r ApiListVisiblePlansV3Request) Ids(ids string) ApiListVisiblePlansV3Request {
	r.ids = &ids
	return r
}

// 分页标
func (r ApiListVisiblePlansV3Request) PageToken(pageToken string) ApiListVisiblePlansV3Request {
	r.pageToken = &pageToken
	return r
}

// 每页长度
func (r ApiListVisiblePlansV3Request) PageSize(pageSize string) ApiListVisiblePlansV3Request {
	r.pageSize = &pageSize
	return r
}

// 是否返回所有层级的计划
func (r ApiListVisiblePlansV3Request) QueryAllLevels(queryAllLevels bool) ApiListVisiblePlansV3Request {
	r.queryAllLevels = &queryAllLevels
	return r
}

// 父计划ID
func (r ApiListVisiblePlansV3Request) ParentId(parentId string) ApiListVisiblePlansV3Request {
	r.parentId = &parentId
	return r
}

func (r ApiListVisiblePlansV3Request) Execute() (*ListVisiblePlansV3Response, *http.Response, error) {
	return r.ApiService.ListVisiblePlansV3Execute(r)
}

/*
ListVisiblePlansV3 查询用户可见的计划列表

查询用户可见的计划列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiListVisiblePlansV3Request

  @link https://open.teambition.com/docs/apis/682464b6912d20d3b5175b79 document
*/
func (a *ProjectplanAPIService) ListVisiblePlansV3(ctx context.Context, projectId string) ApiListVisiblePlansV3Request {
	return ApiListVisiblePlansV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ListVisiblePlansV3Response
func (a *ProjectplanAPIService) ListVisiblePlansV3Execute(r ApiListVisiblePlansV3Request) (*ListVisiblePlansV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListVisiblePlansV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/projectplan/projects/{projectId}/list"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ids", r.ids, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.queryAllLevels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "queryAllLevels", r.queryAllLevels, "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parentId", r.parentId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchProjectPlanTasksV3Request struct {
	ctx context.Context
	ApiService *ProjectplanAPIService
	projectId string
	xOperatorId *string
	xTenantId *string
	tql *string
	pageSize *int32
	pageToken *string
}

// 操作者ID
func (r ApiSearchProjectPlanTasksV3Request) XOperatorId(xOperatorId string) ApiSearchProjectPlanTasksV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiSearchProjectPlanTasksV3Request) XTenantId(xTenantId string) ApiSearchProjectPlanTasksV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 企业下任务搜索TQL语句
func (r ApiSearchProjectPlanTasksV3Request) Tql(tql string) ApiSearchProjectPlanTasksV3Request {
	r.tql = &tql
	return r
}

// 分页长度
func (r ApiSearchProjectPlanTasksV3Request) PageSize(pageSize int32) ApiSearchProjectPlanTasksV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchProjectPlanTasksV3Request) PageToken(pageToken string) ApiSearchProjectPlanTasksV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiSearchProjectPlanTasksV3Request) Execute() (*SearchProjectPlanTasksV3Response, *http.Response, error) {
	return r.ApiService.SearchProjectPlanTasksV3Execute(r)
}

/*
SearchProjectPlanTasksV3 通过TQL搜索项目计划任务

通过TQL搜索项目计划任务

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目ID
 @return ApiSearchProjectPlanTasksV3Request

  @link https://open.teambition.com/docs/apis/6822be41912d20d3b528f442 document
*/
func (a *ProjectplanAPIService) SearchProjectPlanTasksV3(ctx context.Context, projectId string) ApiSearchProjectPlanTasksV3Request {
	return ApiSearchProjectPlanTasksV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return SearchProjectPlanTasksV3Response
func (a *ProjectplanAPIService) SearchProjectPlanTasksV3Execute(r ApiSearchProjectPlanTasksV3Request) (*SearchProjectPlanTasksV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchProjectPlanTasksV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/plan-task/search"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tql != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tql", r.tql, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePlanApprovalV3Request struct {
	ctx context.Context
	ApiService *ProjectplanAPIService
	projectPlanId string
	xTenantId *string
	xOperatorId *string
	updatePlanApprovalV3Request *UpdatePlanApprovalV3Request
}

// 租户 ID
func (r ApiUpdatePlanApprovalV3Request) XTenantId(xTenantId string) ApiUpdatePlanApprovalV3Request {
	r.xTenantId = &xTenantId
	return r
}

//  操作者ID
func (r ApiUpdatePlanApprovalV3Request) XOperatorId(xOperatorId string) ApiUpdatePlanApprovalV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 
func (r ApiUpdatePlanApprovalV3Request) UpdatePlanApprovalV3Request(updatePlanApprovalV3Request UpdatePlanApprovalV3Request) ApiUpdatePlanApprovalV3Request {
	r.updatePlanApprovalV3Request = &updatePlanApprovalV3Request
	return r
}

func (r ApiUpdatePlanApprovalV3Request) Execute() (*ExecutePlanEventV3Response, *http.Response, error) {
	return r.ApiService.UpdatePlanApprovalV3Execute(r)
}

/*
UpdatePlanApprovalV3 更新计划审批信息

更新计划审批信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectPlanId 计划ID
 @return ApiUpdatePlanApprovalV3Request

  @link https://open.teambition.com/docs/apis/67f36f5e8657139bff2be59c document
*/
func (a *ProjectplanAPIService) UpdatePlanApprovalV3(ctx context.Context, projectPlanId string) ApiUpdatePlanApprovalV3Request {
	return ApiUpdatePlanApprovalV3Request{
		ApiService: a,
		ctx: ctx,
		projectPlanId: projectPlanId,
	}
}

// Execute executes the request
//  @return ExecutePlanEventV3Response
func (a *ProjectplanAPIService) UpdatePlanApprovalV3Execute(r ApiUpdatePlanApprovalV3Request) (*ExecutePlanEventV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExecutePlanEventV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/projectplan/plans/{projectPlanId}/approve"
	localVarPath = strings.Replace(localVarPath, "{"+"projectPlanId"+"}", url.PathEscape(parameterValueToString(r.projectPlanId, "projectPlanId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Operator-Id", r.xOperatorId, "")
	}
	// body params
	localVarPostBody = r.updatePlanApprovalV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePlanCustomStatusV3Request struct {
	ctx context.Context
	ApiService *ProjectplanAPIService
	projectPlanId string
	xOperatorId *string
	xTenantId *string
	updatePlanCustomStatusV3Request *UpdatePlanCustomStatusV3Request
}

// 操作人ID
func (r ApiUpdatePlanCustomStatusV3Request) XOperatorId(xOperatorId string) ApiUpdatePlanCustomStatusV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdatePlanCustomStatusV3Request) XTenantId(xTenantId string) ApiUpdatePlanCustomStatusV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdatePlanCustomStatusV3Request) UpdatePlanCustomStatusV3Request(updatePlanCustomStatusV3Request UpdatePlanCustomStatusV3Request) ApiUpdatePlanCustomStatusV3Request {
	r.updatePlanCustomStatusV3Request = &updatePlanCustomStatusV3Request
	return r
}

func (r ApiUpdatePlanCustomStatusV3Request) Execute() (*UpdatePlanCustomStatusV3Response, *http.Response, error) {
	return r.ApiService.UpdatePlanCustomStatusV3Execute(r)
}

/*
UpdatePlanCustomStatusV3 配置计划自定义状态

配置计划自定义状态

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectPlanId 计划ID
 @return ApiUpdatePlanCustomStatusV3Request

  @link https://open.teambition.com/docs/apis/67dd2d338657139bff29c843 document
*/
func (a *ProjectplanAPIService) UpdatePlanCustomStatusV3(ctx context.Context, projectPlanId string) ApiUpdatePlanCustomStatusV3Request {
	return ApiUpdatePlanCustomStatusV3Request{
		ApiService: a,
		ctx: ctx,
		projectPlanId: projectPlanId,
	}
}

// Execute executes the request
//  @return UpdatePlanCustomStatusV3Response
func (a *ProjectplanAPIService) UpdatePlanCustomStatusV3Execute(r ApiUpdatePlanCustomStatusV3Request) (*UpdatePlanCustomStatusV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdatePlanCustomStatusV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/projectplan/plans/{projectPlanId}/customStatus"
	localVarPath = strings.Replace(localVarPath, "{"+"projectPlanId"+"}", url.PathEscape(parameterValueToString(r.projectPlanId, "projectPlanId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updatePlanCustomStatusV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePlanMemberRoleV3Request struct {
	ctx context.Context
	ApiService *ProjectplanAPIService
	projectPlanId string
	xOperatorId *string
	xTenantId *string
	updatePlanMemberRoleV3Request *UpdatePlanMemberRoleV3Request
}

// 操作者ID
func (r ApiUpdatePlanMemberRoleV3Request) XOperatorId(xOperatorId string) ApiUpdatePlanMemberRoleV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdatePlanMemberRoleV3Request) XTenantId(xTenantId string) ApiUpdatePlanMemberRoleV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdatePlanMemberRoleV3Request) UpdatePlanMemberRoleV3Request(updatePlanMemberRoleV3Request UpdatePlanMemberRoleV3Request) ApiUpdatePlanMemberRoleV3Request {
	r.updatePlanMemberRoleV3Request = &updatePlanMemberRoleV3Request
	return r
}

func (r ApiUpdatePlanMemberRoleV3Request) Execute() (*UpdatePlanMemberRoleV3Response, *http.Response, error) {
	return r.ApiService.UpdatePlanMemberRoleV3Execute(r)
}

/*
UpdatePlanMemberRoleV3 修改计划成员角色

修改计划成员角色

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectPlanId 计划ID
 @return ApiUpdatePlanMemberRoleV3Request

  @link https://open.teambition.com/docs/apis/67e24a3e38cb5ab7af0b344c document
*/
func (a *ProjectplanAPIService) UpdatePlanMemberRoleV3(ctx context.Context, projectPlanId string) ApiUpdatePlanMemberRoleV3Request {
	return ApiUpdatePlanMemberRoleV3Request{
		ApiService: a,
		ctx: ctx,
		projectPlanId: projectPlanId,
	}
}

// Execute executes the request
//  @return UpdatePlanMemberRoleV3Response
func (a *ProjectplanAPIService) UpdatePlanMemberRoleV3Execute(r ApiUpdatePlanMemberRoleV3Request) (*UpdatePlanMemberRoleV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdatePlanMemberRoleV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/projectplan/plans/{projectPlanId}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"projectPlanId"+"}", url.PathEscape(parameterValueToString(r.projectPlanId, "projectPlanId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updatePlanMemberRoleV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateProjectPlanTaskV3Request struct {
	ctx context.Context
	ApiService *ProjectplanAPIService
	projectPlanId string
	taskId string
	xOperatorId *string
	xTenantId *string
	updateProjectPlanTaskV3Request *UpdateProjectPlanTaskV3Request
}

// 操作者ID
func (r ApiUpdateProjectPlanTaskV3Request) XOperatorId(xOperatorId string) ApiUpdateProjectPlanTaskV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateProjectPlanTaskV3Request) XTenantId(xTenantId string) ApiUpdateProjectPlanTaskV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateProjectPlanTaskV3Request) UpdateProjectPlanTaskV3Request(updateProjectPlanTaskV3Request UpdateProjectPlanTaskV3Request) ApiUpdateProjectPlanTaskV3Request {
	r.updateProjectPlanTaskV3Request = &updateProjectPlanTaskV3Request
	return r
}

func (r ApiUpdateProjectPlanTaskV3Request) Execute() (*UpdateProjectPlanTaskV3Response, *http.Response, error) {
	return r.ApiService.UpdateProjectPlanTaskV3Execute(r)
}

/*
UpdateProjectPlanTaskV3 更新计划任务（标题、开始时间、截止时间）

更新计划任务（标题、开始时间、截止时间）

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectPlanId 计划ID
 @param taskId 任务ID
 @return ApiUpdateProjectPlanTaskV3Request

  @link https://open.teambition.com/docs/apis/683570b6912d20d3b5f3e246 document
*/
func (a *ProjectplanAPIService) UpdateProjectPlanTaskV3(ctx context.Context, projectPlanId string, taskId string) ApiUpdateProjectPlanTaskV3Request {
	return ApiUpdateProjectPlanTaskV3Request{
		ApiService: a,
		ctx: ctx,
		projectPlanId: projectPlanId,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateProjectPlanTaskV3Response
func (a *ProjectplanAPIService) UpdateProjectPlanTaskV3Execute(r ApiUpdateProjectPlanTaskV3Request) (*UpdateProjectPlanTaskV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateProjectPlanTaskV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/projectplan-task/plans/{projectPlanId}/tasks/{taskId}"
	localVarPath = strings.Replace(localVarPath, "{"+"projectPlanId"+"}", url.PathEscape(parameterValueToString(r.projectPlanId, "projectPlanId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateProjectPlanTaskV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
