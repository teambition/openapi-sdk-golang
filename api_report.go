/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ReportAPIService ReportAPI service
type ReportAPIService service

type ApiSumProjectWorkTimeRequest struct {
	ctx context.Context
	ApiService *ReportAPIService
	projectId string
	xTenantId *string
	sumProjectWorkTimeRequest *SumProjectWorkTimeRequest
}

// 企业 ID
func (r ApiSumProjectWorkTimeRequest) XTenantId(xTenantId string) ApiSumProjectWorkTimeRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiSumProjectWorkTimeRequest) SumProjectWorkTimeRequest(sumProjectWorkTimeRequest SumProjectWorkTimeRequest) ApiSumProjectWorkTimeRequest {
	r.sumProjectWorkTimeRequest = &sumProjectWorkTimeRequest
	return r
}

func (r ApiSumProjectWorkTimeRequest) Execute() (*SumProjectWorkTimeResponse, *http.Response, error) {
	return r.ApiService.SumProjectWorkTimeExecute(r)
}

/*
SumProjectWorkTime 计算项目总工时

不计算回收站任务，并且过滤掉了不是入参项目的任务

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目id
 @return ApiSumProjectWorkTimeRequest

  @link https://open.teambition.com/docs/apis/63a4237d912d20d3b57fbd65 document
*/
func (a *ReportAPIService) SumProjectWorkTime(ctx context.Context, projectId string) ApiSumProjectWorkTimeRequest {
	return ApiSumProjectWorkTimeRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return SumProjectWorkTimeResponse
func (a *ReportAPIService) SumProjectWorkTimeExecute(r ApiSumProjectWorkTimeRequest) (*SumProjectWorkTimeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SumProjectWorkTimeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/report/project/{projectId}/statistics/worktime/total"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.sumProjectWorkTimeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSumWorkTimeByUserRequest struct {
	ctx context.Context
	ApiService *ReportAPIService
	projectId string
	xTenantId *string
	sumWorkTimeByUserRequest *SumWorkTimeByUserRequest
}

// 企业 ID
func (r ApiSumWorkTimeByUserRequest) XTenantId(xTenantId string) ApiSumWorkTimeByUserRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiSumWorkTimeByUserRequest) SumWorkTimeByUserRequest(sumWorkTimeByUserRequest SumWorkTimeByUserRequest) ApiSumWorkTimeByUserRequest {
	r.sumWorkTimeByUserRequest = &sumWorkTimeByUserRequest
	return r
}

func (r ApiSumWorkTimeByUserRequest) Execute() (*SumWorkTimeByUserResponse, *http.Response, error) {
	return r.ApiService.SumWorkTimeByUserExecute(r)
}

/*
SumWorkTimeByUser 按人维度汇总工时



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目id
 @return ApiSumWorkTimeByUserRequest

  @link https://open.teambition.com/docs/apis/63a4237d912d20d3b57fbbc4 document
*/
func (a *ReportAPIService) SumWorkTimeByUser(ctx context.Context, projectId string) ApiSumWorkTimeByUserRequest {
	return ApiSumWorkTimeByUserRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return SumWorkTimeByUserResponse
func (a *ReportAPIService) SumWorkTimeByUserExecute(r ApiSumWorkTimeByUserRequest) (*SumWorkTimeByUserResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SumWorkTimeByUserResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/report/project/{projectId}/statistics/worktime"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.sumWorkTimeByUserRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
