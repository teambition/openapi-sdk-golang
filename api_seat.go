/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SeatAPIService SeatAPI service
type SeatAPIService service

type ApiCreateQuotaRuleRequest struct {
	ctx context.Context
	ApiService *SeatAPIService
	xTenantId *string
	xOperatorId *string
	orgId *string
	userId *string
}

// 租户 ID
func (r ApiCreateQuotaRuleRequest) XTenantId(xTenantId string) ApiCreateQuotaRuleRequest {
	r.xTenantId = &xTenantId
	return r
}

// 操作人ID
func (r ApiCreateQuotaRuleRequest) XOperatorId(xOperatorId string) ApiCreateQuotaRuleRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业ID
func (r ApiCreateQuotaRuleRequest) OrgId(orgId string) ApiCreateQuotaRuleRequest {
	r.orgId = &orgId
	return r
}

// 用户ID
func (r ApiCreateQuotaRuleRequest) UserId(userId string) ApiCreateQuotaRuleRequest {
	r.userId = &userId
	return r
}

func (r ApiCreateQuotaRuleRequest) Execute() (*CreateQuotaRuleResponse, *http.Response, error) {
	return r.ApiService.CreateQuotaRuleExecute(r)
}

/*
CreateQuotaRule 创建名额分配规则

把企业成员加入到坐席分配规则中

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateQuotaRuleRequest

  @link https://open.teambition.com/docs/apis/649aa48d11b042002ab6f10c document
*/
func (a *SeatAPIService) CreateQuotaRule(ctx context.Context) ApiCreateQuotaRuleRequest {
	return ApiCreateQuotaRuleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateQuotaRuleResponse
func (a *SeatAPIService) CreateQuotaRuleExecute(r ApiCreateQuotaRuleRequest) (*CreateQuotaRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateQuotaRuleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/seat/project/allocate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.orgId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orgId", r.orgId, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
