/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SfcAPIService SfcAPI service
type SfcAPIService service

type ApiCreateSfcV3Request struct {
	ctx context.Context
	ApiService *SfcAPIService
	xOperatorId *string
	xTenantId *string
	projectId *string
	createSfcV3Request *CreateSfcV3Request
}

// 操作者ID
func (r ApiCreateSfcV3Request) XOperatorId(xOperatorId string) ApiCreateSfcV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateSfcV3Request) XTenantId(xTenantId string) ApiCreateSfcV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 项目ID
func (r ApiCreateSfcV3Request) ProjectId(projectId string) ApiCreateSfcV3Request {
	r.projectId = &projectId
	return r
}

// 
func (r ApiCreateSfcV3Request) CreateSfcV3Request(createSfcV3Request CreateSfcV3Request) ApiCreateSfcV3Request {
	r.createSfcV3Request = &createSfcV3Request
	return r
}

func (r ApiCreateSfcV3Request) Execute() (*CreateSfcV3Response, *http.Response, error) {
	return r.ApiService.CreateSfcV3Execute(r)
}

/*
CreateSfcV3 创建项目任务类型(提交项目ID), 创建企业任务类型

创建项目任务类型(提交项目ID)，创建企业任务类型

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateSfcV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49c04 document
*/
func (a *SfcAPIService) CreateSfcV3(ctx context.Context) ApiCreateSfcV3Request {
	return ApiCreateSfcV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateSfcV3Response
func (a *SfcAPIService) CreateSfcV3Execute(r ApiCreateSfcV3Request) (*CreateSfcV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateSfcV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/sfc/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createSfcV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteSfcFieldV3Request struct {
	ctx context.Context
	ApiService *SfcAPIService
	sfcId string
	xOperatorId *string
	xTenantId *string
	projectId *string
	fieldType *string
	customfieldId *string
	body *map[string]interface{}
}

// 操作者ID
func (r ApiDeleteSfcFieldV3Request) XOperatorId(xOperatorId string) ApiDeleteSfcFieldV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteSfcFieldV3Request) XTenantId(xTenantId string) ApiDeleteSfcFieldV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 项目ID
func (r ApiDeleteSfcFieldV3Request) ProjectId(projectId string) ApiDeleteSfcFieldV3Request {
	r.projectId = &projectId
	return r
}

// 字段类型
func (r ApiDeleteSfcFieldV3Request) FieldType(fieldType string) ApiDeleteSfcFieldV3Request {
	r.fieldType = &fieldType
	return r
}

// 自定义字段ID
func (r ApiDeleteSfcFieldV3Request) CustomfieldId(customfieldId string) ApiDeleteSfcFieldV3Request {
	r.customfieldId = &customfieldId
	return r
}

// 
func (r ApiDeleteSfcFieldV3Request) Body(body map[string]interface{}) ApiDeleteSfcFieldV3Request {
	r.body = &body
	return r
}

func (r ApiDeleteSfcFieldV3Request) Execute() (*DeleteSfcFieldV3Response, *http.Response, error) {
	return r.ApiService.DeleteSfcFieldV3Execute(r)
}

/*
DeleteSfcFieldV3 删除项目/企业的任务类型的字段

删除项目/企业的任务类型的字段

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sfcId 任务类型ID
 @return ApiDeleteSfcFieldV3Request

  @link https://open.teambition.com/docs/apis/63c7e586912d20d3b53ceb55 document
*/
func (a *SfcAPIService) DeleteSfcFieldV3(ctx context.Context, sfcId string) ApiDeleteSfcFieldV3Request {
	return ApiDeleteSfcFieldV3Request{
		ApiService: a,
		ctx: ctx,
		sfcId: sfcId,
	}
}

// Execute executes the request
//  @return DeleteSfcFieldV3Response
func (a *SfcAPIService) DeleteSfcFieldV3Execute(r ApiDeleteSfcFieldV3Request) (*DeleteSfcFieldV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteSfcFieldV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/sfc/{sfcId}/sf/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"sfcId"+"}", url.PathEscape(parameterValueToString(r.sfcId, "sfcId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "")
	}
	if r.fieldType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldType", r.fieldType, "")
	}
	if r.customfieldId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customfieldId", r.customfieldId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteSfcV3Request struct {
	ctx context.Context
	ApiService *SfcAPIService
	sfcId string
	xOperatorId *string
	xTenantId *string
	projectId *string
	archiveWhenImplemented *bool
	body *map[string]interface{}
}

// 操作者ID
func (r ApiDeleteSfcV3Request) XOperatorId(xOperatorId string) ApiDeleteSfcV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteSfcV3Request) XTenantId(xTenantId string) ApiDeleteSfcV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 项目ID
func (r ApiDeleteSfcV3Request) ProjectId(projectId string) ApiDeleteSfcV3Request {
	r.projectId = &projectId
	return r
}

// 如果存在这个任务类型的任务，是否自动归档替换删除.
func (r ApiDeleteSfcV3Request) ArchiveWhenImplemented(archiveWhenImplemented bool) ApiDeleteSfcV3Request {
	r.archiveWhenImplemented = &archiveWhenImplemented
	return r
}

// 
func (r ApiDeleteSfcV3Request) Body(body map[string]interface{}) ApiDeleteSfcV3Request {
	r.body = &body
	return r
}

func (r ApiDeleteSfcV3Request) Execute() (*DeleteSfcV3Response, *http.Response, error) {
	return r.ApiService.DeleteSfcV3Execute(r)
}

/*
DeleteSfcV3 删除项目任务类型(提交项目ID), 删除企业任务类型

删除项目任务类型(提交项目ID)，删除企业任务类型

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sfcId 任务类型ID
 @return ApiDeleteSfcV3Request

  @link https://open.teambition.com/docs/apis/63a08188912d20d3b56b90bb document
*/
func (a *SfcAPIService) DeleteSfcV3(ctx context.Context, sfcId string) ApiDeleteSfcV3Request {
	return ApiDeleteSfcV3Request{
		ApiService: a,
		ctx: ctx,
		sfcId: sfcId,
	}
}

// Execute executes the request
//  @return DeleteSfcV3Response
func (a *SfcAPIService) DeleteSfcV3Execute(r ApiDeleteSfcV3Request) (*DeleteSfcV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteSfcV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/sfc/{sfcId}/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"sfcId"+"}", url.PathEscape(parameterValueToString(r.sfcId, "sfcId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "")
	}
	if r.archiveWhenImplemented != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archiveWhenImplemented", r.archiveWhenImplemented, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchOrgSfcV3Request struct {
	ctx context.Context
	ApiService *SfcAPIService
	xTenantId *string
	q *string
	sfcIds *string
	pageToken *string
	pageSize *int32
}

// 企业 ID
func (r ApiSearchOrgSfcV3Request) XTenantId(xTenantId string) ApiSearchOrgSfcV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 模糊查询任务类型名称
func (r ApiSearchOrgSfcV3Request) Q(q string) ApiSearchOrgSfcV3Request {
	r.q = &q
	return r
}

// 任务类型ID集合，逗号组合
func (r ApiSearchOrgSfcV3Request) SfcIds(sfcIds string) ApiSearchOrgSfcV3Request {
	r.sfcIds = &sfcIds
	return r
}

// 分页标
func (r ApiSearchOrgSfcV3Request) PageToken(pageToken string) ApiSearchOrgSfcV3Request {
	r.pageToken = &pageToken
	return r
}

// 每页任务数量(默认为50)
func (r ApiSearchOrgSfcV3Request) PageSize(pageSize int32) ApiSearchOrgSfcV3Request {
	r.pageSize = &pageSize
	return r
}

func (r ApiSearchOrgSfcV3Request) Execute() (*SearchOrgSfcV3Response, *http.Response, error) {
	return r.ApiService.SearchOrgSfcV3Execute(r)
}

/*
SearchOrgSfcV3 搜索企业任务类型

搜索企业任务类型

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchOrgSfcV3Request

  @link https://open.teambition.com/docs/apis/63ee3ea2912d20d3b543f1ae document
*/
func (a *SfcAPIService) SearchOrgSfcV3(ctx context.Context) ApiSearchOrgSfcV3Request {
	return ApiSearchOrgSfcV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchOrgSfcV3Response
func (a *SfcAPIService) SearchOrgSfcV3Execute(r ApiSearchOrgSfcV3Request) (*SearchOrgSfcV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchOrgSfcV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/scenariofieldconfig/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.sfcIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sfcIds", r.sfcIds, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSfcFieldV3Request struct {
	ctx context.Context
	ApiService *SfcAPIService
	sfcId string
	xOperatorId *string
	xTenantId *string
	projectId *string
	fieldType *string
	customfieldId *string
	updateSfcFieldV3Request *UpdateSfcFieldV3Request
}

// 操作者ID
func (r ApiUpdateSfcFieldV3Request) XOperatorId(xOperatorId string) ApiUpdateSfcFieldV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateSfcFieldV3Request) XTenantId(xTenantId string) ApiUpdateSfcFieldV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 项目ID
func (r ApiUpdateSfcFieldV3Request) ProjectId(projectId string) ApiUpdateSfcFieldV3Request {
	r.projectId = &projectId
	return r
}

// 字段类型，可选值: - &#x60;note&#x60; 备注 - &#x60;priority&#x60; 优先级 - &#x60;tag&#x60; 标签 - &#x60;storyPoint&#x60; - &#x60;taskProgress&#x60; 进度 - &#x60;sprint&#x60; 迭代 - &#x60;customfield&#x60; 自定义字段 
func (r ApiUpdateSfcFieldV3Request) FieldType(fieldType string) ApiUpdateSfcFieldV3Request {
	r.fieldType = &fieldType
	return r
}

// 自定义字段ID，当 fieldType 为 customfield 时需要
func (r ApiUpdateSfcFieldV3Request) CustomfieldId(customfieldId string) ApiUpdateSfcFieldV3Request {
	r.customfieldId = &customfieldId
	return r
}

// 
func (r ApiUpdateSfcFieldV3Request) UpdateSfcFieldV3Request(updateSfcFieldV3Request UpdateSfcFieldV3Request) ApiUpdateSfcFieldV3Request {
	r.updateSfcFieldV3Request = &updateSfcFieldV3Request
	return r
}

func (r ApiUpdateSfcFieldV3Request) Execute() (*DeleteSfcFieldV3Response, *http.Response, error) {
	return r.ApiService.UpdateSfcFieldV3Execute(r)
}

/*
UpdateSfcFieldV3 创建/修改 项目/企业的任务类型的字段

创建/修改 项目/企业的任务类型的字段

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sfcId 任务类型ID
 @return ApiUpdateSfcFieldV3Request

  @link https://open.teambition.com/docs/apis/63c7e586912d20d3b53cebc0 document
*/
func (a *SfcAPIService) UpdateSfcFieldV3(ctx context.Context, sfcId string) ApiUpdateSfcFieldV3Request {
	return ApiUpdateSfcFieldV3Request{
		ApiService: a,
		ctx: ctx,
		sfcId: sfcId,
	}
}

// Execute executes the request
//  @return DeleteSfcFieldV3Response
func (a *SfcAPIService) UpdateSfcFieldV3Execute(r ApiUpdateSfcFieldV3Request) (*DeleteSfcFieldV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteSfcFieldV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/sfc/{sfcId}/sf"
	localVarPath = strings.Replace(localVarPath, "{"+"sfcId"+"}", url.PathEscape(parameterValueToString(r.sfcId, "sfcId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "")
	}
	if r.fieldType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldType", r.fieldType, "")
	}
	if r.customfieldId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customfieldId", r.customfieldId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateSfcFieldV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSfcTaskflowV3Request struct {
	ctx context.Context
	ApiService *SfcAPIService
	sfcId string
	xOperatorId *string
	xTenantId *string
	projectId *string
	updateSfcTaskflowV3Request *UpdateSfcTaskflowV3Request
}

// 操作者ID
func (r ApiUpdateSfcTaskflowV3Request) XOperatorId(xOperatorId string) ApiUpdateSfcTaskflowV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateSfcTaskflowV3Request) XTenantId(xTenantId string) ApiUpdateSfcTaskflowV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 项目ID
func (r ApiUpdateSfcTaskflowV3Request) ProjectId(projectId string) ApiUpdateSfcTaskflowV3Request {
	r.projectId = &projectId
	return r
}

// 
func (r ApiUpdateSfcTaskflowV3Request) UpdateSfcTaskflowV3Request(updateSfcTaskflowV3Request UpdateSfcTaskflowV3Request) ApiUpdateSfcTaskflowV3Request {
	r.updateSfcTaskflowV3Request = &updateSfcTaskflowV3Request
	return r
}

func (r ApiUpdateSfcTaskflowV3Request) Execute() (*UpdateSfcTaskflowV3Response, *http.Response, error) {
	return r.ApiService.UpdateSfcTaskflowV3Execute(r)
}

/*
UpdateSfcTaskflowV3 修改项目下任务类型绑定工作流

修改项目下任务类型绑定工作流

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sfcId 任务类型ID
 @return ApiUpdateSfcTaskflowV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49cf7 document
*/
func (a *SfcAPIService) UpdateSfcTaskflowV3(ctx context.Context, sfcId string) ApiUpdateSfcTaskflowV3Request {
	return ApiUpdateSfcTaskflowV3Request{
		ApiService: a,
		ctx: ctx,
		sfcId: sfcId,
	}
}

// Execute executes the request
//  @return UpdateSfcTaskflowV3Response
func (a *SfcAPIService) UpdateSfcTaskflowV3Execute(r ApiUpdateSfcTaskflowV3Request) (*UpdateSfcTaskflowV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateSfcTaskflowV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/sfc/{sfcId}/taskflow"
	localVarPath = strings.Replace(localVarPath, "{"+"sfcId"+"}", url.PathEscape(parameterValueToString(r.sfcId, "sfcId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateSfcTaskflowV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSfcV3Request struct {
	ctx context.Context
	ApiService *SfcAPIService
	sfcId string
	xOperatorId *string
	xTenantId *string
	projectId *string
	updateSfcV3Request *UpdateSfcV3Request
}

// 操作者ID
func (r ApiUpdateSfcV3Request) XOperatorId(xOperatorId string) ApiUpdateSfcV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateSfcV3Request) XTenantId(xTenantId string) ApiUpdateSfcV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 项目ID
func (r ApiUpdateSfcV3Request) ProjectId(projectId string) ApiUpdateSfcV3Request {
	r.projectId = &projectId
	return r
}

// 
func (r ApiUpdateSfcV3Request) UpdateSfcV3Request(updateSfcV3Request UpdateSfcV3Request) ApiUpdateSfcV3Request {
	r.updateSfcV3Request = &updateSfcV3Request
	return r
}

func (r ApiUpdateSfcV3Request) Execute() (*CreateSfcV3Response, *http.Response, error) {
	return r.ApiService.UpdateSfcV3Execute(r)
}

/*
UpdateSfcV3 修改项目任务类型(提交项目ID), 修改企业任务类型

修改项目任务类型(提交项目ID)，修改企业任务类型

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sfcId 任务类型ID
 @return ApiUpdateSfcV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a49c43 document
*/
func (a *SfcAPIService) UpdateSfcV3(ctx context.Context, sfcId string) ApiUpdateSfcV3Request {
	return ApiUpdateSfcV3Request{
		ApiService: a,
		ctx: ctx,
		sfcId: sfcId,
	}
}

// Execute executes the request
//  @return CreateSfcV3Response
func (a *SfcAPIService) UpdateSfcV3Execute(r ApiUpdateSfcV3Request) (*CreateSfcV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateSfcV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/sfc/{sfcId}"
	localVarPath = strings.Replace(localVarPath, "{"+"sfcId"+"}", url.PathEscape(parameterValueToString(r.sfcId, "sfcId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateSfcV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
