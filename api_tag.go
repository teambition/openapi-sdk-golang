/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// TagAPIService TagAPI service
type TagAPIService service

type ApiCreateOrgTagV3Request struct {
	ctx context.Context
	ApiService *TagAPIService
	xOperatorId *string
	xTenantId *string
	createOrgTagV3Request *CreateOrgTagV3Request
}

// 操作者ID
func (r ApiCreateOrgTagV3Request) XOperatorId(xOperatorId string) ApiCreateOrgTagV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateOrgTagV3Request) XTenantId(xTenantId string) ApiCreateOrgTagV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateOrgTagV3Request) CreateOrgTagV3Request(createOrgTagV3Request CreateOrgTagV3Request) ApiCreateOrgTagV3Request {
	r.createOrgTagV3Request = &createOrgTagV3Request
	return r
}

func (r ApiCreateOrgTagV3Request) Execute() (*CreateProjectTagV3Response, *http.Response, error) {
	return r.ApiService.CreateOrgTagV3Execute(r)
}

/*
CreateOrgTagV3 创建企业标签

创建企业标签

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateOrgTagV3Request

  @link https://open.teambition.com/docs/apis/63ee3ea2912d20d3b543f21f document
*/
func (a *TagAPIService) CreateOrgTagV3(ctx context.Context) ApiCreateOrgTagV3Request {
	return ApiCreateOrgTagV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateProjectTagV3Response
func (a *TagAPIService) CreateOrgTagV3Execute(r ApiCreateOrgTagV3Request) (*CreateProjectTagV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateProjectTagV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/tag/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createOrgTagV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchOrgTagsV3Request struct {
	ctx context.Context
	ApiService *TagAPIService
	xTenantId *string
	q *string
	tagIds *string
	pageSize *int32
	pageToken *string
}

// 企业 ID
func (r ApiSearchOrgTagsV3Request) XTenantId(xTenantId string) ApiSearchOrgTagsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 模糊查询标签名称
func (r ApiSearchOrgTagsV3Request) Q(q string) ApiSearchOrgTagsV3Request {
	r.q = &q
	return r
}

// 标签ID集合，逗号组合
func (r ApiSearchOrgTagsV3Request) TagIds(tagIds string) ApiSearchOrgTagsV3Request {
	r.tagIds = &tagIds
	return r
}

// 每页长度
func (r ApiSearchOrgTagsV3Request) PageSize(pageSize int32) ApiSearchOrgTagsV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchOrgTagsV3Request) PageToken(pageToken string) ApiSearchOrgTagsV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiSearchOrgTagsV3Request) Execute() (*SearchOrgTagsV3Response, *http.Response, error) {
	return r.ApiService.SearchOrgTagsV3Execute(r)
}

/*
SearchOrgTagsV3 搜索企业标签

搜索企业标签

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchOrgTagsV3Request

  @link https://open.teambition.com/docs/apis/63ee3ea2912d20d3b543f28b document
*/
func (a *TagAPIService) SearchOrgTagsV3(ctx context.Context) ApiSearchOrgTagsV3Request {
	return ApiSearchOrgTagsV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchOrgTagsV3Response
func (a *TagAPIService) SearchOrgTagsV3Execute(r ApiSearchOrgTagsV3Request) (*SearchOrgTagsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchOrgTagsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/tag/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tagIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tagIds", r.tagIds, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
