/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TaskAPIService TaskAPI service
type TaskAPIService service

type ApiArchiveTaskV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
}

// 操作者ID
func (r ApiArchiveTaskV3Request) XOperatorId(xOperatorId string) ApiArchiveTaskV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiArchiveTaskV3Request) XTenantId(xTenantId string) ApiArchiveTaskV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiArchiveTaskV3Request) Execute() (*ArchiveTaskV3Response, *http.Response, error) {
	return r.ApiService.ArchiveTaskV3Execute(r)
}

/*
ArchiveTaskV3 归档任务(移入回收站)

归档任务(移入回收站)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiArchiveTaskV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a43a document
*/
func (a *TaskAPIService) ArchiveTaskV3(ctx context.Context, taskId string) ApiArchiveTaskV3Request {
	return ApiArchiveTaskV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return ArchiveTaskV3Response
func (a *TaskAPIService) ArchiveTaskV3Execute(r ApiArchiveTaskV3Request) (*ArchiveTaskV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ArchiveTaskV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/archive"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTaskCommentV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	createTaskCommentV3Request *CreateTaskCommentV3Request
}

// 评论人ID
func (r ApiCreateTaskCommentV3Request) XOperatorId(xOperatorId string) ApiCreateTaskCommentV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateTaskCommentV3Request) XTenantId(xTenantId string) ApiCreateTaskCommentV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateTaskCommentV3Request) CreateTaskCommentV3Request(createTaskCommentV3Request CreateTaskCommentV3Request) ApiCreateTaskCommentV3Request {
	r.createTaskCommentV3Request = &createTaskCommentV3Request
	return r
}

func (r ApiCreateTaskCommentV3Request) Execute() (*CreateTaskCommentV3Response, *http.Response, error) {
	return r.ApiService.CreateTaskCommentV3Execute(r)
}

/*
CreateTaskCommentV3 评论任务

评论任务

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiCreateTaskCommentV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a469 document
*/
func (a *TaskAPIService) CreateTaskCommentV3(ctx context.Context, taskId string) ApiCreateTaskCommentV3Request {
	return ApiCreateTaskCommentV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return CreateTaskCommentV3Response
func (a *TaskAPIService) CreateTaskCommentV3Execute(r ApiCreateTaskCommentV3Request) (*CreateTaskCommentV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTaskCommentV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/comment"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createTaskCommentV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTaskDependencyV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	xOperatorId *string
	xTenantId *string
	createTaskDependencyV3Request *CreateTaskDependencyV3Request
}

// 操作者ID
func (r ApiCreateTaskDependencyV3Request) XOperatorId(xOperatorId string) ApiCreateTaskDependencyV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateTaskDependencyV3Request) XTenantId(xTenantId string) ApiCreateTaskDependencyV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateTaskDependencyV3Request) CreateTaskDependencyV3Request(createTaskDependencyV3Request CreateTaskDependencyV3Request) ApiCreateTaskDependencyV3Request {
	r.createTaskDependencyV3Request = &createTaskDependencyV3Request
	return r
}

func (r ApiCreateTaskDependencyV3Request) Execute() (*CreateTaskDependencyV3Response, *http.Response, error) {
	return r.ApiService.CreateTaskDependencyV3Execute(r)
}

/*
CreateTaskDependencyV3 创建任务依赖

创建任务依赖

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTaskDependencyV3Request

  @link https://open.teambition.com/docs/apis/65bcb725912d20d3b57a1c76 document
*/
func (a *TaskAPIService) CreateTaskDependencyV3(ctx context.Context) ApiCreateTaskDependencyV3Request {
	return ApiCreateTaskDependencyV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTaskDependencyV3Response
func (a *TaskAPIService) CreateTaskDependencyV3Execute(r ApiCreateTaskDependencyV3Request) (*CreateTaskDependencyV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTaskDependencyV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/dependency/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createTaskDependencyV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTaskLinkV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	createTaskLinkV3Request *CreateTaskLinkV3Request
}

// 操作者ID
func (r ApiCreateTaskLinkV3Request) XOperatorId(xOperatorId string) ApiCreateTaskLinkV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateTaskLinkV3Request) XTenantId(xTenantId string) ApiCreateTaskLinkV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateTaskLinkV3Request) CreateTaskLinkV3Request(createTaskLinkV3Request CreateTaskLinkV3Request) ApiCreateTaskLinkV3Request {
	r.createTaskLinkV3Request = &createTaskLinkV3Request
	return r
}

func (r ApiCreateTaskLinkV3Request) Execute() (*CreateTaskLinkV3Response, *http.Response, error) {
	return r.ApiService.CreateTaskLinkV3Execute(r)
}

/*
CreateTaskLinkV3 创建任务关联

创建任务关联

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiCreateTaskLinkV3Request

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a728 document
*/
func (a *TaskAPIService) CreateTaskLinkV3(ctx context.Context, taskId string) ApiCreateTaskLinkV3Request {
	return ApiCreateTaskLinkV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return CreateTaskLinkV3Response
func (a *TaskAPIService) CreateTaskLinkV3Execute(r ApiCreateTaskLinkV3Request) (*CreateTaskLinkV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTaskLinkV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/objectlinks"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createTaskLinkV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTaskTraceV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	createTaskTraceV3Request *CreateTaskTraceV3Request
}

// 操作者 ID
func (r ApiCreateTaskTraceV3Request) XOperatorId(xOperatorId string) ApiCreateTaskTraceV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateTaskTraceV3Request) XTenantId(xTenantId string) ApiCreateTaskTraceV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateTaskTraceV3Request) CreateTaskTraceV3Request(createTaskTraceV3Request CreateTaskTraceV3Request) ApiCreateTaskTraceV3Request {
	r.createTaskTraceV3Request = &createTaskTraceV3Request
	return r
}

func (r ApiCreateTaskTraceV3Request) Execute() (*CreateTaskTraceV3Response, *http.Response, error) {
	return r.ApiService.CreateTaskTraceV3Execute(r)
}

/*
CreateTaskTraceV3 创建任务进展

创建任务进展

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务 ID
 @return ApiCreateTaskTraceV3Request

  @link https://open.teambition.com/docs/apis/63ee3ea3912d20d3b543f315 document
*/
func (a *TaskAPIService) CreateTaskTraceV3(ctx context.Context, taskId string) ApiCreateTaskTraceV3Request {
	return ApiCreateTaskTraceV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return CreateTaskTraceV3Response
func (a *TaskAPIService) CreateTaskTraceV3Execute(r ApiCreateTaskTraceV3Request) (*CreateTaskTraceV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTaskTraceV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/trace/create"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createTaskTraceV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTaskV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	xOperatorId *string
	xTenantId *string
	createTaskV3Request *CreateTaskV3Request
}

// 任务创建人
func (r ApiCreateTaskV3Request) XOperatorId(xOperatorId string) ApiCreateTaskV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiCreateTaskV3Request) XTenantId(xTenantId string) ApiCreateTaskV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiCreateTaskV3Request) CreateTaskV3Request(createTaskV3Request CreateTaskV3Request) ApiCreateTaskV3Request {
	r.createTaskV3Request = &createTaskV3Request
	return r
}

func (r ApiCreateTaskV3Request) Execute() (*CreateTaskV3Response, *http.Response, error) {
	return r.ApiService.CreateTaskV3Execute(r)
}

/*
CreateTaskV3 创建任务

创建任务

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTaskV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a514 document
*/
func (a *TaskAPIService) CreateTaskV3(ctx context.Context) ApiCreateTaskV3Request {
	return ApiCreateTaskV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateTaskV3Response
func (a *TaskAPIService) CreateTaskV3Execute(r ApiCreateTaskV3Request) (*CreateTaskV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTaskV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.createTaskV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTaskDependencyV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	dependencyId string
	xOperatorId *string
	xTenantId *string
}

// 操作者ID
func (r ApiDeleteTaskDependencyV3Request) XOperatorId(xOperatorId string) ApiDeleteTaskDependencyV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteTaskDependencyV3Request) XTenantId(xTenantId string) ApiDeleteTaskDependencyV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiDeleteTaskDependencyV3Request) Execute() (*DeleteTaskDependencyV3Response, *http.Response, error) {
	return r.ApiService.DeleteTaskDependencyV3Execute(r)
}

/*
DeleteTaskDependencyV3 删除任务依赖

删除任务依赖

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dependencyId 依赖ID
 @return ApiDeleteTaskDependencyV3Request

  @link https://open.teambition.com/docs/apis/65e5c202912d20d3b50a63ad document
*/
func (a *TaskAPIService) DeleteTaskDependencyV3(ctx context.Context, dependencyId string) ApiDeleteTaskDependencyV3Request {
	return ApiDeleteTaskDependencyV3Request{
		ApiService: a,
		ctx: ctx,
		dependencyId: dependencyId,
	}
}

// Execute executes the request
//  @return DeleteTaskDependencyV3Response
func (a *TaskAPIService) DeleteTaskDependencyV3Execute(r ApiDeleteTaskDependencyV3Request) (*DeleteTaskDependencyV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteTaskDependencyV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/dependency/{dependencyId}/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"dependencyId"+"}", url.PathEscape(parameterValueToString(r.dependencyId, "dependencyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTaskLinkV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	objectlinkId string
	xOperatorId *string
	xTenantId *string
	body *map[string]interface{}
}

// 操作者ID
func (r ApiDeleteTaskLinkV3Request) XOperatorId(xOperatorId string) ApiDeleteTaskLinkV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteTaskLinkV3Request) XTenantId(xTenantId string) ApiDeleteTaskLinkV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiDeleteTaskLinkV3Request) Body(body map[string]interface{}) ApiDeleteTaskLinkV3Request {
	r.body = &body
	return r
}

func (r ApiDeleteTaskLinkV3Request) Execute() (*DeleteTaskLinkV3Response, *http.Response, error) {
	return r.ApiService.DeleteTaskLinkV3Execute(r)
}

/*
DeleteTaskLinkV3 删除任务关联

删除任务关联

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @param objectlinkId 关联ID
 @return ApiDeleteTaskLinkV3Request

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a754 document
*/
func (a *TaskAPIService) DeleteTaskLinkV3(ctx context.Context, taskId string, objectlinkId string) ApiDeleteTaskLinkV3Request {
	return ApiDeleteTaskLinkV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
		objectlinkId: objectlinkId,
	}
}

// Execute executes the request
//  @return DeleteTaskLinkV3Response
func (a *TaskAPIService) DeleteTaskLinkV3Execute(r ApiDeleteTaskLinkV3Request) (*DeleteTaskLinkV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteTaskLinkV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/objectlinks/{objectlinkId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"objectlinkId"+"}", url.PathEscape(parameterValueToString(r.objectlinkId, "objectlinkId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTaskV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	body *map[string]interface{}
}

// 操作者ID
func (r ApiDeleteTaskV3Request) XOperatorId(xOperatorId string) ApiDeleteTaskV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiDeleteTaskV3Request) XTenantId(xTenantId string) ApiDeleteTaskV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiDeleteTaskV3Request) Body(body map[string]interface{}) ApiDeleteTaskV3Request {
	r.body = &body
	return r
}

func (r ApiDeleteTaskV3Request) Execute() (*DeleteTaskV3Response, *http.Response, error) {
	return r.ApiService.DeleteTaskV3Execute(r)
}

/*
DeleteTaskV3 删除任务

删除任务

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiDeleteTaskV3Request

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a5e1 document
*/
func (a *TaskAPIService) DeleteTaskV3(ctx context.Context, taskId string) ApiDeleteTaskV3Request {
	return ApiDeleteTaskV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return DeleteTaskV3Response
func (a *TaskAPIService) DeleteTaskV3Execute(r ApiDeleteTaskV3Request) (*DeleteTaskV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteTaskV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTaskDependenciesV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	xOperatorId *string
	xTenantId *string
	taskId *string
	pageSize *int32
	pageToken *string
}

// 操作者ID
func (r ApiGetTaskDependenciesV3Request) XOperatorId(xOperatorId string) ApiGetTaskDependenciesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiGetTaskDependenciesV3Request) XTenantId(xTenantId string) ApiGetTaskDependenciesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 任务ID集合,使用逗号分隔
func (r ApiGetTaskDependenciesV3Request) TaskId(taskId string) ApiGetTaskDependenciesV3Request {
	r.taskId = &taskId
	return r
}

// 返回数量
func (r ApiGetTaskDependenciesV3Request) PageSize(pageSize int32) ApiGetTaskDependenciesV3Request {
	r.pageSize = &pageSize
	return r
}

// pageToken
func (r ApiGetTaskDependenciesV3Request) PageToken(pageToken string) ApiGetTaskDependenciesV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiGetTaskDependenciesV3Request) Execute() (*GetTaskDependenciesV3Response, *http.Response, error) {
	return r.ApiService.GetTaskDependenciesV3Execute(r)
}

/*
GetTaskDependenciesV3 获取任务依赖

获取任务依赖

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTaskDependenciesV3Request

  @link https://open.teambition.com/docs/apis/63613a18912d20d3b5296e6d document
*/
func (a *TaskAPIService) GetTaskDependenciesV3(ctx context.Context) ApiGetTaskDependenciesV3Request {
	return ApiGetTaskDependenciesV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTaskDependenciesV3Response
func (a *TaskAPIService) GetTaskDependenciesV3Execute(r ApiGetTaskDependenciesV3Request) (*GetTaskDependenciesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTaskDependenciesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/dependency"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.taskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskId", r.taskId, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTaskLinksV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
}

// 操作者ID
func (r ApiGetTaskLinksV3Request) XOperatorId(xOperatorId string) ApiGetTaskLinksV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiGetTaskLinksV3Request) XTenantId(xTenantId string) ApiGetTaskLinksV3Request {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiGetTaskLinksV3Request) Execute() (*GetTaskLinksV3Response, *http.Response, error) {
	return r.ApiService.GetTaskLinksV3Execute(r)
}

/*
GetTaskLinksV3 获取任务关联列表

获取任务关联列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiGetTaskLinksV3Request

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a6fb document
*/
func (a *TaskAPIService) GetTaskLinksV3(ctx context.Context, taskId string) ApiGetTaskLinksV3Request {
	return ApiGetTaskLinksV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return GetTaskLinksV3Response
func (a *TaskAPIService) GetTaskLinksV3Execute(r ApiGetTaskLinksV3Request) (*GetTaskLinksV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTaskLinksV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/objectlinks"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTaskTableCustomFieldV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	customfieldId *string
}

// 
func (r ApiGetTaskTableCustomFieldV3Request) XOperatorId(xOperatorId string) ApiGetTaskTableCustomFieldV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiGetTaskTableCustomFieldV3Request) XTenantId(xTenantId string) ApiGetTaskTableCustomFieldV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiGetTaskTableCustomFieldV3Request) CustomfieldId(customfieldId string) ApiGetTaskTableCustomFieldV3Request {
	r.customfieldId = &customfieldId
	return r
}

func (r ApiGetTaskTableCustomFieldV3Request) Execute() (*GetProjectTableCustomFieldResponse, *http.Response, error) {
	return r.ApiService.GetTaskTableCustomFieldV3Execute(r)
}

/*
GetTaskTableCustomFieldV3 获取任务的表格自定义字段

获取任务的表格自定义字段

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiGetTaskTableCustomFieldV3Request

  @link https://open.teambition.com/docs/apis/682c19c9912d20d3b5a477bf document
*/
func (a *TaskAPIService) GetTaskTableCustomFieldV3(ctx context.Context, taskId string) ApiGetTaskTableCustomFieldV3Request {
	return ApiGetTaskTableCustomFieldV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return GetProjectTableCustomFieldResponse
func (a *TaskAPIService) GetTaskTableCustomFieldV3Execute(r ApiGetTaskTableCustomFieldV3Request) (*GetProjectTableCustomFieldResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetProjectTableCustomFieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/customfield/table"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.customfieldId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customfieldId", r.customfieldId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTaskTracesV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	pageSize *int32
	pageToken *string
}

// 操作者 ID
func (r ApiGetTaskTracesV3Request) XOperatorId(xOperatorId string) ApiGetTaskTracesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiGetTaskTracesV3Request) XTenantId(xTenantId string) ApiGetTaskTracesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 每页长度
func (r ApiGetTaskTracesV3Request) PageSize(pageSize int32) ApiGetTaskTracesV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiGetTaskTracesV3Request) PageToken(pageToken string) ApiGetTaskTracesV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiGetTaskTracesV3Request) Execute() (*GetTaskTracesV3Response, *http.Response, error) {
	return r.ApiService.GetTaskTracesV3Execute(r)
}

/*
GetTaskTracesV3 获取任务进展

获取任务进展

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务 ID
 @return ApiGetTaskTracesV3Request

  @link https://open.teambition.com/docs/apis/6363bcfa912d20d3b56faed0 document
*/
func (a *TaskAPIService) GetTaskTracesV3(ctx context.Context, taskId string) ApiGetTaskTracesV3Request {
	return ApiGetTaskTracesV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return GetTaskTracesV3Response
func (a *TaskAPIService) GetTaskTracesV3Execute(r ApiGetTaskTracesV3Request) (*GetTaskTracesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTaskTracesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/traces"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTemplateV2Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	xTenantId *string
	templateId *string
}

// 企业 ID
func (r ApiGetTemplateV2Request) XTenantId(xTenantId string) ApiGetTemplateV2Request {
	r.xTenantId = &xTenantId
	return r
}

// 模板 ID
func (r ApiGetTemplateV2Request) TemplateId(templateId string) ApiGetTemplateV2Request {
	r.templateId = &templateId
	return r
}

func (r ApiGetTemplateV2Request) Execute() (*GetTemplateV2Response, *http.Response, error) {
	return r.ApiService.GetTemplateV2Execute(r)
}

/*
GetTemplateV2 根据ID获取任务类型信息V2

根据ID获取任务类型信息V2

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTemplateV2Request

  @link https://open.teambition.com/docs/apis/6321c6d4912d20d3b5a4b2e0 document
*/
func (a *TaskAPIService) GetTemplateV2(ctx context.Context) ApiGetTemplateV2Request {
	return ApiGetTemplateV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTemplateV2Response
func (a *TaskAPIService) GetTemplateV2Execute(r ApiGetTemplateV2Request) (*GetTemplateV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTemplateV2Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/template/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.templateId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "templateId", r.templateId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTaskActivitiesV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xTenantId *string
	pageSize *int32
	pageToken *string
	actions *string
	excludeActions *string
	creatorIds *string
	language *string
	orderBy *string
}

// 企业 ID
func (r ApiListTaskActivitiesV3Request) XTenantId(xTenantId string) ApiListTaskActivitiesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 分页大小
func (r ApiListTaskActivitiesV3Request) PageSize(pageSize int32) ApiListTaskActivitiesV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiListTaskActivitiesV3Request) PageToken(pageToken string) ApiListTaskActivitiesV3Request {
	r.pageToken = &pageToken
	return r
}

// 过滤动态名称，用逗号「,」分隔
func (r ApiListTaskActivitiesV3Request) Actions(actions string) ApiListTaskActivitiesV3Request {
	r.actions = &actions
	return r
}

// 排除动态名称，用逗号「,」分隔
func (r ApiListTaskActivitiesV3Request) ExcludeActions(excludeActions string) ApiListTaskActivitiesV3Request {
	r.excludeActions = &excludeActions
	return r
}

// 需要过滤的动态创建人ID，用逗号分隔
func (r ApiListTaskActivitiesV3Request) CreatorIds(creatorIds string) ApiListTaskActivitiesV3Request {
	r.creatorIds = &creatorIds
	return r
}

// 支持语言参数，返回可读动态文本，可选值 zh_CN, zh_TW, en_US
func (r ApiListTaskActivitiesV3Request) Language(language string) ApiListTaskActivitiesV3Request {
	r.language = &language
	return r
}

// 排序方式，可选值 created, created_desc, updated, updated_desc
func (r ApiListTaskActivitiesV3Request) OrderBy(orderBy string) ApiListTaskActivitiesV3Request {
	r.orderBy = &orderBy
	return r
}

func (r ApiListTaskActivitiesV3Request) Execute() (*ListTaskActivitiesV3Response, *http.Response, error) {
	return r.ApiService.ListTaskActivitiesV3Execute(r)
}

/*
ListTaskActivitiesV3 列出任务动态

列出任务动态

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiListTaskActivitiesV3Request

  @link https://open.teambition.com/docs/apis/6363bcfb912d20d3b56fb3f4 document
*/
func (a *TaskAPIService) ListTaskActivitiesV3(ctx context.Context, taskId string) ApiListTaskActivitiesV3Request {
	return ApiListTaskActivitiesV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return ListTaskActivitiesV3Response
func (a *TaskAPIService) ListTaskActivitiesV3Execute(r ApiListTaskActivitiesV3Request) (*ListTaskActivitiesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListTaskActivitiesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/activity/list"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.actions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "actions", r.actions, "")
	}
	if r.excludeActions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeActions", r.excludeActions, "")
	}
	if r.creatorIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creatorIds", r.creatorIds, "")
	}
	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMoveOrgTaskToProjectRequest struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	moveOrgTaskToProjectRequest *MoveOrgTaskToProjectRequest
}

// 操作者ID
func (r ApiMoveOrgTaskToProjectRequest) XOperatorId(xOperatorId string) ApiMoveOrgTaskToProjectRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiMoveOrgTaskToProjectRequest) XTenantId(xTenantId string) ApiMoveOrgTaskToProjectRequest {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiMoveOrgTaskToProjectRequest) MoveOrgTaskToProjectRequest(moveOrgTaskToProjectRequest MoveOrgTaskToProjectRequest) ApiMoveOrgTaskToProjectRequest {
	r.moveOrgTaskToProjectRequest = &moveOrgTaskToProjectRequest
	return r
}

func (r ApiMoveOrgTaskToProjectRequest) Execute() (*MoveOrgTaskToProjectResponse, *http.Response, error) {
	return r.ApiService.MoveOrgTaskToProjectExecute(r)
}

/*
MoveOrgTaskToProject 轻任务移动到项目中

轻任务移动到项目中

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiMoveOrgTaskToProjectRequest

  @link https://open.teambition.com/docs/apis/6823ee2e912d20d3b52ae3da document
*/
func (a *TaskAPIService) MoveOrgTaskToProject(ctx context.Context, taskId string) ApiMoveOrgTaskToProjectRequest {
	return ApiMoveOrgTaskToProjectRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return MoveOrgTaskToProjectResponse
func (a *TaskAPIService) MoveOrgTaskToProjectExecute(r ApiMoveOrgTaskToProjectRequest) (*MoveOrgTaskToProjectResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MoveOrgTaskToProjectResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/organization-task/{taskId}/move"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.moveOrgTaskToProjectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMoveTaskV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	moveTaskV3Request *MoveTaskV3Request
}

// 操作者ID
func (r ApiMoveTaskV3Request) XOperatorId(xOperatorId string) ApiMoveTaskV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiMoveTaskV3Request) XTenantId(xTenantId string) ApiMoveTaskV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiMoveTaskV3Request) MoveTaskV3Request(moveTaskV3Request MoveTaskV3Request) ApiMoveTaskV3Request {
	r.moveTaskV3Request = &moveTaskV3Request
	return r
}

func (r ApiMoveTaskV3Request) Execute() (*MoveTaskV3Response, *http.Response, error) {
	return r.ApiService.MoveTaskV3Execute(r)
}

/*
MoveTaskV3 跨项目移动任务

跨项目移动任务

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiMoveTaskV3Request

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a69f document
*/
func (a *TaskAPIService) MoveTaskV3(ctx context.Context, taskId string) ApiMoveTaskV3Request {
	return ApiMoveTaskV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return MoveTaskV3Response
func (a *TaskAPIService) MoveTaskV3Execute(r ApiMoveTaskV3Request) (*MoveTaskV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MoveTaskV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/move"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.moveTaskV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryTaskV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	xOperatorId *string
	xTenantId *string
	taskId *string
	shortIds *string
	parentTaskId *string
}

// 查询人ID, 如果存在会检查该成员可见的任务
func (r ApiQueryTaskV3Request) XOperatorId(xOperatorId string) ApiQueryTaskV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiQueryTaskV3Request) XTenantId(xTenantId string) ApiQueryTaskV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 任务ID集合,使用逗号分隔,和parentTaskId冲突(选其一)
func (r ApiQueryTaskV3Request) TaskId(taskId string) ApiQueryTaskV3Request {
	r.taskId = &taskId
	return r
}

// 任务短ID集合,使用逗号分隔
func (r ApiQueryTaskV3Request) ShortIds(shortIds string) ApiQueryTaskV3Request {
	r.shortIds = &shortIds
	return r
}

// 父任务ID,和taskId冲突(选其一)
func (r ApiQueryTaskV3Request) ParentTaskId(parentTaskId string) ApiQueryTaskV3Request {
	r.parentTaskId = &parentTaskId
	return r
}

func (r ApiQueryTaskV3Request) Execute() (*QueryTaskV3Response, *http.Response, error) {
	return r.ApiService.QueryTaskV3Execute(r)
}

/*
QueryTaskV3 查询任务详情

查询任务详情

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryTaskV3Request

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a7b8 document
*/
func (a *TaskAPIService) QueryTaskV3(ctx context.Context) ApiQueryTaskV3Request {
	return ApiQueryTaskV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryTaskV3Response
func (a *TaskAPIService) QueryTaskV3Execute(r ApiQueryTaskV3Request) (*QueryTaskV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryTaskV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.taskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskId", r.taskId, "")
	}
	if r.shortIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shortIds", r.shortIds, "")
	}
	if r.parentTaskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parentTaskId", r.parentTaskId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRenderTaskRtfV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	xOperatorId *string
	xTenantId *string
	rtfFields *string
	htmlExpireSeconds *int32
}

// 查询人ID
func (r ApiRenderTaskRtfV3Request) XOperatorId(xOperatorId string) ApiRenderTaskRtfV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiRenderTaskRtfV3Request) XTenantId(xTenantId string) ApiRenderTaskRtfV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 富文本字段标识，多个标识之间用逗号分割，最多支持 50 个 - 富文本字段：&#x60;任务ID:cf:字段ID&#x60; 如 &#x60;60471fc306c1e046e63759c4:cf:63d61d1cbde6c83a2ce729d6&#x60; - 富文本备注：&#x60;任务ID:note&#x60; 如 &#x60;60471fc306c1e046e63759c4:note&#x60; 
func (r ApiRenderTaskRtfV3Request) RtfFields(rtfFields string) ApiRenderTaskRtfV3Request {
	r.rtfFields = &rtfFields
	return r
}

// 渲染html时内容过期时间，默认为 1800(秒)，最小为 600(秒)，最大为 3600(秒)
func (r ApiRenderTaskRtfV3Request) HtmlExpireSeconds(htmlExpireSeconds int32) ApiRenderTaskRtfV3Request {
	r.htmlExpireSeconds = &htmlExpireSeconds
	return r
}

func (r ApiRenderTaskRtfV3Request) Execute() (*RenderTaskRtfV3Response, *http.Response, error) {
	return r.ApiService.RenderTaskRtfV3Execute(r)
}

/*
RenderTaskRtfV3 任务富文本内容渲染为 html

任务富文本内容渲染为 html

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRenderTaskRtfV3Request

  @link https://open.teambition.com/docs/apis/65309201912d20d3b5cf2ab8 document
*/
func (a *TaskAPIService) RenderTaskRtfV3(ctx context.Context) ApiRenderTaskRtfV3Request {
	return ApiRenderTaskRtfV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RenderTaskRtfV3Response
func (a *TaskAPIService) RenderTaskRtfV3Execute(r ApiRenderTaskRtfV3Request) (*RenderTaskRtfV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RenderTaskRtfV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/rtf/render"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.rtfFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rtfFields", r.rtfFields, "")
	}
	if r.htmlExpireSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "htmlExpireSeconds", r.htmlExpireSeconds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestoreTaskV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	restoreTaskV3Request *RestoreTaskV3Request
}

// 操作者ID
func (r ApiRestoreTaskV3Request) XOperatorId(xOperatorId string) ApiRestoreTaskV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiRestoreTaskV3Request) XTenantId(xTenantId string) ApiRestoreTaskV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiRestoreTaskV3Request) RestoreTaskV3Request(restoreTaskV3Request RestoreTaskV3Request) ApiRestoreTaskV3Request {
	r.restoreTaskV3Request = &restoreTaskV3Request
	return r
}

func (r ApiRestoreTaskV3Request) Execute() (*ArchiveTaskV3Response, *http.Response, error) {
	return r.ApiService.RestoreTaskV3Execute(r)
}

/*
RestoreTaskV3 恢复任务(移出回收站)

恢复任务(移出回收站)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiRestoreTaskV3Request

  @link https://open.teambition.com/docs/apis/66601201912d20d3b584bcc8 document
*/
func (a *TaskAPIService) RestoreTaskV3(ctx context.Context, taskId string) ApiRestoreTaskV3Request {
	return ApiRestoreTaskV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return ArchiveTaskV3Response
func (a *TaskAPIService) RestoreTaskV3Execute(r ApiRestoreTaskV3Request) (*ArchiveTaskV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ArchiveTaskV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/restore"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.restoreTaskV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchTasksByTQLRequest struct {
	ctx context.Context
	ApiService *TaskAPIService
	xTenantId *string
	xOperatorId *string
	tql *string
	pageSize *int32
	pageToken *string
}

// 企业 ID
func (r ApiSearchTasksByTQLRequest) XTenantId(xTenantId string) ApiSearchTasksByTQLRequest {
	r.xTenantId = &xTenantId
	return r
}

func (r ApiSearchTasksByTQLRequest) XOperatorId(xOperatorId string) ApiSearchTasksByTQLRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业下任务搜索TQL语句
func (r ApiSearchTasksByTQLRequest) Tql(tql string) ApiSearchTasksByTQLRequest {
	r.tql = &tql
	return r
}

// 分页长度
func (r ApiSearchTasksByTQLRequest) PageSize(pageSize int32) ApiSearchTasksByTQLRequest {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchTasksByTQLRequest) PageToken(pageToken string) ApiSearchTasksByTQLRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiSearchTasksByTQLRequest) Execute() (*SearchTasksByTQLResponse, *http.Response, error) {
	return r.ApiService.SearchTasksByTQLExecute(r)
}

/*
SearchTasksByTQL 通过TQL搜索自由任务和项目任务ID

通过TQL搜索自由任务和项目任务ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchTasksByTQLRequest

Deprecated

  @link https://open.teambition.com/docs/apis/64264d3e912d20d3b5883b0e document
*/
func (a *TaskAPIService) SearchTasksByTQL(ctx context.Context) ApiSearchTasksByTQLRequest {
	return ApiSearchTasksByTQLRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchTasksByTQLResponse
// Deprecated
func (a *TaskAPIService) SearchTasksByTQLExecute(r ApiSearchTasksByTQLRequest) (*SearchTasksByTQLResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchTasksByTQLResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/all-task/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tql != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tql", r.tql, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Operator-Id", r.xOperatorId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchUserTasksV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	xOperatorId *string
	xTenantId *string
	roleTypes *string
	tql *string
	pageToken *string
	pageSize *string
}

// 查询人ID, 必传
func (r ApiSearchUserTasksV3Request) XOperatorId(xOperatorId string) ApiSearchUserTasksV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiSearchUserTasksV3Request) XTenantId(xTenantId string) ApiSearchUserTasksV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 用户的任务角色, creator,executor,involveMember 中的一个或多个,以 &#39;,&#39;拼接。例如：creator,executor
func (r ApiSearchUserTasksV3Request) RoleTypes(roleTypes string) ApiSearchUserTasksV3Request {
	r.roleTypes = &roleTypes
	return r
}

// tql 参考企业下任务搜索TQL说明
func (r ApiSearchUserTasksV3Request) Tql(tql string) ApiSearchUserTasksV3Request {
	r.tql = &tql
	return r
}

// 下一页翻页token,从上一次请求结果中获得
func (r ApiSearchUserTasksV3Request) PageToken(pageToken string) ApiSearchUserTasksV3Request {
	r.pageToken = &pageToken
	return r
}

// 分页大小,默认10
func (r ApiSearchUserTasksV3Request) PageSize(pageSize string) ApiSearchUserTasksV3Request {
	r.pageSize = &pageSize
	return r
}

func (r ApiSearchUserTasksV3Request) Execute() (*SearchUserTasksV3Response, *http.Response, error) {
	return r.ApiService.SearchUserTasksV3Execute(r)
}

/*
SearchUserTasksV3 搜索用户的任务

搜索用户的任务，用户参与的/用户执行的/用户创建的

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchUserTasksV3Request

  @link https://open.teambition.com/docs/apis/63ee4160912d20d3b54548a6 document
*/
func (a *TaskAPIService) SearchUserTasksV3(ctx context.Context) ApiSearchUserTasksV3Request {
	return ApiSearchUserTasksV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchUserTasksV3Response
func (a *TaskAPIService) SearchUserTasksV3Execute(r ApiSearchUserTasksV3Request) (*SearchUserTasksV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchUserTasksV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/usertasks/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.roleTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roleTypes", r.roleTypes, "")
	}
	if r.tql != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tql", r.tql, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskContentV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskContentV3Request *UpdateTaskContentV3Request
}

// 操作者ID
func (r ApiUpdateTaskContentV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskContentV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskContentV3Request) XTenantId(xTenantId string) ApiUpdateTaskContentV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskContentV3Request) UpdateTaskContentV3Request(updateTaskContentV3Request UpdateTaskContentV3Request) ApiUpdateTaskContentV3Request {
	r.updateTaskContentV3Request = &updateTaskContentV3Request
	return r
}

func (r ApiUpdateTaskContentV3Request) Execute() (*UpdateTaskContentV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskContentV3Execute(r)
}

/*
UpdateTaskContentV3 更新任务标题

更新任务标题

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskContentV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a4a0 document
*/
func (a *TaskAPIService) UpdateTaskContentV3(ctx context.Context, taskId string) ApiUpdateTaskContentV3Request {
	return ApiUpdateTaskContentV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskContentV3Response
func (a *TaskAPIService) UpdateTaskContentV3Execute(r ApiUpdateTaskContentV3Request) (*UpdateTaskContentV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskContentV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskContentV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskCusomFieldByInstanceV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	instanceId string
	xOperatorId *string
	xTenantId *string
	updateTaskCusomFieldByInstanceV3Request *UpdateTaskCusomFieldByInstanceV3Request
}

// 操作者ID
func (r ApiUpdateTaskCusomFieldByInstanceV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskCusomFieldByInstanceV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskCusomFieldByInstanceV3Request) XTenantId(xTenantId string) ApiUpdateTaskCusomFieldByInstanceV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskCusomFieldByInstanceV3Request) UpdateTaskCusomFieldByInstanceV3Request(updateTaskCusomFieldByInstanceV3Request UpdateTaskCusomFieldByInstanceV3Request) ApiUpdateTaskCusomFieldByInstanceV3Request {
	r.updateTaskCusomFieldByInstanceV3Request = &updateTaskCusomFieldByInstanceV3Request
	return r
}

func (r ApiUpdateTaskCusomFieldByInstanceV3Request) Execute() (*UpdateTaskCusomFieldByInstanceV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskCusomFieldByInstanceV3Execute(r)
}

/*
UpdateTaskCusomFieldByInstanceV3 根据字段InstanceId更新任务自定义字段值(弃用)

根据字段InstanceId更新任务自定义字段值(弃用)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @param instanceId 字段InstanceId
 @return ApiUpdateTaskCusomFieldByInstanceV3Request

  @link https://open.teambition.com/docs/apis/6321c6d1912d20d3b5a4a545 document
*/
func (a *TaskAPIService) UpdateTaskCusomFieldByInstanceV3(ctx context.Context, taskId string, instanceId string) ApiUpdateTaskCusomFieldByInstanceV3Request {
	return ApiUpdateTaskCusomFieldByInstanceV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
		instanceId: instanceId,
	}
}

// Execute executes the request
//  @return UpdateTaskCusomFieldByInstanceV3Response
func (a *TaskAPIService) UpdateTaskCusomFieldByInstanceV3Execute(r ApiUpdateTaskCusomFieldByInstanceV3Request) (*UpdateTaskCusomFieldByInstanceV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskCusomFieldByInstanceV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/customfield-instance/{instanceId}/update"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskCusomFieldByInstanceV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskCusomFieldV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskCusomFieldV3Request *UpdateTaskCusomFieldV3Request
}

// 操作者ID
func (r ApiUpdateTaskCusomFieldV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskCusomFieldV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskCusomFieldV3Request) XTenantId(xTenantId string) ApiUpdateTaskCusomFieldV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskCusomFieldV3Request) UpdateTaskCusomFieldV3Request(updateTaskCusomFieldV3Request UpdateTaskCusomFieldV3Request) ApiUpdateTaskCusomFieldV3Request {
	r.updateTaskCusomFieldV3Request = &updateTaskCusomFieldV3Request
	return r
}

func (r ApiUpdateTaskCusomFieldV3Request) Execute() (*UpdateTaskCusomFieldByInstanceV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskCusomFieldV3Execute(r)
}

/*
UpdateTaskCusomFieldV3 更新任务自定义字段值

更新任务自定义字段值

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskCusomFieldV3Request

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a579 document
*/
func (a *TaskAPIService) UpdateTaskCusomFieldV3(ctx context.Context, taskId string) ApiUpdateTaskCusomFieldV3Request {
	return ApiUpdateTaskCusomFieldV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskCusomFieldByInstanceV3Response
func (a *TaskAPIService) UpdateTaskCusomFieldV3Execute(r ApiUpdateTaskCusomFieldV3Request) (*UpdateTaskCusomFieldByInstanceV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskCusomFieldByInstanceV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/customfield/update"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskCusomFieldV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskCustomFieldRequest struct {
	ctx context.Context
	ApiService *TaskAPIService
	xTenantId *string
	xOperatorId *string
	taskId string
	customfieldId string
	updateTaskCustomFieldRequest *UpdateTaskCustomFieldRequest
}

// 企业 ID
func (r ApiUpdateTaskCustomFieldRequest) XTenantId(xTenantId string) ApiUpdateTaskCustomFieldRequest {
	r.xTenantId = &xTenantId
	return r
}

// 操作人ID
func (r ApiUpdateTaskCustomFieldRequest) XOperatorId(xOperatorId string) ApiUpdateTaskCustomFieldRequest {
	r.xOperatorId = &xOperatorId
	return r
}

// 
func (r ApiUpdateTaskCustomFieldRequest) UpdateTaskCustomFieldRequest(updateTaskCustomFieldRequest UpdateTaskCustomFieldRequest) ApiUpdateTaskCustomFieldRequest {
	r.updateTaskCustomFieldRequest = &updateTaskCustomFieldRequest
	return r
}

func (r ApiUpdateTaskCustomFieldRequest) Execute() (*UpdateTaskCustomFieldResponse, *http.Response, error) {
	return r.ApiService.UpdateTaskCustomFieldExecute(r)
}

/*
UpdateTaskCustomField 更新任务字段信息

更新任务字段信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 
 @param customfieldId 
 @return ApiUpdateTaskCustomFieldRequest

  @link https://open.teambition.com/docs/apis/6321c6d4912d20d3b5a4b391 document
*/
func (a *TaskAPIService) UpdateTaskCustomField(ctx context.Context, taskId string, customfieldId string) ApiUpdateTaskCustomFieldRequest {
	return ApiUpdateTaskCustomFieldRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
		customfieldId: customfieldId,
	}
}

// Execute executes the request
//  @return UpdateTaskCustomFieldResponse
func (a *TaskAPIService) UpdateTaskCustomFieldExecute(r ApiUpdateTaskCustomFieldRequest) (*UpdateTaskCustomFieldResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskCustomFieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task/customfield/update"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customfieldId"+"}", url.PathEscape(parameterValueToString(r.customfieldId, "customfieldId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Operator-Id", r.xOperatorId, "")
	}
	// body params
	localVarPostBody = r.updateTaskCustomFieldRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskCustomFieldV2Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	customfieldId string
	xOperatorId *string
	xTenantId *string
	updateTaskCustomFieldV2Request *UpdateTaskCustomFieldV2Request
}

// 操作者ID
func (r ApiUpdateTaskCustomFieldV2Request) XOperatorId(xOperatorId string) ApiUpdateTaskCustomFieldV2Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskCustomFieldV2Request) XTenantId(xTenantId string) ApiUpdateTaskCustomFieldV2Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskCustomFieldV2Request) UpdateTaskCustomFieldV2Request(updateTaskCustomFieldV2Request UpdateTaskCustomFieldV2Request) ApiUpdateTaskCustomFieldV2Request {
	r.updateTaskCustomFieldV2Request = &updateTaskCustomFieldV2Request
	return r
}

func (r ApiUpdateTaskCustomFieldV2Request) Execute() (*UpdateTaskCusomFieldByInstanceV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskCustomFieldV2Execute(r)
}

/*
UpdateTaskCustomFieldV2 更新任务自定义字段值(弃用)

更新任务自定义字段值(弃用)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @param customfieldId 字段ID
 @return ApiUpdateTaskCustomFieldV2Request

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a5a8 document
*/
func (a *TaskAPIService) UpdateTaskCustomFieldV2(ctx context.Context, taskId string, customfieldId string) ApiUpdateTaskCustomFieldV2Request {
	return ApiUpdateTaskCustomFieldV2Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
		customfieldId: customfieldId,
	}
}

// Execute executes the request
//  @return UpdateTaskCusomFieldByInstanceV3Response
func (a *TaskAPIService) UpdateTaskCustomFieldV2Execute(r ApiUpdateTaskCustomFieldV2Request) (*UpdateTaskCusomFieldByInstanceV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskCusomFieldByInstanceV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/customfield/{customfieldId}/update"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customfieldId"+"}", url.PathEscape(parameterValueToString(r.customfieldId, "customfieldId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskCustomFieldV2Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskDueDateV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskDueDateV3Request *UpdateTaskDueDateV3Request
}

// 操作者ID
func (r ApiUpdateTaskDueDateV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskDueDateV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskDueDateV3Request) XTenantId(xTenantId string) ApiUpdateTaskDueDateV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskDueDateV3Request) UpdateTaskDueDateV3Request(updateTaskDueDateV3Request UpdateTaskDueDateV3Request) ApiUpdateTaskDueDateV3Request {
	r.updateTaskDueDateV3Request = &updateTaskDueDateV3Request
	return r
}

func (r ApiUpdateTaskDueDateV3Request) Execute() (*UpdateTaskDueDateV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskDueDateV3Execute(r)
}

/*
UpdateTaskDueDateV3 更新任务截止时间

更新任务截止时间

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskDueDateV3Request

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a613 document
*/
func (a *TaskAPIService) UpdateTaskDueDateV3(ctx context.Context, taskId string) ApiUpdateTaskDueDateV3Request {
	return ApiUpdateTaskDueDateV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskDueDateV3Response
func (a *TaskAPIService) UpdateTaskDueDateV3Execute(r ApiUpdateTaskDueDateV3Request) (*UpdateTaskDueDateV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskDueDateV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/dueDate"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskDueDateV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskExecutorV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskExecutorV3Request *UpdateTaskExecutorV3Request
}

// 操作者用户ID
func (r ApiUpdateTaskExecutorV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskExecutorV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskExecutorV3Request) XTenantId(xTenantId string) ApiUpdateTaskExecutorV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskExecutorV3Request) UpdateTaskExecutorV3Request(updateTaskExecutorV3Request UpdateTaskExecutorV3Request) ApiUpdateTaskExecutorV3Request {
	r.updateTaskExecutorV3Request = &updateTaskExecutorV3Request
	return r
}

func (r ApiUpdateTaskExecutorV3Request) Execute() (*UpdateTaskExecutorV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskExecutorV3Execute(r)
}

/*
UpdateTaskExecutorV3 更新任务执行者

更新任务执行者

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskExecutorV3Request

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a63d document
*/
func (a *TaskAPIService) UpdateTaskExecutorV3(ctx context.Context, taskId string) ApiUpdateTaskExecutorV3Request {
	return ApiUpdateTaskExecutorV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskExecutorV3Response
func (a *TaskAPIService) UpdateTaskExecutorV3Execute(r ApiUpdateTaskExecutorV3Request) (*UpdateTaskExecutorV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskExecutorV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/executor"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskExecutorV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskLockV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskLockV3Request *UpdateTaskLockV3Request
}

// 操作者ID
func (r ApiUpdateTaskLockV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskLockV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskLockV3Request) XTenantId(xTenantId string) ApiUpdateTaskLockV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskLockV3Request) UpdateTaskLockV3Request(updateTaskLockV3Request UpdateTaskLockV3Request) ApiUpdateTaskLockV3Request {
	r.updateTaskLockV3Request = &updateTaskLockV3Request
	return r
}

func (r ApiUpdateTaskLockV3Request) Execute() (*CheckUserVisibleInAppResponse, *http.Response, error) {
	return r.ApiService.UpdateTaskLockV3Execute(r)
}

/*
UpdateTaskLockV3 更新任务加锁/解锁动作

更新任务加锁/解锁动作

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskLockV3Request

  @link https://open.teambition.com/docs/apis/662213a0912d20d3b50bfd84 document
*/
func (a *TaskAPIService) UpdateTaskLockV3(ctx context.Context, taskId string) ApiUpdateTaskLockV3Request {
	return ApiUpdateTaskLockV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return CheckUserVisibleInAppResponse
func (a *TaskAPIService) UpdateTaskLockV3Execute(r ApiUpdateTaskLockV3Request) (*CheckUserVisibleInAppResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CheckUserVisibleInAppResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/access-policy/update"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskLockV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskMembersV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskMembersV3Request *UpdateTaskMembersV3Request
}

// 操作者ID
func (r ApiUpdateTaskMembersV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskMembersV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskMembersV3Request) XTenantId(xTenantId string) ApiUpdateTaskMembersV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskMembersV3Request) UpdateTaskMembersV3Request(updateTaskMembersV3Request UpdateTaskMembersV3Request) ApiUpdateTaskMembersV3Request {
	r.updateTaskMembersV3Request = &updateTaskMembersV3Request
	return r
}

func (r ApiUpdateTaskMembersV3Request) Execute() (*UpdateTaskMembersV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskMembersV3Execute(r)
}

/*
UpdateTaskMembersV3 更新任务参与者

更新任务参与者

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskMembersV3Request

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a66a document
*/
func (a *TaskAPIService) UpdateTaskMembersV3(ctx context.Context, taskId string) ApiUpdateTaskMembersV3Request {
	return ApiUpdateTaskMembersV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskMembersV3Response
func (a *TaskAPIService) UpdateTaskMembersV3Execute(r ApiUpdateTaskMembersV3Request) (*UpdateTaskMembersV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskMembersV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/involveMembers"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskMembersV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskNoteV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskNoteV3Request *UpdateTaskNoteV3Request
}

// 操作者ID
func (r ApiUpdateTaskNoteV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskNoteV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskNoteV3Request) XTenantId(xTenantId string) ApiUpdateTaskNoteV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskNoteV3Request) UpdateTaskNoteV3Request(updateTaskNoteV3Request UpdateTaskNoteV3Request) ApiUpdateTaskNoteV3Request {
	r.updateTaskNoteV3Request = &updateTaskNoteV3Request
	return r
}

func (r ApiUpdateTaskNoteV3Request) Execute() (*UpdateTaskNoteV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskNoteV3Execute(r)
}

/*
UpdateTaskNoteV3 更新任务备注

更新任务备注

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskNoteV3Request

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a6ca document
*/
func (a *TaskAPIService) UpdateTaskNoteV3(ctx context.Context, taskId string) ApiUpdateTaskNoteV3Request {
	return ApiUpdateTaskNoteV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskNoteV3Response
func (a *TaskAPIService) UpdateTaskNoteV3Execute(r ApiUpdateTaskNoteV3Request) (*UpdateTaskNoteV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskNoteV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/note"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskNoteV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskParentV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xTenantId *string
	xOperatorId *string
	updateTaskParentV3Request *UpdateTaskParentV3Request
}

// 企业 ID
func (r ApiUpdateTaskParentV3Request) XTenantId(xTenantId string) ApiUpdateTaskParentV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 操作者ID
func (r ApiUpdateTaskParentV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskParentV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 
func (r ApiUpdateTaskParentV3Request) UpdateTaskParentV3Request(updateTaskParentV3Request UpdateTaskParentV3Request) ApiUpdateTaskParentV3Request {
	r.updateTaskParentV3Request = &updateTaskParentV3Request
	return r
}

func (r ApiUpdateTaskParentV3Request) Execute() (*UpdateTaskParentV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskParentV3Execute(r)
}

/*
UpdateTaskParentV3 改变任务的父任务

改变任务的父任务

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskParentV3Request

  @link https://open.teambition.com/docs/apis/63a0818a912d20d3b56b9dea document
*/
func (a *TaskAPIService) UpdateTaskParentV3(ctx context.Context, taskId string) ApiUpdateTaskParentV3Request {
	return ApiUpdateTaskParentV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskParentV3Response
func (a *TaskAPIService) UpdateTaskParentV3Execute(r ApiUpdateTaskParentV3Request) (*UpdateTaskParentV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskParentV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/parent"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Operator-Id", r.xOperatorId, "")
	}
	// body params
	localVarPostBody = r.updateTaskParentV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskPriorityV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskPriorityV3Request *UpdateTaskPriorityV3Request
}

// 操作者ID
func (r ApiUpdateTaskPriorityV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskPriorityV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskPriorityV3Request) XTenantId(xTenantId string) ApiUpdateTaskPriorityV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskPriorityV3Request) UpdateTaskPriorityV3Request(updateTaskPriorityV3Request UpdateTaskPriorityV3Request) ApiUpdateTaskPriorityV3Request {
	r.updateTaskPriorityV3Request = &updateTaskPriorityV3Request
	return r
}

func (r ApiUpdateTaskPriorityV3Request) Execute() (*UpdateTaskPriorityV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskPriorityV3Execute(r)
}

/*
UpdateTaskPriorityV3 更新任务优先级

更新任务优先级

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskPriorityV3Request

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a780 document
*/
func (a *TaskAPIService) UpdateTaskPriorityV3(ctx context.Context, taskId string) ApiUpdateTaskPriorityV3Request {
	return ApiUpdateTaskPriorityV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskPriorityV3Response
func (a *TaskAPIService) UpdateTaskPriorityV3Execute(r ApiUpdateTaskPriorityV3Request) (*UpdateTaskPriorityV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskPriorityV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/priority"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskPriorityV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskProgressV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskProgressV3Request *UpdateTaskProgressV3Request
}

// 操作者ID
func (r ApiUpdateTaskProgressV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskProgressV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskProgressV3Request) XTenantId(xTenantId string) ApiUpdateTaskProgressV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskProgressV3Request) UpdateTaskProgressV3Request(updateTaskProgressV3Request UpdateTaskProgressV3Request) ApiUpdateTaskProgressV3Request {
	r.updateTaskProgressV3Request = &updateTaskProgressV3Request
	return r
}

func (r ApiUpdateTaskProgressV3Request) Execute() (*UpdateTaskProgressV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskProgressV3Execute(r)
}

/*
UpdateTaskProgressV3 更新任务进度

更新任务进度

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskProgressV3Request

  @link https://open.teambition.com/docs/apis/63a0818a912d20d3b56b9d88 document
*/
func (a *TaskAPIService) UpdateTaskProgressV3(ctx context.Context, taskId string) ApiUpdateTaskProgressV3Request {
	return ApiUpdateTaskProgressV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskProgressV3Response
func (a *TaskAPIService) UpdateTaskProgressV3Execute(r ApiUpdateTaskProgressV3Request) (*UpdateTaskProgressV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskProgressV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/progress"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskProgressV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskSfcV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskSfcV3Request *UpdateTaskSfcV3Request
}

// 操作者ID
func (r ApiUpdateTaskSfcV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskSfcV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskSfcV3Request) XTenantId(xTenantId string) ApiUpdateTaskSfcV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskSfcV3Request) UpdateTaskSfcV3Request(updateTaskSfcV3Request UpdateTaskSfcV3Request) ApiUpdateTaskSfcV3Request {
	r.updateTaskSfcV3Request = &updateTaskSfcV3Request
	return r
}

func (r ApiUpdateTaskSfcV3Request) Execute() (*UpdateTaskSfcV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskSfcV3Execute(r)
}

/*
UpdateTaskSfcV3 更新任务的任务类型

更新任务的任务类型

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskSfcV3Request

  @link https://open.teambition.com/docs/apis/64b0bc0f912d20d3b5178ce9 document
*/
func (a *TaskAPIService) UpdateTaskSfcV3(ctx context.Context, taskId string) ApiUpdateTaskSfcV3Request {
	return ApiUpdateTaskSfcV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskSfcV3Response
func (a *TaskAPIService) UpdateTaskSfcV3Execute(r ApiUpdateTaskSfcV3Request) (*UpdateTaskSfcV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskSfcV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/sfc/update"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskSfcV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskSprintV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskSprintV3Request *UpdateTaskSprintV3Request
}

// 操作者ID
func (r ApiUpdateTaskSprintV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskSprintV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskSprintV3Request) XTenantId(xTenantId string) ApiUpdateTaskSprintV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskSprintV3Request) UpdateTaskSprintV3Request(updateTaskSprintV3Request UpdateTaskSprintV3Request) ApiUpdateTaskSprintV3Request {
	r.updateTaskSprintV3Request = &updateTaskSprintV3Request
	return r
}

func (r ApiUpdateTaskSprintV3Request) Execute() (*UpdateTaskSprintV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskSprintV3Execute(r)
}

/*
UpdateTaskSprintV3 更新任务迭代

更新任务迭代

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskSprintV3Request

  @link https://open.teambition.com/docs/apis/63ab255a912d20d3b596c750 document
*/
func (a *TaskAPIService) UpdateTaskSprintV3(ctx context.Context, taskId string) ApiUpdateTaskSprintV3Request {
	return ApiUpdateTaskSprintV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskSprintV3Response
func (a *TaskAPIService) UpdateTaskSprintV3Execute(r ApiUpdateTaskSprintV3Request) (*UpdateTaskSprintV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskSprintV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/sprint"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskSprintV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskStageV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskStageV3Request *UpdateTaskStageV3Request
}

// 操作者ID
func (r ApiUpdateTaskStageV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskStageV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskStageV3Request) XTenantId(xTenantId string) ApiUpdateTaskStageV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskStageV3Request) UpdateTaskStageV3Request(updateTaskStageV3Request UpdateTaskStageV3Request) ApiUpdateTaskStageV3Request {
	r.updateTaskStageV3Request = &updateTaskStageV3Request
	return r
}

func (r ApiUpdateTaskStageV3Request) Execute() (*UpdateTaskStageV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskStageV3Execute(r)
}

/*
UpdateTaskStageV3 更新任务列表

更新任务列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskStageV3Request

  @link https://open.teambition.com/docs/apis/63a0818a912d20d3b56b9e50 document
*/
func (a *TaskAPIService) UpdateTaskStageV3(ctx context.Context, taskId string) ApiUpdateTaskStageV3Request {
	return ApiUpdateTaskStageV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskStageV3Response
func (a *TaskAPIService) UpdateTaskStageV3Execute(r ApiUpdateTaskStageV3Request) (*UpdateTaskStageV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskStageV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/stage/update"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskStageV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskStartDateV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskStartDateV3Request *UpdateTaskStartDateV3Request
}

// 操作者ID
func (r ApiUpdateTaskStartDateV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskStartDateV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskStartDateV3Request) XTenantId(xTenantId string) ApiUpdateTaskStartDateV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskStartDateV3Request) UpdateTaskStartDateV3Request(updateTaskStartDateV3Request UpdateTaskStartDateV3Request) ApiUpdateTaskStartDateV3Request {
	r.updateTaskStartDateV3Request = &updateTaskStartDateV3Request
	return r
}

func (r ApiUpdateTaskStartDateV3Request) Execute() (*UpdateTaskStartDateV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskStartDateV3Execute(r)
}

/*
UpdateTaskStartDateV3 更新任务开始时间

更新任务开始时间

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskStartDateV3Request

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a7ea document
*/
func (a *TaskAPIService) UpdateTaskStartDateV3(ctx context.Context, taskId string) ApiUpdateTaskStartDateV3Request {
	return ApiUpdateTaskStartDateV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskStartDateV3Response
func (a *TaskAPIService) UpdateTaskStartDateV3Execute(r ApiUpdateTaskStartDateV3Request) (*UpdateTaskStartDateV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskStartDateV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/startDate"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskStartDateV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskStatusV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskStatusV3Request *UpdateTaskStatusV3Request
}

// 操作者ID
func (r ApiUpdateTaskStatusV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskStatusV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskStatusV3Request) XTenantId(xTenantId string) ApiUpdateTaskStatusV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskStatusV3Request) UpdateTaskStatusV3Request(updateTaskStatusV3Request UpdateTaskStatusV3Request) ApiUpdateTaskStatusV3Request {
	r.updateTaskStatusV3Request = &updateTaskStatusV3Request
	return r
}

func (r ApiUpdateTaskStatusV3Request) Execute() (*UpdateTaskStatusV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskStatusV3Execute(r)
}

/*
UpdateTaskStatusV3 更新任务状态

更新任务状态

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskStatusV3Request

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a844 document
*/
func (a *TaskAPIService) UpdateTaskStatusV3(ctx context.Context, taskId string) ApiUpdateTaskStatusV3Request {
	return ApiUpdateTaskStatusV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskStatusV3Response
func (a *TaskAPIService) UpdateTaskStatusV3Execute(r ApiUpdateTaskStatusV3Request) (*UpdateTaskStatusV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskStatusV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/taskflowstatus"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskStatusV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskStoryPointV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskStoryPointV3Request *UpdateTaskStoryPointV3Request
}

// 操作者ID
func (r ApiUpdateTaskStoryPointV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskStoryPointV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskStoryPointV3Request) XTenantId(xTenantId string) ApiUpdateTaskStoryPointV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskStoryPointV3Request) UpdateTaskStoryPointV3Request(updateTaskStoryPointV3Request UpdateTaskStoryPointV3Request) ApiUpdateTaskStoryPointV3Request {
	r.updateTaskStoryPointV3Request = &updateTaskStoryPointV3Request
	return r
}

func (r ApiUpdateTaskStoryPointV3Request) Execute() (*UpdateTaskStoryPointV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskStoryPointV3Execute(r)
}

/*
UpdateTaskStoryPointV3 更新任务StoryPoint

更新任务StoryPoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskStoryPointV3Request

  @link https://open.teambition.com/docs/apis/63a0818a912d20d3b56b9efc document
*/
func (a *TaskAPIService) UpdateTaskStoryPointV3(ctx context.Context, taskId string) ApiUpdateTaskStoryPointV3Request {
	return ApiUpdateTaskStoryPointV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskStoryPointV3Response
func (a *TaskAPIService) UpdateTaskStoryPointV3Execute(r ApiUpdateTaskStoryPointV3Request) (*UpdateTaskStoryPointV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskStoryPointV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/storyPoint"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskStoryPointV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskTableCustomFieldV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateProjectTableCustomFieldRequest *UpdateProjectTableCustomFieldRequest
}

// 
func (r ApiUpdateTaskTableCustomFieldV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskTableCustomFieldV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskTableCustomFieldV3Request) XTenantId(xTenantId string) ApiUpdateTaskTableCustomFieldV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskTableCustomFieldV3Request) UpdateProjectTableCustomFieldRequest(updateProjectTableCustomFieldRequest UpdateProjectTableCustomFieldRequest) ApiUpdateTaskTableCustomFieldV3Request {
	r.updateProjectTableCustomFieldRequest = &updateProjectTableCustomFieldRequest
	return r
}

func (r ApiUpdateTaskTableCustomFieldV3Request) Execute() (*UpdateProjectTableCustomFieldResponse, *http.Response, error) {
	return r.ApiService.UpdateTaskTableCustomFieldV3Execute(r)
}

/*
UpdateTaskTableCustomFieldV3 更新任务的表格自定义字段

更新任务的表格自定义字段

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskTableCustomFieldV3Request

  @link https://open.teambition.com/docs/apis/682c19c9912d20d3b5a47827 document
*/
func (a *TaskAPIService) UpdateTaskTableCustomFieldV3(ctx context.Context, taskId string) ApiUpdateTaskTableCustomFieldV3Request {
	return ApiUpdateTaskTableCustomFieldV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateProjectTableCustomFieldResponse
func (a *TaskAPIService) UpdateTaskTableCustomFieldV3Execute(r ApiUpdateTaskTableCustomFieldV3Request) (*UpdateProjectTableCustomFieldResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateProjectTableCustomFieldResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/customfield/table"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateProjectTableCustomFieldRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskTagsV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskTagsV3Request *UpdateTaskTagsV3Request
}

// 操作者ID
func (r ApiUpdateTaskTagsV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskTagsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskTagsV3Request) XTenantId(xTenantId string) ApiUpdateTaskTagsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskTagsV3Request) UpdateTaskTagsV3Request(updateTaskTagsV3Request UpdateTaskTagsV3Request) ApiUpdateTaskTagsV3Request {
	r.updateTaskTagsV3Request = &updateTaskTagsV3Request
	return r
}

func (r ApiUpdateTaskTagsV3Request) Execute() (*UpdateTaskTagsV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskTagsV3Execute(r)
}

/*
UpdateTaskTagsV3 更新任务标签

更新任务标签

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskTagsV3Request

  @link https://open.teambition.com/docs/apis/6321c6d2912d20d3b5a4a819 document
*/
func (a *TaskAPIService) UpdateTaskTagsV3(ctx context.Context, taskId string) ApiUpdateTaskTagsV3Request {
	return ApiUpdateTaskTagsV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskTagsV3Response
func (a *TaskAPIService) UpdateTaskTagsV3Execute(r ApiUpdateTaskTagsV3Request) (*UpdateTaskTagsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskTagsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/tag"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskTagsV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaskVisibilityV3Request struct {
	ctx context.Context
	ApiService *TaskAPIService
	taskId string
	xOperatorId *string
	xTenantId *string
	updateTaskVisibilityV3Request *UpdateTaskVisibilityV3Request
}

// 操作者ID
func (r ApiUpdateTaskVisibilityV3Request) XOperatorId(xOperatorId string) ApiUpdateTaskVisibilityV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiUpdateTaskVisibilityV3Request) XTenantId(xTenantId string) ApiUpdateTaskVisibilityV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 
func (r ApiUpdateTaskVisibilityV3Request) UpdateTaskVisibilityV3Request(updateTaskVisibilityV3Request UpdateTaskVisibilityV3Request) ApiUpdateTaskVisibilityV3Request {
	r.updateTaskVisibilityV3Request = &updateTaskVisibilityV3Request
	return r
}

func (r ApiUpdateTaskVisibilityV3Request) Execute() (*UpdateTaskVisibilityV3Response, *http.Response, error) {
	return r.ApiService.UpdateTaskVisibilityV3Execute(r)
}

/*
UpdateTaskVisibilityV3 更新任务可见性

更新任务可见性

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId 任务ID
 @return ApiUpdateTaskVisibilityV3Request

  @link https://open.teambition.com/docs/apis/664c4d76912d20d3b50bde6e document
*/
func (a *TaskAPIService) UpdateTaskVisibilityV3(ctx context.Context, taskId string) ApiUpdateTaskVisibilityV3Request {
	return ApiUpdateTaskVisibilityV3Request{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return UpdateTaskVisibilityV3Response
func (a *TaskAPIService) UpdateTaskVisibilityV3Execute(r ApiUpdateTaskVisibilityV3Request) (*UpdateTaskVisibilityV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTaskVisibilityV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/task/{taskId}/visible/update"
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	// body params
	localVarPostBody = r.updateTaskVisibilityV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
