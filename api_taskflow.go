/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// TaskflowAPIService TaskflowAPI service
type TaskflowAPIService service

type ApiSearchOrgTaskFlowsV3Request struct {
	ctx context.Context
	ApiService *TaskflowAPIService
	xOperatorId *string
	xTenantId *string
	q *string
	tfIds *string
	pageSize *int32
	pageToken *string
}

// 操作者ID
func (r ApiSearchOrgTaskFlowsV3Request) XOperatorId(xOperatorId string) ApiSearchOrgTaskFlowsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 企业 ID
func (r ApiSearchOrgTaskFlowsV3Request) XTenantId(xTenantId string) ApiSearchOrgTaskFlowsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 模糊查询工作流名字
func (r ApiSearchOrgTaskFlowsV3Request) Q(q string) ApiSearchOrgTaskFlowsV3Request {
	r.q = &q
	return r
}

// 工作流ID
func (r ApiSearchOrgTaskFlowsV3Request) TfIds(tfIds string) ApiSearchOrgTaskFlowsV3Request {
	r.tfIds = &tfIds
	return r
}

// 每页工作流长度
func (r ApiSearchOrgTaskFlowsV3Request) PageSize(pageSize int32) ApiSearchOrgTaskFlowsV3Request {
	r.pageSize = &pageSize
	return r
}

// 分页标
func (r ApiSearchOrgTaskFlowsV3Request) PageToken(pageToken string) ApiSearchOrgTaskFlowsV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiSearchOrgTaskFlowsV3Request) Execute() (*SearchOrgTaskFlowsV3Response, *http.Response, error) {
	return r.ApiService.SearchOrgTaskFlowsV3Execute(r)
}

/*
SearchOrgTaskFlowsV3 搜索企业工作流

搜索企业工作流

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchOrgTaskFlowsV3Request

  @link https://open.teambition.com/docs/apis/6593c8ee912d20d3b5cd6bc6 document
*/
func (a *TaskflowAPIService) SearchOrgTaskFlowsV3(ctx context.Context) ApiSearchOrgTaskFlowsV3Request {
	return ApiSearchOrgTaskFlowsV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchOrgTaskFlowsV3Response
func (a *TaskflowAPIService) SearchOrgTaskFlowsV3Execute(r ApiSearchOrgTaskFlowsV3Request) (*SearchOrgTaskFlowsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchOrgTaskFlowsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/taskflow/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tfIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tfIds", r.tfIds, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-operator-id", r.xOperatorId, "")
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
