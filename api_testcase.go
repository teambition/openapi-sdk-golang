/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TestcaseAPIService TestcaseAPI service
type TestcaseAPIService service

type ApiCreateTestCaseV3Request struct {
	ctx context.Context
	ApiService *TestcaseAPIService
	projectId string
	xTenantId *string
	xOperatorId *string
	createTestCaseV3Request *CreateTestCaseV3Request
}

// 企业 ID
func (r ApiCreateTestCaseV3Request) XTenantId(xTenantId string) ApiCreateTestCaseV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 操作人 ID
func (r ApiCreateTestCaseV3Request) XOperatorId(xOperatorId string) ApiCreateTestCaseV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 
func (r ApiCreateTestCaseV3Request) CreateTestCaseV3Request(createTestCaseV3Request CreateTestCaseV3Request) ApiCreateTestCaseV3Request {
	r.createTestCaseV3Request = &createTestCaseV3Request
	return r
}

func (r ApiCreateTestCaseV3Request) Execute() (*CreateTestCaseV3Response, *http.Response, error) {
	return r.ApiService.CreateTestCaseV3Execute(r)
}

/*
CreateTestCaseV3 创建测试用例

创建测试用例

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiCreateTestCaseV3Request

  @link https://open.teambition.com/docs/apis/67bbe1a8912d20d3b545c0c6 document
*/
func (a *TestcaseAPIService) CreateTestCaseV3(ctx context.Context, projectId string) ApiCreateTestCaseV3Request {
	return ApiCreateTestCaseV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return CreateTestCaseV3Response
func (a *TestcaseAPIService) CreateTestCaseV3Execute(r ApiCreateTestCaseV3Request) (*CreateTestCaseV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTestCaseV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/testcase/create"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-operator-Id", r.xOperatorId, "")
	}
	// body params
	localVarPostBody = r.createTestCaseV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTestHubV3Request struct {
	ctx context.Context
	ApiService *TestcaseAPIService
	projectId string
	xTenantId *string
	xOperatorId *string
}

// 企业 ID
func (r ApiGetProjectTestHubV3Request) XTenantId(xTenantId string) ApiGetProjectTestHubV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 操作人 ID
func (r ApiGetProjectTestHubV3Request) XOperatorId(xOperatorId string) ApiGetProjectTestHubV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

func (r ApiGetProjectTestHubV3Request) Execute() (*GetProjectTestHubV3Response, *http.Response, error) {
	return r.ApiService.GetProjectTestHubV3Execute(r)
}

/*
GetProjectTestHubV3 查询项目用例库

查询项目用例库

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiGetProjectTestHubV3Request

  @link https://open.teambition.com/docs/apis/67bbe1a8912d20d3b545c179 document
*/
func (a *TestcaseAPIService) GetProjectTestHubV3(ctx context.Context, projectId string) ApiGetProjectTestHubV3Request {
	return ApiGetProjectTestHubV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return GetProjectTestHubV3Response
func (a *TestcaseAPIService) GetProjectTestHubV3Execute(r ApiGetProjectTestHubV3Request) (*GetProjectTestHubV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetProjectTestHubV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/testhub"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-operator-Id", r.xOperatorId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPlanTestCaseV3Request struct {
	ctx context.Context
	ApiService *TestcaseAPIService
	projectId string
	testplanId string
	xTenantId *string
	xOperatorId *string
	planTestCaseV3Request *PlanTestCaseV3Request
}

// 企业 ID
func (r ApiPlanTestCaseV3Request) XTenantId(xTenantId string) ApiPlanTestCaseV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 操作人 ID
func (r ApiPlanTestCaseV3Request) XOperatorId(xOperatorId string) ApiPlanTestCaseV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 
func (r ApiPlanTestCaseV3Request) PlanTestCaseV3Request(planTestCaseV3Request PlanTestCaseV3Request) ApiPlanTestCaseV3Request {
	r.planTestCaseV3Request = &planTestCaseV3Request
	return r
}

func (r ApiPlanTestCaseV3Request) Execute() (*PlanTestCaseV3Response, *http.Response, error) {
	return r.ApiService.PlanTestCaseV3Execute(r)
}

/*
PlanTestCaseV3 规划测试用例

将用例库的基础用例规划至测试计划中，异步接口直接返回。

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @param testplanId 测试计划 ID
 @return ApiPlanTestCaseV3Request

  @link https://open.teambition.com/docs/apis/67bbe1a8912d20d3b545c236 document
*/
func (a *TestcaseAPIService) PlanTestCaseV3(ctx context.Context, projectId string, testplanId string) ApiPlanTestCaseV3Request {
	return ApiPlanTestCaseV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		testplanId: testplanId,
	}
}

// Execute executes the request
//  @return PlanTestCaseV3Response
func (a *TestcaseAPIService) PlanTestCaseV3Execute(r ApiPlanTestCaseV3Request) (*PlanTestCaseV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PlanTestCaseV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/testplan/{testplanId}/planning"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"testplanId"+"}", url.PathEscape(parameterValueToString(r.testplanId, "testplanId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-operator-Id", r.xOperatorId, "")
	}
	// body params
	localVarPostBody = r.planTestCaseV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryOrgTestHubsV3Request struct {
	ctx context.Context
	ApiService *TestcaseAPIService
	xTenantId *string
	xOperatorId *string
	pageSize *int32
	pageToken *string
}

// 企业 ID
func (r ApiQueryOrgTestHubsV3Request) XTenantId(xTenantId string) ApiQueryOrgTestHubsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 操作人 ID
func (r ApiQueryOrgTestHubsV3Request) XOperatorId(xOperatorId string) ApiQueryOrgTestHubsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 返回数量
func (r ApiQueryOrgTestHubsV3Request) PageSize(pageSize int32) ApiQueryOrgTestHubsV3Request {
	r.pageSize = &pageSize
	return r
}

// 下一页开始
func (r ApiQueryOrgTestHubsV3Request) PageToken(pageToken string) ApiQueryOrgTestHubsV3Request {
	r.pageToken = &pageToken
	return r
}

func (r ApiQueryOrgTestHubsV3Request) Execute() (*QueryOrgTestHubsV3Response, *http.Response, error) {
	return r.ApiService.QueryOrgTestHubsV3Execute(r)
}

/*
QueryOrgTestHubsV3 查询企业用例库列表

查询企业用例库列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryOrgTestHubsV3Request

  @link https://open.teambition.com/docs/apis/67bbe1a8912d20d3b545c2fa document
*/
func (a *TestcaseAPIService) QueryOrgTestHubsV3(ctx context.Context) ApiQueryOrgTestHubsV3Request {
	return ApiQueryOrgTestHubsV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryOrgTestHubsV3Response
func (a *TestcaseAPIService) QueryOrgTestHubsV3Execute(r ApiQueryOrgTestHubsV3Request) (*QueryOrgTestHubsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryOrgTestHubsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/testhub/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-operator-Id", r.xOperatorId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryOrgUserCasesV3Request struct {
	ctx context.Context
	ApiService *TestcaseAPIService
	testhubId string
	xTenantId *string
	xOperatorId *string
	pageSize *int32
	pageToken *string
	keyword *string
}

// 企业 ID
func (r ApiQueryOrgUserCasesV3Request) XTenantId(xTenantId string) ApiQueryOrgUserCasesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 操作人 ID
func (r ApiQueryOrgUserCasesV3Request) XOperatorId(xOperatorId string) ApiQueryOrgUserCasesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 返回数量，最大值为1000
func (r ApiQueryOrgUserCasesV3Request) PageSize(pageSize int32) ApiQueryOrgUserCasesV3Request {
	r.pageSize = &pageSize
	return r
}

// 下一页开始
func (r ApiQueryOrgUserCasesV3Request) PageToken(pageToken string) ApiQueryOrgUserCasesV3Request {
	r.pageToken = &pageToken
	return r
}

// 关键词
func (r ApiQueryOrgUserCasesV3Request) Keyword(keyword string) ApiQueryOrgUserCasesV3Request {
	r.keyword = &keyword
	return r
}

func (r ApiQueryOrgUserCasesV3Request) Execute() (*QueryOrgUserCasesV3Response, *http.Response, error) {
	return r.ApiService.QueryOrgUserCasesV3Execute(r)
}

/*
QueryOrgUserCasesV3 查询企业用例库用例列表V2

查询企业用例库用例列表V2

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param testhubId 用例库ID
 @return ApiQueryOrgUserCasesV3Request

  @link https://open.teambition.com/docs/apis/67bbe1a8912d20d3b545c355 document
*/
func (a *TestcaseAPIService) QueryOrgUserCasesV3(ctx context.Context, testhubId string) ApiQueryOrgUserCasesV3Request {
	return ApiQueryOrgUserCasesV3Request{
		ApiService: a,
		ctx: ctx,
		testhubId: testhubId,
	}
}

// Execute executes the request
//  @return QueryOrgUserCasesV3Response
func (a *TestcaseAPIService) QueryOrgUserCasesV3Execute(r ApiQueryOrgUserCasesV3Request) (*QueryOrgUserCasesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryOrgUserCasesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/testhub/{testhubId}/usercase/query"
	localVarPath = strings.Replace(localVarPath, "{"+"testhubId"+"}", url.PathEscape(parameterValueToString(r.testhubId, "testhubId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.keyword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keyword", r.keyword, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-operator-Id", r.xOperatorId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryProjectTestHubCasesV3Request struct {
	ctx context.Context
	ApiService *TestcaseAPIService
	projectId string
	testhubId string
	xTenantId *string
	xOperatorId *string
	pageSize *int32
	pageToken *string
	keyword *string
}

// 企业 ID
func (r ApiQueryProjectTestHubCasesV3Request) XTenantId(xTenantId string) ApiQueryProjectTestHubCasesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 操作人 ID
func (r ApiQueryProjectTestHubCasesV3Request) XOperatorId(xOperatorId string) ApiQueryProjectTestHubCasesV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 返回数量，最大值为1000
func (r ApiQueryProjectTestHubCasesV3Request) PageSize(pageSize int32) ApiQueryProjectTestHubCasesV3Request {
	r.pageSize = &pageSize
	return r
}

// 下一页开始
func (r ApiQueryProjectTestHubCasesV3Request) PageToken(pageToken string) ApiQueryProjectTestHubCasesV3Request {
	r.pageToken = &pageToken
	return r
}

// 关键词
func (r ApiQueryProjectTestHubCasesV3Request) Keyword(keyword string) ApiQueryProjectTestHubCasesV3Request {
	r.keyword = &keyword
	return r
}

func (r ApiQueryProjectTestHubCasesV3Request) Execute() (*QueryProjectTestHubCasesV3Response, *http.Response, error) {
	return r.ApiService.QueryProjectTestHubCasesV3Execute(r)
}

/*
QueryProjectTestHubCasesV3 查询项目用例库用例列表

查询项目用例库用例列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 企业ID
 @param testhubId 用例库ID
 @return ApiQueryProjectTestHubCasesV3Request

  @link https://open.teambition.com/docs/apis/67bbe1a8912d20d3b545c1d3 document
*/
func (a *TestcaseAPIService) QueryProjectTestHubCasesV3(ctx context.Context, projectId string, testhubId string) ApiQueryProjectTestHubCasesV3Request {
	return ApiQueryProjectTestHubCasesV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		testhubId: testhubId,
	}
}

// Execute executes the request
//  @return QueryProjectTestHubCasesV3Response
func (a *TestcaseAPIService) QueryProjectTestHubCasesV3Execute(r ApiQueryProjectTestHubCasesV3Request) (*QueryProjectTestHubCasesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryProjectTestHubCasesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/testhub/{testhubId}/usercase/query"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"testhubId"+"}", url.PathEscape(parameterValueToString(r.testhubId, "testhubId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.keyword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keyword", r.keyword, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-operator-Id", r.xOperatorId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryTestCasesV3Request struct {
	ctx context.Context
	ApiService *TestcaseAPIService
	projectId string
	xTenantId *string
	testplanId *string
	groupId *string
	pageSize *int32
	pageToken *string
	keyword *string
}

// 企业 ID
func (r ApiQueryTestCasesV3Request) XTenantId(xTenantId string) ApiQueryTestCasesV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 测试计划 ID
func (r ApiQueryTestCasesV3Request) TestplanId(testplanId string) ApiQueryTestCasesV3Request {
	r.testplanId = &testplanId
	return r
}

// 分组 ID
func (r ApiQueryTestCasesV3Request) GroupId(groupId string) ApiQueryTestCasesV3Request {
	r.groupId = &groupId
	return r
}

// 返回数量，最大值为1000
func (r ApiQueryTestCasesV3Request) PageSize(pageSize int32) ApiQueryTestCasesV3Request {
	r.pageSize = &pageSize
	return r
}

// 下一页开始
func (r ApiQueryTestCasesV3Request) PageToken(pageToken string) ApiQueryTestCasesV3Request {
	r.pageToken = &pageToken
	return r
}

// 关键词
func (r ApiQueryTestCasesV3Request) Keyword(keyword string) ApiQueryTestCasesV3Request {
	r.keyword = &keyword
	return r
}

func (r ApiQueryTestCasesV3Request) Execute() (*QueryTestCasesV3Response, *http.Response, error) {
	return r.ApiService.QueryTestCasesV3Execute(r)
}

/*
QueryTestCasesV3 查询测试用例列表

查询测试用例列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @return ApiQueryTestCasesV3Request

  @link https://open.teambition.com/docs/apis/67bbe1a8912d20d3b545c11e document
*/
func (a *TestcaseAPIService) QueryTestCasesV3(ctx context.Context, projectId string) ApiQueryTestCasesV3Request {
	return ApiQueryTestCasesV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return QueryTestCasesV3Response
func (a *TestcaseAPIService) QueryTestCasesV3Execute(r ApiQueryTestCasesV3Request) (*QueryTestCasesV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryTestCasesV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/testcase/query"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.testplanId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "testplanId", r.testplanId, "")
	}
	if r.groupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupId", r.groupId, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	if r.keyword != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keyword", r.keyword, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryTestGroupsV3Request struct {
	ctx context.Context
	ApiService *TestcaseAPIService
	xTenantId *string
	xOperatorId *string
	queryTestGroupsV3Request *QueryTestGroupsV3Request
}

// 企业 ID
func (r ApiQueryTestGroupsV3Request) XTenantId(xTenantId string) ApiQueryTestGroupsV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 操作人 ID
func (r ApiQueryTestGroupsV3Request) XOperatorId(xOperatorId string) ApiQueryTestGroupsV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 
func (r ApiQueryTestGroupsV3Request) QueryTestGroupsV3Request(queryTestGroupsV3Request QueryTestGroupsV3Request) ApiQueryTestGroupsV3Request {
	r.queryTestGroupsV3Request = &queryTestGroupsV3Request
	return r
}

func (r ApiQueryTestGroupsV3Request) Execute() (*QueryTestGroupsV3Response, *http.Response, error) {
	return r.ApiService.QueryTestGroupsV3Execute(r)
}

/*
QueryTestGroupsV3 批量查询用例分组

批量查询用例分组

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryTestGroupsV3Request

  @link https://open.teambition.com/docs/apis/67bbec67912d20d3b55c8242 document
*/
func (a *TestcaseAPIService) QueryTestGroupsV3(ctx context.Context) ApiQueryTestGroupsV3Request {
	return ApiQueryTestGroupsV3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryTestGroupsV3Response
func (a *TestcaseAPIService) QueryTestGroupsV3Execute(r ApiQueryTestGroupsV3Request) (*QueryTestGroupsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QueryTestGroupsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/group/query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-operator-Id", r.xOperatorId, "")
	}
	// body params
	localVarPostBody = r.queryTestGroupsV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTestCaseFlowStatusV3Request struct {
	ctx context.Context
	ApiService *TestcaseAPIService
	projectId string
	testplanId string
	id string
	xTenantId *string
	xOperatorId *string
	updateTestCaseFlowStatusV3Request *UpdateTestCaseFlowStatusV3Request
}

// 企业 ID
func (r ApiUpdateTestCaseFlowStatusV3Request) XTenantId(xTenantId string) ApiUpdateTestCaseFlowStatusV3Request {
	r.xTenantId = &xTenantId
	return r
}

// 操作人 ID
func (r ApiUpdateTestCaseFlowStatusV3Request) XOperatorId(xOperatorId string) ApiUpdateTestCaseFlowStatusV3Request {
	r.xOperatorId = &xOperatorId
	return r
}

// 
func (r ApiUpdateTestCaseFlowStatusV3Request) UpdateTestCaseFlowStatusV3Request(updateTestCaseFlowStatusV3Request UpdateTestCaseFlowStatusV3Request) ApiUpdateTestCaseFlowStatusV3Request {
	r.updateTestCaseFlowStatusV3Request = &updateTestCaseFlowStatusV3Request
	return r
}

func (r ApiUpdateTestCaseFlowStatusV3Request) Execute() (*UpdateTestCaseFlowStatusV3Response, *http.Response, error) {
	return r.ApiService.UpdateTestCaseFlowStatusV3Execute(r)
}

/*
UpdateTestCaseFlowStatusV3 更新测试用例状态

更新测试用例状态

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId 项目 ID
 @param testplanId 测试计划 ID
 @param id 测试用例 ID
 @return ApiUpdateTestCaseFlowStatusV3Request

  @link https://open.teambition.com/docs/apis/67bbe1a8912d20d3b545c29a document
*/
func (a *TestcaseAPIService) UpdateTestCaseFlowStatusV3(ctx context.Context, projectId string, testplanId string, id string) ApiUpdateTestCaseFlowStatusV3Request {
	return ApiUpdateTestCaseFlowStatusV3Request{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		testplanId: testplanId,
		id: id,
	}
}

// Execute executes the request
//  @return UpdateTestCaseFlowStatusV3Response
func (a *TestcaseAPIService) UpdateTestCaseFlowStatusV3Execute(r ApiUpdateTestCaseFlowStatusV3Request) (*UpdateTestCaseFlowStatusV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateTestCaseFlowStatusV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/project/{projectId}/testplan/{testplanId}/testcase/{id}/flowStatusId"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"testplanId"+"}", url.PathEscape(parameterValueToString(r.testplanId, "testplanId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTenantId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant-Id", r.xTenantId, "")
	}
	if r.xOperatorId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-operator-Id", r.xOperatorId, "")
	}
	// body params
	localVarPostBody = r.updateTestCaseFlowStatusV3Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
