/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"context"
	"net/http"
	"time"
	jwt "github.com/golang-jwt/jwt/v5"
)

// contextKeys are used to identify the type of value in the context.
// Since these are string, it is possible to get a short description of the
// context key for logging and debugging using key.String().

type contextKey string

func (c contextKey) String() string {
	return "auth " + string(c)
}

var (
	// ContextAccessToken takes a string oauth2 access token as authentication for the request.
	ContextAccessToken = contextKey("accesstoken")

)

// BasicAuth provides basic http authentication to a request passed via context using ContextBasicAuth
type BasicAuth struct {
	UserName string `json:"userName,omitempty"`
	Password string `json:"password,omitempty"`
}

// APIKey provides API key based authentication to a request passed via context using ContextAPIKey
type APIKey struct {
	Key    string
	Prefix string
}

// ServerVariable stores the information about a server variable
type ServerVariable struct {
	Description  string
	DefaultValue string
	EnumValues   []string
}

// ServerConfiguration stores the information about a server
type ServerConfiguration struct {
	URL string
	Description string
	Variables map[string]ServerVariable
}

// ServerConfigurations stores multiple ServerConfiguration items
type ServerConfigurations []ServerConfiguration

// Configuration stores the configuration of the API client
type Configuration struct {
	AppId            string            `json:"appId,omitempty"`
	AppSecret        string            `json:"appSecret,omitempty"`
	BasePath         string            `json:"basePath,omitempty"`
	DefaultHeader    map[string]string `json:"defaultHeader,omitempty"`
	UserAgent        string            `json:"userAgent,omitempty"`
	Debug            bool              `json:"debug,omitempty"`
	HTTPClient       *http.Client
}

// NewConfiguration returns a new Configuration object
func NewConfiguration(appId string, appSecret string) *Configuration {
	cfg := &Configuration{
		AppId: appId,
		AppSecret: appSecret,
		DefaultHeader:    make(map[string]string),
		UserAgent:        "OpenAPI-Generator/0.0.1-beta.0/go",
		Debug:            false,
		BasePath: 		  "https://open.teambition.com/api",
	}
	return cfg
}

// AddDefaultHeader adds a new HTTP header to the default header in the request
func (c *Configuration) AddDefaultHeader(key string, value string) {
	c.DefaultHeader[key] = value
}


// ServerURLWithContext returns a new server URL
func (c *Configuration) ServerURLWithContext(ctx context.Context) (string, error) {
	return c.BasePath, nil
}



// GetAppAccessToken returns appAccessToken
func (c *Configuration) GetAppAccessToken() (string, error) {
	token := jwt.New(jwt.SigningMethodHS256)
	claims := make(jwt.MapClaims)
	claims["exp"] = time.Now().Add(time.Hour * time.Duration(1)).Unix()
	claims["iat"] = time.Now().Unix()
	claims["_appId"] = c.AppId
	token.Claims = claims

	tokenString, err := token.SignedString([]byte(c.AppSecret))

	return tokenString, err
}
