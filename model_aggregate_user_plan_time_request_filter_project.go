/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AggregateUserPlanTimeRequestFilterProject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AggregateUserPlanTimeRequestFilterProject{}

// AggregateUserPlanTimeRequestFilterProject struct for AggregateUserPlanTimeRequestFilterProject
type AggregateUserPlanTimeRequestFilterProject struct {
	ProjectId []string `json:"projectId,omitempty"`
	// 是否是回收项目,1表示true,0表示false
	IsArchived *int32 `json:"isArchived,omitempty"`
	// 是否是归档项目,1表示true,0表示false
	IsSuspended *int32 `json:"isSuspended,omitempty"`
}

// NewAggregateUserPlanTimeRequestFilterProject instantiates a new AggregateUserPlanTimeRequestFilterProject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregateUserPlanTimeRequestFilterProject() *AggregateUserPlanTimeRequestFilterProject {
	this := AggregateUserPlanTimeRequestFilterProject{}
	return &this
}

// NewAggregateUserPlanTimeRequestFilterProjectWithDefaults instantiates a new AggregateUserPlanTimeRequestFilterProject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregateUserPlanTimeRequestFilterProjectWithDefaults() *AggregateUserPlanTimeRequestFilterProject {
	this := AggregateUserPlanTimeRequestFilterProject{}
	return &this
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *AggregateUserPlanTimeRequestFilterProject) GetProjectId() []string {
	if o == nil || IsNil(o.ProjectId) {
		var ret []string
		return ret
	}
	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateUserPlanTimeRequestFilterProject) GetProjectIdOk() ([]string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *AggregateUserPlanTimeRequestFilterProject) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given []string and assigns it to the ProjectId field.
func (o *AggregateUserPlanTimeRequestFilterProject) SetProjectId(v []string) {
	o.ProjectId = v
}

// GetIsArchived returns the IsArchived field value if set, zero value otherwise.
func (o *AggregateUserPlanTimeRequestFilterProject) GetIsArchived() int32 {
	if o == nil || IsNil(o.IsArchived) {
		var ret int32
		return ret
	}
	return *o.IsArchived
}

// GetIsArchivedOk returns a tuple with the IsArchived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateUserPlanTimeRequestFilterProject) GetIsArchivedOk() (*int32, bool) {
	if o == nil || IsNil(o.IsArchived) {
		return nil, false
	}
	return o.IsArchived, true
}

// HasIsArchived returns a boolean if a field has been set.
func (o *AggregateUserPlanTimeRequestFilterProject) HasIsArchived() bool {
	if o != nil && !IsNil(o.IsArchived) {
		return true
	}

	return false
}

// SetIsArchived gets a reference to the given int32 and assigns it to the IsArchived field.
func (o *AggregateUserPlanTimeRequestFilterProject) SetIsArchived(v int32) {
	o.IsArchived = &v
}

// GetIsSuspended returns the IsSuspended field value if set, zero value otherwise.
func (o *AggregateUserPlanTimeRequestFilterProject) GetIsSuspended() int32 {
	if o == nil || IsNil(o.IsSuspended) {
		var ret int32
		return ret
	}
	return *o.IsSuspended
}

// GetIsSuspendedOk returns a tuple with the IsSuspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateUserPlanTimeRequestFilterProject) GetIsSuspendedOk() (*int32, bool) {
	if o == nil || IsNil(o.IsSuspended) {
		return nil, false
	}
	return o.IsSuspended, true
}

// HasIsSuspended returns a boolean if a field has been set.
func (o *AggregateUserPlanTimeRequestFilterProject) HasIsSuspended() bool {
	if o != nil && !IsNil(o.IsSuspended) {
		return true
	}

	return false
}

// SetIsSuspended gets a reference to the given int32 and assigns it to the IsSuspended field.
func (o *AggregateUserPlanTimeRequestFilterProject) SetIsSuspended(v int32) {
	o.IsSuspended = &v
}

func (o AggregateUserPlanTimeRequestFilterProject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AggregateUserPlanTimeRequestFilterProject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	if !IsNil(o.IsArchived) {
		toSerialize["isArchived"] = o.IsArchived
	}
	if !IsNil(o.IsSuspended) {
		toSerialize["isSuspended"] = o.IsSuspended
	}
	return toSerialize, nil
}

type NullableAggregateUserPlanTimeRequestFilterProject struct {
	value *AggregateUserPlanTimeRequestFilterProject
	isSet bool
}

func (v NullableAggregateUserPlanTimeRequestFilterProject) Get() *AggregateUserPlanTimeRequestFilterProject {
	return v.value
}

func (v *NullableAggregateUserPlanTimeRequestFilterProject) Set(val *AggregateUserPlanTimeRequestFilterProject) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregateUserPlanTimeRequestFilterProject) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregateUserPlanTimeRequestFilterProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregateUserPlanTimeRequestFilterProject(val *AggregateUserPlanTimeRequestFilterProject) *NullableAggregateUserPlanTimeRequestFilterProject {
	return &NullableAggregateUserPlanTimeRequestFilterProject{value: val, isSet: true}
}

func (v NullableAggregateUserPlanTimeRequestFilterProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregateUserPlanTimeRequestFilterProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


