/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateProjectPlanStatusSettingV3Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateProjectPlanStatusSettingV3Request{}

// CreateProjectPlanStatusSettingV3Request 项目自定义计划状态请求
type CreateProjectPlanStatusSettingV3Request struct {
	Setting *CreateProjectPlanStatusSettingV3RequestSetting `json:"setting,omitempty"`
}

// NewCreateProjectPlanStatusSettingV3Request instantiates a new CreateProjectPlanStatusSettingV3Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateProjectPlanStatusSettingV3Request() *CreateProjectPlanStatusSettingV3Request {
	this := CreateProjectPlanStatusSettingV3Request{}
	return &this
}

// NewCreateProjectPlanStatusSettingV3RequestWithDefaults instantiates a new CreateProjectPlanStatusSettingV3Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateProjectPlanStatusSettingV3RequestWithDefaults() *CreateProjectPlanStatusSettingV3Request {
	this := CreateProjectPlanStatusSettingV3Request{}
	return &this
}

// GetSetting returns the Setting field value if set, zero value otherwise.
func (o *CreateProjectPlanStatusSettingV3Request) GetSetting() CreateProjectPlanStatusSettingV3RequestSetting {
	if o == nil || IsNil(o.Setting) {
		var ret CreateProjectPlanStatusSettingV3RequestSetting
		return ret
	}
	return *o.Setting
}

// GetSettingOk returns a tuple with the Setting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectPlanStatusSettingV3Request) GetSettingOk() (*CreateProjectPlanStatusSettingV3RequestSetting, bool) {
	if o == nil || IsNil(o.Setting) {
		return nil, false
	}
	return o.Setting, true
}

// HasSetting returns a boolean if a field has been set.
func (o *CreateProjectPlanStatusSettingV3Request) HasSetting() bool {
	if o != nil && !IsNil(o.Setting) {
		return true
	}

	return false
}

// SetSetting gets a reference to the given CreateProjectPlanStatusSettingV3RequestSetting and assigns it to the Setting field.
func (o *CreateProjectPlanStatusSettingV3Request) SetSetting(v CreateProjectPlanStatusSettingV3RequestSetting) {
	o.Setting = &v
}

func (o CreateProjectPlanStatusSettingV3Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateProjectPlanStatusSettingV3Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Setting) {
		toSerialize["setting"] = o.Setting
	}
	return toSerialize, nil
}

type NullableCreateProjectPlanStatusSettingV3Request struct {
	value *CreateProjectPlanStatusSettingV3Request
	isSet bool
}

func (v NullableCreateProjectPlanStatusSettingV3Request) Get() *CreateProjectPlanStatusSettingV3Request {
	return v.value
}

func (v *NullableCreateProjectPlanStatusSettingV3Request) Set(val *CreateProjectPlanStatusSettingV3Request) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateProjectPlanStatusSettingV3Request) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateProjectPlanStatusSettingV3Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateProjectPlanStatusSettingV3Request(val *CreateProjectPlanStatusSettingV3Request) *NullableCreateProjectPlanStatusSettingV3Request {
	return &NullableCreateProjectPlanStatusSettingV3Request{value: val, isSet: true}
}

func (v NullableCreateProjectPlanStatusSettingV3Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateProjectPlanStatusSettingV3Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


