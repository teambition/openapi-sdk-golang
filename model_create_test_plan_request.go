/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CreateTestPlanRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTestPlanRequest{}

// CreateTestPlanRequest struct for CreateTestPlanRequest
type CreateTestPlanRequest struct {
	// 测试计划名称
	Name *string `json:"name,omitempty"`
	// 开始时间
	StartDate *time.Time `json:"startDate,omitempty"`
	// 截止时间
	DueDate *time.Time `json:"dueDate,omitempty"`
}

// NewCreateTestPlanRequest instantiates a new CreateTestPlanRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTestPlanRequest() *CreateTestPlanRequest {
	this := CreateTestPlanRequest{}
	return &this
}

// NewCreateTestPlanRequestWithDefaults instantiates a new CreateTestPlanRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTestPlanRequestWithDefaults() *CreateTestPlanRequest {
	this := CreateTestPlanRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateTestPlanRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTestPlanRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateTestPlanRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateTestPlanRequest) SetName(v string) {
	o.Name = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *CreateTestPlanRequest) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTestPlanRequest) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *CreateTestPlanRequest) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *CreateTestPlanRequest) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *CreateTestPlanRequest) GetDueDate() time.Time {
	if o == nil || IsNil(o.DueDate) {
		var ret time.Time
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTestPlanRequest) GetDueDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *CreateTestPlanRequest) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given time.Time and assigns it to the DueDate field.
func (o *CreateTestPlanRequest) SetDueDate(v time.Time) {
	o.DueDate = &v
}

func (o CreateTestPlanRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTestPlanRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	return toSerialize, nil
}

type NullableCreateTestPlanRequest struct {
	value *CreateTestPlanRequest
	isSet bool
}

func (v NullableCreateTestPlanRequest) Get() *CreateTestPlanRequest {
	return v.value
}

func (v *NullableCreateTestPlanRequest) Set(val *CreateTestPlanRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTestPlanRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTestPlanRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTestPlanRequest(val *CreateTestPlanRequest) *NullableCreateTestPlanRequest {
	return &NullableCreateTestPlanRequest{value: val, isSet: true}
}

func (v NullableCreateTestPlanRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTestPlanRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


