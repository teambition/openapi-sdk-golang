/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DeleteSfcFieldV3ResponseResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteSfcFieldV3ResponseResult{}

// DeleteSfcFieldV3ResponseResult struct for DeleteSfcFieldV3ResponseResult
type DeleteSfcFieldV3ResponseResult struct {
	// 字段类型
	FieldType *string `json:"fieldType,omitempty"`
	// 自定义字段ID
	CustomfieldId *string `json:"customfieldId,omitempty"`
	// 允许修改该字段的项目角色Id列表
	AllowedRoleIds []string `json:"allowedRoleIds,omitempty"`
	// 填写该字段时的默认值
	Default *string `json:"default,omitempty"`
	// 填写该字段时的提示文案
	Placeholder *string `json:"placeholder,omitempty"`
	// 该字段是否必填
	Required *bool `json:"required,omitempty"`
	// 额外信息
	Payload map[string]interface{} `json:"payload,omitempty"`
}

// NewDeleteSfcFieldV3ResponseResult instantiates a new DeleteSfcFieldV3ResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteSfcFieldV3ResponseResult() *DeleteSfcFieldV3ResponseResult {
	this := DeleteSfcFieldV3ResponseResult{}
	return &this
}

// NewDeleteSfcFieldV3ResponseResultWithDefaults instantiates a new DeleteSfcFieldV3ResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteSfcFieldV3ResponseResultWithDefaults() *DeleteSfcFieldV3ResponseResult {
	this := DeleteSfcFieldV3ResponseResult{}
	return &this
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *DeleteSfcFieldV3ResponseResult) GetFieldType() string {
	if o == nil || IsNil(o.FieldType) {
		var ret string
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteSfcFieldV3ResponseResult) GetFieldTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FieldType) {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *DeleteSfcFieldV3ResponseResult) HasFieldType() bool {
	if o != nil && !IsNil(o.FieldType) {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given string and assigns it to the FieldType field.
func (o *DeleteSfcFieldV3ResponseResult) SetFieldType(v string) {
	o.FieldType = &v
}

// GetCustomfieldId returns the CustomfieldId field value if set, zero value otherwise.
func (o *DeleteSfcFieldV3ResponseResult) GetCustomfieldId() string {
	if o == nil || IsNil(o.CustomfieldId) {
		var ret string
		return ret
	}
	return *o.CustomfieldId
}

// GetCustomfieldIdOk returns a tuple with the CustomfieldId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteSfcFieldV3ResponseResult) GetCustomfieldIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomfieldId) {
		return nil, false
	}
	return o.CustomfieldId, true
}

// HasCustomfieldId returns a boolean if a field has been set.
func (o *DeleteSfcFieldV3ResponseResult) HasCustomfieldId() bool {
	if o != nil && !IsNil(o.CustomfieldId) {
		return true
	}

	return false
}

// SetCustomfieldId gets a reference to the given string and assigns it to the CustomfieldId field.
func (o *DeleteSfcFieldV3ResponseResult) SetCustomfieldId(v string) {
	o.CustomfieldId = &v
}

// GetAllowedRoleIds returns the AllowedRoleIds field value if set, zero value otherwise.
func (o *DeleteSfcFieldV3ResponseResult) GetAllowedRoleIds() []string {
	if o == nil || IsNil(o.AllowedRoleIds) {
		var ret []string
		return ret
	}
	return o.AllowedRoleIds
}

// GetAllowedRoleIdsOk returns a tuple with the AllowedRoleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteSfcFieldV3ResponseResult) GetAllowedRoleIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedRoleIds) {
		return nil, false
	}
	return o.AllowedRoleIds, true
}

// HasAllowedRoleIds returns a boolean if a field has been set.
func (o *DeleteSfcFieldV3ResponseResult) HasAllowedRoleIds() bool {
	if o != nil && !IsNil(o.AllowedRoleIds) {
		return true
	}

	return false
}

// SetAllowedRoleIds gets a reference to the given []string and assigns it to the AllowedRoleIds field.
func (o *DeleteSfcFieldV3ResponseResult) SetAllowedRoleIds(v []string) {
	o.AllowedRoleIds = v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *DeleteSfcFieldV3ResponseResult) GetDefault() string {
	if o == nil || IsNil(o.Default) {
		var ret string
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteSfcFieldV3ResponseResult) GetDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *DeleteSfcFieldV3ResponseResult) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given string and assigns it to the Default field.
func (o *DeleteSfcFieldV3ResponseResult) SetDefault(v string) {
	o.Default = &v
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise.
func (o *DeleteSfcFieldV3ResponseResult) GetPlaceholder() string {
	if o == nil || IsNil(o.Placeholder) {
		var ret string
		return ret
	}
	return *o.Placeholder
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteSfcFieldV3ResponseResult) GetPlaceholderOk() (*string, bool) {
	if o == nil || IsNil(o.Placeholder) {
		return nil, false
	}
	return o.Placeholder, true
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *DeleteSfcFieldV3ResponseResult) HasPlaceholder() bool {
	if o != nil && !IsNil(o.Placeholder) {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given string and assigns it to the Placeholder field.
func (o *DeleteSfcFieldV3ResponseResult) SetPlaceholder(v string) {
	o.Placeholder = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *DeleteSfcFieldV3ResponseResult) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteSfcFieldV3ResponseResult) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *DeleteSfcFieldV3ResponseResult) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *DeleteSfcFieldV3ResponseResult) SetRequired(v bool) {
	o.Required = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *DeleteSfcFieldV3ResponseResult) GetPayload() map[string]interface{} {
	if o == nil || IsNil(o.Payload) {
		var ret map[string]interface{}
		return ret
	}
	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteSfcFieldV3ResponseResult) GetPayloadOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Payload) {
		return map[string]interface{}{}, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *DeleteSfcFieldV3ResponseResult) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given map[string]interface{} and assigns it to the Payload field.
func (o *DeleteSfcFieldV3ResponseResult) SetPayload(v map[string]interface{}) {
	o.Payload = v
}

func (o DeleteSfcFieldV3ResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteSfcFieldV3ResponseResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FieldType) {
		toSerialize["fieldType"] = o.FieldType
	}
	if !IsNil(o.CustomfieldId) {
		toSerialize["customfieldId"] = o.CustomfieldId
	}
	if !IsNil(o.AllowedRoleIds) {
		toSerialize["allowedRoleIds"] = o.AllowedRoleIds
	}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Placeholder) {
		toSerialize["placeholder"] = o.Placeholder
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	return toSerialize, nil
}

type NullableDeleteSfcFieldV3ResponseResult struct {
	value *DeleteSfcFieldV3ResponseResult
	isSet bool
}

func (v NullableDeleteSfcFieldV3ResponseResult) Get() *DeleteSfcFieldV3ResponseResult {
	return v.value
}

func (v *NullableDeleteSfcFieldV3ResponseResult) Set(val *DeleteSfcFieldV3ResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteSfcFieldV3ResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteSfcFieldV3ResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteSfcFieldV3ResponseResult(val *DeleteSfcFieldV3ResponseResult) *NullableDeleteSfcFieldV3ResponseResult {
	return &NullableDeleteSfcFieldV3ResponseResult{value: val, isSet: true}
}

func (v NullableDeleteSfcFieldV3ResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteSfcFieldV3ResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


