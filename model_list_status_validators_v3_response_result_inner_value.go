/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListStatusValidatorsV3ResponseResultInnerValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListStatusValidatorsV3ResponseResultInnerValue{}

// ListStatusValidatorsV3ResponseResultInnerValue 
type ListStatusValidatorsV3ResponseResultInnerValue struct {
	// 是否必填
	Required *bool `json:"required,omitempty"`
}

// NewListStatusValidatorsV3ResponseResultInnerValue instantiates a new ListStatusValidatorsV3ResponseResultInnerValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListStatusValidatorsV3ResponseResultInnerValue() *ListStatusValidatorsV3ResponseResultInnerValue {
	this := ListStatusValidatorsV3ResponseResultInnerValue{}
	return &this
}

// NewListStatusValidatorsV3ResponseResultInnerValueWithDefaults instantiates a new ListStatusValidatorsV3ResponseResultInnerValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListStatusValidatorsV3ResponseResultInnerValueWithDefaults() *ListStatusValidatorsV3ResponseResultInnerValue {
	this := ListStatusValidatorsV3ResponseResultInnerValue{}
	return &this
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ListStatusValidatorsV3ResponseResultInnerValue) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListStatusValidatorsV3ResponseResultInnerValue) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *ListStatusValidatorsV3ResponseResultInnerValue) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ListStatusValidatorsV3ResponseResultInnerValue) SetRequired(v bool) {
	o.Required = &v
}

func (o ListStatusValidatorsV3ResponseResultInnerValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListStatusValidatorsV3ResponseResultInnerValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	return toSerialize, nil
}

type NullableListStatusValidatorsV3ResponseResultInnerValue struct {
	value *ListStatusValidatorsV3ResponseResultInnerValue
	isSet bool
}

func (v NullableListStatusValidatorsV3ResponseResultInnerValue) Get() *ListStatusValidatorsV3ResponseResultInnerValue {
	return v.value
}

func (v *NullableListStatusValidatorsV3ResponseResultInnerValue) Set(val *ListStatusValidatorsV3ResponseResultInnerValue) {
	v.value = val
	v.isSet = true
}

func (v NullableListStatusValidatorsV3ResponseResultInnerValue) IsSet() bool {
	return v.isSet
}

func (v *NullableListStatusValidatorsV3ResponseResultInnerValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListStatusValidatorsV3ResponseResultInnerValue(val *ListStatusValidatorsV3ResponseResultInnerValue) *NullableListStatusValidatorsV3ResponseResultInnerValue {
	return &NullableListStatusValidatorsV3ResponseResultInnerValue{value: val, isSet: true}
}

func (v NullableListStatusValidatorsV3ResponseResultInnerValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListStatusValidatorsV3ResponseResultInnerValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


