/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MoveFileV3Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoveFileV3Request{}

// MoveFileV3Request struct for MoveFileV3Request
type MoveFileV3Request struct {
	// 上级文件夹 ID
	ParentId *string `json:"parentId,omitempty"`
}

// NewMoveFileV3Request instantiates a new MoveFileV3Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveFileV3Request() *MoveFileV3Request {
	this := MoveFileV3Request{}
	return &this
}

// NewMoveFileV3RequestWithDefaults instantiates a new MoveFileV3Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveFileV3RequestWithDefaults() *MoveFileV3Request {
	this := MoveFileV3Request{}
	return &this
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *MoveFileV3Request) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveFileV3Request) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *MoveFileV3Request) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *MoveFileV3Request) SetParentId(v string) {
	o.ParentId = &v
}

func (o MoveFileV3Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoveFileV3Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	return toSerialize, nil
}

type NullableMoveFileV3Request struct {
	value *MoveFileV3Request
	isSet bool
}

func (v NullableMoveFileV3Request) Get() *MoveFileV3Request {
	return v.value
}

func (v *NullableMoveFileV3Request) Set(val *MoveFileV3Request) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveFileV3Request) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveFileV3Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveFileV3Request(val *MoveFileV3Request) *NullableMoveFileV3Request {
	return &NullableMoveFileV3Request{value: val, isSet: true}
}

func (v NullableMoveFileV3Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveFileV3Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


