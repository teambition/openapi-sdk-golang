/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MoveFileV3ResponseResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoveFileV3ResponseResult{}

// MoveFileV3ResponseResult 项目内移动文件响应
type MoveFileV3ResponseResult struct {
	// 项目文件 ID
	Id *string `json:"id,omitempty"`
	// 上级文件夹 ID
	ParentId *string `json:"parentId,omitempty"`
	// 更新时间
	Updated *string `json:"updated,omitempty"`
}

// NewMoveFileV3ResponseResult instantiates a new MoveFileV3ResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveFileV3ResponseResult() *MoveFileV3ResponseResult {
	this := MoveFileV3ResponseResult{}
	return &this
}

// NewMoveFileV3ResponseResultWithDefaults instantiates a new MoveFileV3ResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveFileV3ResponseResultWithDefaults() *MoveFileV3ResponseResult {
	this := MoveFileV3ResponseResult{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MoveFileV3ResponseResult) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveFileV3ResponseResult) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MoveFileV3ResponseResult) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MoveFileV3ResponseResult) SetId(v string) {
	o.Id = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *MoveFileV3ResponseResult) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveFileV3ResponseResult) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *MoveFileV3ResponseResult) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *MoveFileV3ResponseResult) SetParentId(v string) {
	o.ParentId = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *MoveFileV3ResponseResult) GetUpdated() string {
	if o == nil || IsNil(o.Updated) {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveFileV3ResponseResult) GetUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *MoveFileV3ResponseResult) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *MoveFileV3ResponseResult) SetUpdated(v string) {
	o.Updated = &v
}

func (o MoveFileV3ResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoveFileV3ResponseResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullableMoveFileV3ResponseResult struct {
	value *MoveFileV3ResponseResult
	isSet bool
}

func (v NullableMoveFileV3ResponseResult) Get() *MoveFileV3ResponseResult {
	return v.value
}

func (v *NullableMoveFileV3ResponseResult) Set(val *MoveFileV3ResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveFileV3ResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveFileV3ResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveFileV3ResponseResult(val *MoveFileV3ResponseResult) *NullableMoveFileV3ResponseResult {
	return &NullableMoveFileV3ResponseResult{value: val, isSet: true}
}

func (v NullableMoveFileV3ResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveFileV3ResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


