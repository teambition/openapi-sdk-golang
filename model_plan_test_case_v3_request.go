/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PlanTestCaseV3Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanTestCaseV3Request{}

// PlanTestCaseV3Request struct for PlanTestCaseV3Request
type PlanTestCaseV3Request struct {
	// 是否合并分组。如果为true，则表示如果规划的测试计划下有与待规划的分组同名的分组，则不创建新分组，对应用例挂在已有分组下；否则创建新的同名分组，对应用例挂在新分组下
	IsMerge *bool `json:"isMerge,omitempty"`
	// 筛选条件
	Selected []PlanTestCaseV3RequestSelectedInner `json:"selected,omitempty"`
}

// NewPlanTestCaseV3Request instantiates a new PlanTestCaseV3Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanTestCaseV3Request() *PlanTestCaseV3Request {
	this := PlanTestCaseV3Request{}
	return &this
}

// NewPlanTestCaseV3RequestWithDefaults instantiates a new PlanTestCaseV3Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanTestCaseV3RequestWithDefaults() *PlanTestCaseV3Request {
	this := PlanTestCaseV3Request{}
	return &this
}

// GetIsMerge returns the IsMerge field value if set, zero value otherwise.
func (o *PlanTestCaseV3Request) GetIsMerge() bool {
	if o == nil || IsNil(o.IsMerge) {
		var ret bool
		return ret
	}
	return *o.IsMerge
}

// GetIsMergeOk returns a tuple with the IsMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanTestCaseV3Request) GetIsMergeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMerge) {
		return nil, false
	}
	return o.IsMerge, true
}

// HasIsMerge returns a boolean if a field has been set.
func (o *PlanTestCaseV3Request) HasIsMerge() bool {
	if o != nil && !IsNil(o.IsMerge) {
		return true
	}

	return false
}

// SetIsMerge gets a reference to the given bool and assigns it to the IsMerge field.
func (o *PlanTestCaseV3Request) SetIsMerge(v bool) {
	o.IsMerge = &v
}

// GetSelected returns the Selected field value if set, zero value otherwise.
func (o *PlanTestCaseV3Request) GetSelected() []PlanTestCaseV3RequestSelectedInner {
	if o == nil || IsNil(o.Selected) {
		var ret []PlanTestCaseV3RequestSelectedInner
		return ret
	}
	return o.Selected
}

// GetSelectedOk returns a tuple with the Selected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanTestCaseV3Request) GetSelectedOk() ([]PlanTestCaseV3RequestSelectedInner, bool) {
	if o == nil || IsNil(o.Selected) {
		return nil, false
	}
	return o.Selected, true
}

// HasSelected returns a boolean if a field has been set.
func (o *PlanTestCaseV3Request) HasSelected() bool {
	if o != nil && !IsNil(o.Selected) {
		return true
	}

	return false
}

// SetSelected gets a reference to the given []PlanTestCaseV3RequestSelectedInner and assigns it to the Selected field.
func (o *PlanTestCaseV3Request) SetSelected(v []PlanTestCaseV3RequestSelectedInner) {
	o.Selected = v
}

func (o PlanTestCaseV3Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanTestCaseV3Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsMerge) {
		toSerialize["isMerge"] = o.IsMerge
	}
	if !IsNil(o.Selected) {
		toSerialize["selected"] = o.Selected
	}
	return toSerialize, nil
}

type NullablePlanTestCaseV3Request struct {
	value *PlanTestCaseV3Request
	isSet bool
}

func (v NullablePlanTestCaseV3Request) Get() *PlanTestCaseV3Request {
	return v.value
}

func (v *NullablePlanTestCaseV3Request) Set(val *PlanTestCaseV3Request) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanTestCaseV3Request) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanTestCaseV3Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanTestCaseV3Request(val *PlanTestCaseV3Request) *NullablePlanTestCaseV3Request {
	return &NullablePlanTestCaseV3Request{value: val, isSet: true}
}

func (v NullablePlanTestCaseV3Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanTestCaseV3Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


