/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RenderTaskRtfV3ResponseResultInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RenderTaskRtfV3ResponseResultInner{}

// RenderTaskRtfV3ResponseResultInner 任务富文本渲染结果
type RenderTaskRtfV3ResponseResultInner struct {
	// 任务ID
	TaskId *string `json:"taskId,omitempty"`
	// 富文本字段标识
	RtfField *string `json:"rtfField,omitempty"`
	// 任务富文本 Html 格式内容
	Html *string `json:"html,omitempty"`
	// 任务富文本Token，用于提交到富文本字段(metaString)或备注用的(rtfValueToken)
	RtfValueToken *string `json:"rtfValueToken,omitempty"`
}

// NewRenderTaskRtfV3ResponseResultInner instantiates a new RenderTaskRtfV3ResponseResultInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenderTaskRtfV3ResponseResultInner() *RenderTaskRtfV3ResponseResultInner {
	this := RenderTaskRtfV3ResponseResultInner{}
	return &this
}

// NewRenderTaskRtfV3ResponseResultInnerWithDefaults instantiates a new RenderTaskRtfV3ResponseResultInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenderTaskRtfV3ResponseResultInnerWithDefaults() *RenderTaskRtfV3ResponseResultInner {
	this := RenderTaskRtfV3ResponseResultInner{}
	return &this
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *RenderTaskRtfV3ResponseResultInner) GetTaskId() string {
	if o == nil || IsNil(o.TaskId) {
		var ret string
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderTaskRtfV3ResponseResultInner) GetTaskIdOk() (*string, bool) {
	if o == nil || IsNil(o.TaskId) {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *RenderTaskRtfV3ResponseResultInner) HasTaskId() bool {
	if o != nil && !IsNil(o.TaskId) {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given string and assigns it to the TaskId field.
func (o *RenderTaskRtfV3ResponseResultInner) SetTaskId(v string) {
	o.TaskId = &v
}

// GetRtfField returns the RtfField field value if set, zero value otherwise.
func (o *RenderTaskRtfV3ResponseResultInner) GetRtfField() string {
	if o == nil || IsNil(o.RtfField) {
		var ret string
		return ret
	}
	return *o.RtfField
}

// GetRtfFieldOk returns a tuple with the RtfField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderTaskRtfV3ResponseResultInner) GetRtfFieldOk() (*string, bool) {
	if o == nil || IsNil(o.RtfField) {
		return nil, false
	}
	return o.RtfField, true
}

// HasRtfField returns a boolean if a field has been set.
func (o *RenderTaskRtfV3ResponseResultInner) HasRtfField() bool {
	if o != nil && !IsNil(o.RtfField) {
		return true
	}

	return false
}

// SetRtfField gets a reference to the given string and assigns it to the RtfField field.
func (o *RenderTaskRtfV3ResponseResultInner) SetRtfField(v string) {
	o.RtfField = &v
}

// GetHtml returns the Html field value if set, zero value otherwise.
func (o *RenderTaskRtfV3ResponseResultInner) GetHtml() string {
	if o == nil || IsNil(o.Html) {
		var ret string
		return ret
	}
	return *o.Html
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderTaskRtfV3ResponseResultInner) GetHtmlOk() (*string, bool) {
	if o == nil || IsNil(o.Html) {
		return nil, false
	}
	return o.Html, true
}

// HasHtml returns a boolean if a field has been set.
func (o *RenderTaskRtfV3ResponseResultInner) HasHtml() bool {
	if o != nil && !IsNil(o.Html) {
		return true
	}

	return false
}

// SetHtml gets a reference to the given string and assigns it to the Html field.
func (o *RenderTaskRtfV3ResponseResultInner) SetHtml(v string) {
	o.Html = &v
}

// GetRtfValueToken returns the RtfValueToken field value if set, zero value otherwise.
func (o *RenderTaskRtfV3ResponseResultInner) GetRtfValueToken() string {
	if o == nil || IsNil(o.RtfValueToken) {
		var ret string
		return ret
	}
	return *o.RtfValueToken
}

// GetRtfValueTokenOk returns a tuple with the RtfValueToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderTaskRtfV3ResponseResultInner) GetRtfValueTokenOk() (*string, bool) {
	if o == nil || IsNil(o.RtfValueToken) {
		return nil, false
	}
	return o.RtfValueToken, true
}

// HasRtfValueToken returns a boolean if a field has been set.
func (o *RenderTaskRtfV3ResponseResultInner) HasRtfValueToken() bool {
	if o != nil && !IsNil(o.RtfValueToken) {
		return true
	}

	return false
}

// SetRtfValueToken gets a reference to the given string and assigns it to the RtfValueToken field.
func (o *RenderTaskRtfV3ResponseResultInner) SetRtfValueToken(v string) {
	o.RtfValueToken = &v
}

func (o RenderTaskRtfV3ResponseResultInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RenderTaskRtfV3ResponseResultInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaskId) {
		toSerialize["taskId"] = o.TaskId
	}
	if !IsNil(o.RtfField) {
		toSerialize["rtfField"] = o.RtfField
	}
	if !IsNil(o.Html) {
		toSerialize["html"] = o.Html
	}
	if !IsNil(o.RtfValueToken) {
		toSerialize["rtfValueToken"] = o.RtfValueToken
	}
	return toSerialize, nil
}

type NullableRenderTaskRtfV3ResponseResultInner struct {
	value *RenderTaskRtfV3ResponseResultInner
	isSet bool
}

func (v NullableRenderTaskRtfV3ResponseResultInner) Get() *RenderTaskRtfV3ResponseResultInner {
	return v.value
}

func (v *NullableRenderTaskRtfV3ResponseResultInner) Set(val *RenderTaskRtfV3ResponseResultInner) {
	v.value = val
	v.isSet = true
}

func (v NullableRenderTaskRtfV3ResponseResultInner) IsSet() bool {
	return v.isSet
}

func (v *NullableRenderTaskRtfV3ResponseResultInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenderTaskRtfV3ResponseResultInner(val *RenderTaskRtfV3ResponseResultInner) *NullableRenderTaskRtfV3ResponseResultInner {
	return &NullableRenderTaskRtfV3ResponseResultInner{value: val, isSet: true}
}

func (v NullableRenderTaskRtfV3ResponseResultInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenderTaskRtfV3ResponseResultInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


