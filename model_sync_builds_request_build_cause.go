/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SyncBuildsRequestBuildCause type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyncBuildsRequestBuildCause{}

// SyncBuildsRequestBuildCause 触发信息
type SyncBuildsRequestBuildCause struct {
	// 触发方式， 目前支持类型：用户(user)、上游(upstream)、定时器(timer)、远程(remote)、代码(scm)、多分支(multiBranch)、未知(unKnown)
	CauseType *string `json:"causeType,omitempty"`
	// 触发用户id
	UserId *string `json:"userId,omitempty"`
	// 触发用户名称
	UserName *string `json:"userName,omitempty"`
}

// NewSyncBuildsRequestBuildCause instantiates a new SyncBuildsRequestBuildCause object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncBuildsRequestBuildCause() *SyncBuildsRequestBuildCause {
	this := SyncBuildsRequestBuildCause{}
	return &this
}

// NewSyncBuildsRequestBuildCauseWithDefaults instantiates a new SyncBuildsRequestBuildCause object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncBuildsRequestBuildCauseWithDefaults() *SyncBuildsRequestBuildCause {
	this := SyncBuildsRequestBuildCause{}
	return &this
}

// GetCauseType returns the CauseType field value if set, zero value otherwise.
func (o *SyncBuildsRequestBuildCause) GetCauseType() string {
	if o == nil || IsNil(o.CauseType) {
		var ret string
		return ret
	}
	return *o.CauseType
}

// GetCauseTypeOk returns a tuple with the CauseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncBuildsRequestBuildCause) GetCauseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CauseType) {
		return nil, false
	}
	return o.CauseType, true
}

// HasCauseType returns a boolean if a field has been set.
func (o *SyncBuildsRequestBuildCause) HasCauseType() bool {
	if o != nil && !IsNil(o.CauseType) {
		return true
	}

	return false
}

// SetCauseType gets a reference to the given string and assigns it to the CauseType field.
func (o *SyncBuildsRequestBuildCause) SetCauseType(v string) {
	o.CauseType = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *SyncBuildsRequestBuildCause) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncBuildsRequestBuildCause) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *SyncBuildsRequestBuildCause) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *SyncBuildsRequestBuildCause) SetUserId(v string) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *SyncBuildsRequestBuildCause) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncBuildsRequestBuildCause) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *SyncBuildsRequestBuildCause) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *SyncBuildsRequestBuildCause) SetUserName(v string) {
	o.UserName = &v
}

func (o SyncBuildsRequestBuildCause) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyncBuildsRequestBuildCause) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CauseType) {
		toSerialize["causeType"] = o.CauseType
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	return toSerialize, nil
}

type NullableSyncBuildsRequestBuildCause struct {
	value *SyncBuildsRequestBuildCause
	isSet bool
}

func (v NullableSyncBuildsRequestBuildCause) Get() *SyncBuildsRequestBuildCause {
	return v.value
}

func (v *NullableSyncBuildsRequestBuildCause) Set(val *SyncBuildsRequestBuildCause) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncBuildsRequestBuildCause) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncBuildsRequestBuildCause) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncBuildsRequestBuildCause(val *SyncBuildsRequestBuildCause) *NullableSyncBuildsRequestBuildCause {
	return &NullableSyncBuildsRequestBuildCause{value: val, isSet: true}
}

func (v NullableSyncBuildsRequestBuildCause) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncBuildsRequestBuildCause) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


