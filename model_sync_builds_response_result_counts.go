/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SyncBuildsResponseResultCounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyncBuildsResponseResultCounts{}

// SyncBuildsResponseResultCounts 数量
type SyncBuildsResponseResultCounts struct {
	Task *float32 `json:"task,omitempty"`
	Commit *float32 `json:"commit,omitempty"`
}

// NewSyncBuildsResponseResultCounts instantiates a new SyncBuildsResponseResultCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncBuildsResponseResultCounts() *SyncBuildsResponseResultCounts {
	this := SyncBuildsResponseResultCounts{}
	return &this
}

// NewSyncBuildsResponseResultCountsWithDefaults instantiates a new SyncBuildsResponseResultCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncBuildsResponseResultCountsWithDefaults() *SyncBuildsResponseResultCounts {
	this := SyncBuildsResponseResultCounts{}
	return &this
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *SyncBuildsResponseResultCounts) GetTask() float32 {
	if o == nil || IsNil(o.Task) {
		var ret float32
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncBuildsResponseResultCounts) GetTaskOk() (*float32, bool) {
	if o == nil || IsNil(o.Task) {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *SyncBuildsResponseResultCounts) HasTask() bool {
	if o != nil && !IsNil(o.Task) {
		return true
	}

	return false
}

// SetTask gets a reference to the given float32 and assigns it to the Task field.
func (o *SyncBuildsResponseResultCounts) SetTask(v float32) {
	o.Task = &v
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *SyncBuildsResponseResultCounts) GetCommit() float32 {
	if o == nil || IsNil(o.Commit) {
		var ret float32
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncBuildsResponseResultCounts) GetCommitOk() (*float32, bool) {
	if o == nil || IsNil(o.Commit) {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *SyncBuildsResponseResultCounts) HasCommit() bool {
	if o != nil && !IsNil(o.Commit) {
		return true
	}

	return false
}

// SetCommit gets a reference to the given float32 and assigns it to the Commit field.
func (o *SyncBuildsResponseResultCounts) SetCommit(v float32) {
	o.Commit = &v
}

func (o SyncBuildsResponseResultCounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyncBuildsResponseResultCounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Task) {
		toSerialize["task"] = o.Task
	}
	if !IsNil(o.Commit) {
		toSerialize["commit"] = o.Commit
	}
	return toSerialize, nil
}

type NullableSyncBuildsResponseResultCounts struct {
	value *SyncBuildsResponseResultCounts
	isSet bool
}

func (v NullableSyncBuildsResponseResultCounts) Get() *SyncBuildsResponseResultCounts {
	return v.value
}

func (v *NullableSyncBuildsResponseResultCounts) Set(val *SyncBuildsResponseResultCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncBuildsResponseResultCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncBuildsResponseResultCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncBuildsResponseResultCounts(val *SyncBuildsResponseResultCounts) *NullableSyncBuildsResponseResultCounts {
	return &NullableSyncBuildsResponseResultCounts{value: val, isSet: true}
}

func (v NullableSyncBuildsResponseResultCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncBuildsResponseResultCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


