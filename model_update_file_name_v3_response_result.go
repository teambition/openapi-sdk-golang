/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateFileNameV3ResponseResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateFileNameV3ResponseResult{}

// UpdateFileNameV3ResponseResult 更新文件标题响应
type UpdateFileNameV3ResponseResult struct {
	// 文件 ID
	Id *string `json:"id,omitempty"`
	// 文件名称
	FileName *string `json:"fileName,omitempty"`
	// 文件名称拼音
	Pinyin *string `json:"pinyin,omitempty"`
	// 文件名称拼音缩写
	Py *string `json:"py,omitempty"`
	// 更新时间
	Updated *string `json:"updated,omitempty"`
}

// NewUpdateFileNameV3ResponseResult instantiates a new UpdateFileNameV3ResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFileNameV3ResponseResult() *UpdateFileNameV3ResponseResult {
	this := UpdateFileNameV3ResponseResult{}
	return &this
}

// NewUpdateFileNameV3ResponseResultWithDefaults instantiates a new UpdateFileNameV3ResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFileNameV3ResponseResultWithDefaults() *UpdateFileNameV3ResponseResult {
	this := UpdateFileNameV3ResponseResult{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateFileNameV3ResponseResult) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileNameV3ResponseResult) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateFileNameV3ResponseResult) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpdateFileNameV3ResponseResult) SetId(v string) {
	o.Id = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *UpdateFileNameV3ResponseResult) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileNameV3ResponseResult) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *UpdateFileNameV3ResponseResult) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *UpdateFileNameV3ResponseResult) SetFileName(v string) {
	o.FileName = &v
}

// GetPinyin returns the Pinyin field value if set, zero value otherwise.
func (o *UpdateFileNameV3ResponseResult) GetPinyin() string {
	if o == nil || IsNil(o.Pinyin) {
		var ret string
		return ret
	}
	return *o.Pinyin
}

// GetPinyinOk returns a tuple with the Pinyin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileNameV3ResponseResult) GetPinyinOk() (*string, bool) {
	if o == nil || IsNil(o.Pinyin) {
		return nil, false
	}
	return o.Pinyin, true
}

// HasPinyin returns a boolean if a field has been set.
func (o *UpdateFileNameV3ResponseResult) HasPinyin() bool {
	if o != nil && !IsNil(o.Pinyin) {
		return true
	}

	return false
}

// SetPinyin gets a reference to the given string and assigns it to the Pinyin field.
func (o *UpdateFileNameV3ResponseResult) SetPinyin(v string) {
	o.Pinyin = &v
}

// GetPy returns the Py field value if set, zero value otherwise.
func (o *UpdateFileNameV3ResponseResult) GetPy() string {
	if o == nil || IsNil(o.Py) {
		var ret string
		return ret
	}
	return *o.Py
}

// GetPyOk returns a tuple with the Py field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileNameV3ResponseResult) GetPyOk() (*string, bool) {
	if o == nil || IsNil(o.Py) {
		return nil, false
	}
	return o.Py, true
}

// HasPy returns a boolean if a field has been set.
func (o *UpdateFileNameV3ResponseResult) HasPy() bool {
	if o != nil && !IsNil(o.Py) {
		return true
	}

	return false
}

// SetPy gets a reference to the given string and assigns it to the Py field.
func (o *UpdateFileNameV3ResponseResult) SetPy(v string) {
	o.Py = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *UpdateFileNameV3ResponseResult) GetUpdated() string {
	if o == nil || IsNil(o.Updated) {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileNameV3ResponseResult) GetUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *UpdateFileNameV3ResponseResult) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *UpdateFileNameV3ResponseResult) SetUpdated(v string) {
	o.Updated = &v
}

func (o UpdateFileNameV3ResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateFileNameV3ResponseResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.Pinyin) {
		toSerialize["pinyin"] = o.Pinyin
	}
	if !IsNil(o.Py) {
		toSerialize["py"] = o.Py
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullableUpdateFileNameV3ResponseResult struct {
	value *UpdateFileNameV3ResponseResult
	isSet bool
}

func (v NullableUpdateFileNameV3ResponseResult) Get() *UpdateFileNameV3ResponseResult {
	return v.value
}

func (v *NullableUpdateFileNameV3ResponseResult) Set(val *UpdateFileNameV3ResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFileNameV3ResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFileNameV3ResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFileNameV3ResponseResult(val *UpdateFileNameV3ResponseResult) *NullableUpdateFileNameV3ResponseResult {
	return &NullableUpdateFileNameV3ResponseResult{value: val, isSet: true}
}

func (v NullableUpdateFileNameV3ResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFileNameV3ResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


