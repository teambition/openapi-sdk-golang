/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateFileVersionV3ResponseResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateFileVersionV3ResponseResult{}

// UpdateFileVersionV3ResponseResult 更新文件版本响应
type UpdateFileVersionV3ResponseResult struct {
	// 版本 ID
	Id *string `json:"id,omitempty"`
	// 文件 ID
	WorkId *string `json:"workId,omitempty"`
	// 文件名，包含扩展名
	FileName *string `json:"fileName,omitempty"`
	// 文件的 mimeType
	FileType *string `json:"fileType,omitempty"`
	// 项目文件大小
	FileSize *int32 `json:"fileSize,omitempty"`
	// 文件创建者ID
	CreatorId *string `json:"creatorId,omitempty"`
	// 创建时间
	Created *string `json:"created,omitempty"`
}

// NewUpdateFileVersionV3ResponseResult instantiates a new UpdateFileVersionV3ResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFileVersionV3ResponseResult() *UpdateFileVersionV3ResponseResult {
	this := UpdateFileVersionV3ResponseResult{}
	return &this
}

// NewUpdateFileVersionV3ResponseResultWithDefaults instantiates a new UpdateFileVersionV3ResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFileVersionV3ResponseResultWithDefaults() *UpdateFileVersionV3ResponseResult {
	this := UpdateFileVersionV3ResponseResult{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateFileVersionV3ResponseResult) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileVersionV3ResponseResult) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateFileVersionV3ResponseResult) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpdateFileVersionV3ResponseResult) SetId(v string) {
	o.Id = &v
}

// GetWorkId returns the WorkId field value if set, zero value otherwise.
func (o *UpdateFileVersionV3ResponseResult) GetWorkId() string {
	if o == nil || IsNil(o.WorkId) {
		var ret string
		return ret
	}
	return *o.WorkId
}

// GetWorkIdOk returns a tuple with the WorkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileVersionV3ResponseResult) GetWorkIdOk() (*string, bool) {
	if o == nil || IsNil(o.WorkId) {
		return nil, false
	}
	return o.WorkId, true
}

// HasWorkId returns a boolean if a field has been set.
func (o *UpdateFileVersionV3ResponseResult) HasWorkId() bool {
	if o != nil && !IsNil(o.WorkId) {
		return true
	}

	return false
}

// SetWorkId gets a reference to the given string and assigns it to the WorkId field.
func (o *UpdateFileVersionV3ResponseResult) SetWorkId(v string) {
	o.WorkId = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *UpdateFileVersionV3ResponseResult) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileVersionV3ResponseResult) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *UpdateFileVersionV3ResponseResult) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *UpdateFileVersionV3ResponseResult) SetFileName(v string) {
	o.FileName = &v
}

// GetFileType returns the FileType field value if set, zero value otherwise.
func (o *UpdateFileVersionV3ResponseResult) GetFileType() string {
	if o == nil || IsNil(o.FileType) {
		var ret string
		return ret
	}
	return *o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileVersionV3ResponseResult) GetFileTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FileType) {
		return nil, false
	}
	return o.FileType, true
}

// HasFileType returns a boolean if a field has been set.
func (o *UpdateFileVersionV3ResponseResult) HasFileType() bool {
	if o != nil && !IsNil(o.FileType) {
		return true
	}

	return false
}

// SetFileType gets a reference to the given string and assigns it to the FileType field.
func (o *UpdateFileVersionV3ResponseResult) SetFileType(v string) {
	o.FileType = &v
}

// GetFileSize returns the FileSize field value if set, zero value otherwise.
func (o *UpdateFileVersionV3ResponseResult) GetFileSize() int32 {
	if o == nil || IsNil(o.FileSize) {
		var ret int32
		return ret
	}
	return *o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileVersionV3ResponseResult) GetFileSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.FileSize) {
		return nil, false
	}
	return o.FileSize, true
}

// HasFileSize returns a boolean if a field has been set.
func (o *UpdateFileVersionV3ResponseResult) HasFileSize() bool {
	if o != nil && !IsNil(o.FileSize) {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given int32 and assigns it to the FileSize field.
func (o *UpdateFileVersionV3ResponseResult) SetFileSize(v int32) {
	o.FileSize = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *UpdateFileVersionV3ResponseResult) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileVersionV3ResponseResult) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *UpdateFileVersionV3ResponseResult) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *UpdateFileVersionV3ResponseResult) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *UpdateFileVersionV3ResponseResult) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileVersionV3ResponseResult) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *UpdateFileVersionV3ResponseResult) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *UpdateFileVersionV3ResponseResult) SetCreated(v string) {
	o.Created = &v
}

func (o UpdateFileVersionV3ResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateFileVersionV3ResponseResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.WorkId) {
		toSerialize["workId"] = o.WorkId
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.FileType) {
		toSerialize["fileType"] = o.FileType
	}
	if !IsNil(o.FileSize) {
		toSerialize["fileSize"] = o.FileSize
	}
	if !IsNil(o.CreatorId) {
		toSerialize["creatorId"] = o.CreatorId
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	return toSerialize, nil
}

type NullableUpdateFileVersionV3ResponseResult struct {
	value *UpdateFileVersionV3ResponseResult
	isSet bool
}

func (v NullableUpdateFileVersionV3ResponseResult) Get() *UpdateFileVersionV3ResponseResult {
	return v.value
}

func (v *NullableUpdateFileVersionV3ResponseResult) Set(val *UpdateFileVersionV3ResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFileVersionV3ResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFileVersionV3ResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFileVersionV3ResponseResult(val *UpdateFileVersionV3ResponseResult) *NullableUpdateFileVersionV3ResponseResult {
	return &NullableUpdateFileVersionV3ResponseResult{value: val, isSet: true}
}

func (v NullableUpdateFileVersionV3ResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFileVersionV3ResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


