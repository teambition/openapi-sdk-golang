/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdatePlanCustomStatusV3ResponseResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePlanCustomStatusV3ResponseResult{}

// UpdatePlanCustomStatusV3ResponseResult struct for UpdatePlanCustomStatusV3ResponseResult
type UpdatePlanCustomStatusV3ResponseResult struct {
	Change *UpdatePlanCustomStatusV3ResponseResultChange `json:"change,omitempty"`
}

// NewUpdatePlanCustomStatusV3ResponseResult instantiates a new UpdatePlanCustomStatusV3ResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePlanCustomStatusV3ResponseResult() *UpdatePlanCustomStatusV3ResponseResult {
	this := UpdatePlanCustomStatusV3ResponseResult{}
	return &this
}

// NewUpdatePlanCustomStatusV3ResponseResultWithDefaults instantiates a new UpdatePlanCustomStatusV3ResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePlanCustomStatusV3ResponseResultWithDefaults() *UpdatePlanCustomStatusV3ResponseResult {
	this := UpdatePlanCustomStatusV3ResponseResult{}
	return &this
}

// GetChange returns the Change field value if set, zero value otherwise.
func (o *UpdatePlanCustomStatusV3ResponseResult) GetChange() UpdatePlanCustomStatusV3ResponseResultChange {
	if o == nil || IsNil(o.Change) {
		var ret UpdatePlanCustomStatusV3ResponseResultChange
		return ret
	}
	return *o.Change
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlanCustomStatusV3ResponseResult) GetChangeOk() (*UpdatePlanCustomStatusV3ResponseResultChange, bool) {
	if o == nil || IsNil(o.Change) {
		return nil, false
	}
	return o.Change, true
}

// HasChange returns a boolean if a field has been set.
func (o *UpdatePlanCustomStatusV3ResponseResult) HasChange() bool {
	if o != nil && !IsNil(o.Change) {
		return true
	}

	return false
}

// SetChange gets a reference to the given UpdatePlanCustomStatusV3ResponseResultChange and assigns it to the Change field.
func (o *UpdatePlanCustomStatusV3ResponseResult) SetChange(v UpdatePlanCustomStatusV3ResponseResultChange) {
	o.Change = &v
}

func (o UpdatePlanCustomStatusV3ResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePlanCustomStatusV3ResponseResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Change) {
		toSerialize["change"] = o.Change
	}
	return toSerialize, nil
}

type NullableUpdatePlanCustomStatusV3ResponseResult struct {
	value *UpdatePlanCustomStatusV3ResponseResult
	isSet bool
}

func (v NullableUpdatePlanCustomStatusV3ResponseResult) Get() *UpdatePlanCustomStatusV3ResponseResult {
	return v.value
}

func (v *NullableUpdatePlanCustomStatusV3ResponseResult) Set(val *UpdatePlanCustomStatusV3ResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePlanCustomStatusV3ResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePlanCustomStatusV3ResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePlanCustomStatusV3ResponseResult(val *UpdatePlanCustomStatusV3ResponseResult) *NullableUpdatePlanCustomStatusV3ResponseResult {
	return &NullableUpdatePlanCustomStatusV3ResponseResult{value: val, isSet: true}
}

func (v NullableUpdatePlanCustomStatusV3ResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePlanCustomStatusV3ResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


