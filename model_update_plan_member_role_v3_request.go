/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdatePlanMemberRoleV3Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePlanMemberRoleV3Request{}

// UpdatePlanMemberRoleV3Request 添加计划成员请求
type UpdatePlanMemberRoleV3Request struct {
	// 用户Id列表, 直接覆盖原有成员； 建议使用addUserIds和removeUserIds
	UserIds []string `json:"userIds,omitempty"`
	// 添加用户Id列表， 在userIds存在时无效
	AddUserIds []string `json:"addUserIds,omitempty"`
	// 移除用户Id列表， 在userIds存在时无效
	RemoveUserIds []string `json:"removeUserIds,omitempty"`
	// 计划成员角色，-1=审批人，0=参与者，1=管理员
	Role *string `json:"role,omitempty"`
}

// NewUpdatePlanMemberRoleV3Request instantiates a new UpdatePlanMemberRoleV3Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePlanMemberRoleV3Request() *UpdatePlanMemberRoleV3Request {
	this := UpdatePlanMemberRoleV3Request{}
	return &this
}

// NewUpdatePlanMemberRoleV3RequestWithDefaults instantiates a new UpdatePlanMemberRoleV3Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePlanMemberRoleV3RequestWithDefaults() *UpdatePlanMemberRoleV3Request {
	this := UpdatePlanMemberRoleV3Request{}
	return &this
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *UpdatePlanMemberRoleV3Request) GetUserIds() []string {
	if o == nil || IsNil(o.UserIds) {
		var ret []string
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlanMemberRoleV3Request) GetUserIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *UpdatePlanMemberRoleV3Request) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []string and assigns it to the UserIds field.
func (o *UpdatePlanMemberRoleV3Request) SetUserIds(v []string) {
	o.UserIds = v
}

// GetAddUserIds returns the AddUserIds field value if set, zero value otherwise.
func (o *UpdatePlanMemberRoleV3Request) GetAddUserIds() []string {
	if o == nil || IsNil(o.AddUserIds) {
		var ret []string
		return ret
	}
	return o.AddUserIds
}

// GetAddUserIdsOk returns a tuple with the AddUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlanMemberRoleV3Request) GetAddUserIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AddUserIds) {
		return nil, false
	}
	return o.AddUserIds, true
}

// HasAddUserIds returns a boolean if a field has been set.
func (o *UpdatePlanMemberRoleV3Request) HasAddUserIds() bool {
	if o != nil && !IsNil(o.AddUserIds) {
		return true
	}

	return false
}

// SetAddUserIds gets a reference to the given []string and assigns it to the AddUserIds field.
func (o *UpdatePlanMemberRoleV3Request) SetAddUserIds(v []string) {
	o.AddUserIds = v
}

// GetRemoveUserIds returns the RemoveUserIds field value if set, zero value otherwise.
func (o *UpdatePlanMemberRoleV3Request) GetRemoveUserIds() []string {
	if o == nil || IsNil(o.RemoveUserIds) {
		var ret []string
		return ret
	}
	return o.RemoveUserIds
}

// GetRemoveUserIdsOk returns a tuple with the RemoveUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlanMemberRoleV3Request) GetRemoveUserIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.RemoveUserIds) {
		return nil, false
	}
	return o.RemoveUserIds, true
}

// HasRemoveUserIds returns a boolean if a field has been set.
func (o *UpdatePlanMemberRoleV3Request) HasRemoveUserIds() bool {
	if o != nil && !IsNil(o.RemoveUserIds) {
		return true
	}

	return false
}

// SetRemoveUserIds gets a reference to the given []string and assigns it to the RemoveUserIds field.
func (o *UpdatePlanMemberRoleV3Request) SetRemoveUserIds(v []string) {
	o.RemoveUserIds = v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *UpdatePlanMemberRoleV3Request) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlanMemberRoleV3Request) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *UpdatePlanMemberRoleV3Request) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *UpdatePlanMemberRoleV3Request) SetRole(v string) {
	o.Role = &v
}

func (o UpdatePlanMemberRoleV3Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePlanMemberRoleV3Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserIds) {
		toSerialize["userIds"] = o.UserIds
	}
	if !IsNil(o.AddUserIds) {
		toSerialize["addUserIds"] = o.AddUserIds
	}
	if !IsNil(o.RemoveUserIds) {
		toSerialize["removeUserIds"] = o.RemoveUserIds
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	return toSerialize, nil
}

type NullableUpdatePlanMemberRoleV3Request struct {
	value *UpdatePlanMemberRoleV3Request
	isSet bool
}

func (v NullableUpdatePlanMemberRoleV3Request) Get() *UpdatePlanMemberRoleV3Request {
	return v.value
}

func (v *NullableUpdatePlanMemberRoleV3Request) Set(val *UpdatePlanMemberRoleV3Request) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePlanMemberRoleV3Request) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePlanMemberRoleV3Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePlanMemberRoleV3Request(val *UpdatePlanMemberRoleV3Request) *NullableUpdatePlanMemberRoleV3Request {
	return &NullableUpdatePlanMemberRoleV3Request{value: val, isSet: true}
}

func (v NullableUpdatePlanMemberRoleV3Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePlanMemberRoleV3Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


