/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdatePlanMemberRoleV3ResponseResultInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePlanMemberRoleV3ResponseResultInner{}

// UpdatePlanMemberRoleV3ResponseResultInner struct for UpdatePlanMemberRoleV3ResponseResultInner
type UpdatePlanMemberRoleV3ResponseResultInner struct {
	// 计划成员id
	Id *string `json:"id,omitempty"`
	// 计划Id
	ProjectPlanId *string `json:"projectPlanId,omitempty"`
	// 用户id
	UserId *string `json:"userId,omitempty"`
	// 计划角色，-1=审批人，0=参与者，1=管理员
	Role []float32 `json:"role,omitempty"`
	// 加入时间
	Joined *string `json:"joined,omitempty"`
	// 更新时间
	Updated *string `json:"updated,omitempty"`
	// 项目id
	ProjectId *string `json:"projectId,omitempty"`
	// 是否删除
	IsDeleted *bool `json:"isDeleted,omitempty"`
}

// NewUpdatePlanMemberRoleV3ResponseResultInner instantiates a new UpdatePlanMemberRoleV3ResponseResultInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePlanMemberRoleV3ResponseResultInner() *UpdatePlanMemberRoleV3ResponseResultInner {
	this := UpdatePlanMemberRoleV3ResponseResultInner{}
	return &this
}

// NewUpdatePlanMemberRoleV3ResponseResultInnerWithDefaults instantiates a new UpdatePlanMemberRoleV3ResponseResultInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePlanMemberRoleV3ResponseResultInnerWithDefaults() *UpdatePlanMemberRoleV3ResponseResultInner {
	this := UpdatePlanMemberRoleV3ResponseResultInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) SetId(v string) {
	o.Id = &v
}

// GetProjectPlanId returns the ProjectPlanId field value if set, zero value otherwise.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) GetProjectPlanId() string {
	if o == nil || IsNil(o.ProjectPlanId) {
		var ret string
		return ret
	}
	return *o.ProjectPlanId
}

// GetProjectPlanIdOk returns a tuple with the ProjectPlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) GetProjectPlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectPlanId) {
		return nil, false
	}
	return o.ProjectPlanId, true
}

// HasProjectPlanId returns a boolean if a field has been set.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) HasProjectPlanId() bool {
	if o != nil && !IsNil(o.ProjectPlanId) {
		return true
	}

	return false
}

// SetProjectPlanId gets a reference to the given string and assigns it to the ProjectPlanId field.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) SetProjectPlanId(v string) {
	o.ProjectPlanId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) SetUserId(v string) {
	o.UserId = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) GetRole() []float32 {
	if o == nil || IsNil(o.Role) {
		var ret []float32
		return ret
	}
	return o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) GetRoleOk() ([]float32, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given []float32 and assigns it to the Role field.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) SetRole(v []float32) {
	o.Role = v
}

// GetJoined returns the Joined field value if set, zero value otherwise.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) GetJoined() string {
	if o == nil || IsNil(o.Joined) {
		var ret string
		return ret
	}
	return *o.Joined
}

// GetJoinedOk returns a tuple with the Joined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) GetJoinedOk() (*string, bool) {
	if o == nil || IsNil(o.Joined) {
		return nil, false
	}
	return o.Joined, true
}

// HasJoined returns a boolean if a field has been set.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) HasJoined() bool {
	if o != nil && !IsNil(o.Joined) {
		return true
	}

	return false
}

// SetJoined gets a reference to the given string and assigns it to the Joined field.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) SetJoined(v string) {
	o.Joined = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) GetUpdated() string {
	if o == nil || IsNil(o.Updated) {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) GetUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) SetUpdated(v string) {
	o.Updated = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) GetIsDeleted() bool {
	if o == nil || IsNil(o.IsDeleted) {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) GetIsDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeleted) {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) HasIsDeleted() bool {
	if o != nil && !IsNil(o.IsDeleted) {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *UpdatePlanMemberRoleV3ResponseResultInner) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

func (o UpdatePlanMemberRoleV3ResponseResultInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePlanMemberRoleV3ResponseResultInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ProjectPlanId) {
		toSerialize["projectPlanId"] = o.ProjectPlanId
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Joined) {
		toSerialize["joined"] = o.Joined
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	if !IsNil(o.IsDeleted) {
		toSerialize["isDeleted"] = o.IsDeleted
	}
	return toSerialize, nil
}

type NullableUpdatePlanMemberRoleV3ResponseResultInner struct {
	value *UpdatePlanMemberRoleV3ResponseResultInner
	isSet bool
}

func (v NullableUpdatePlanMemberRoleV3ResponseResultInner) Get() *UpdatePlanMemberRoleV3ResponseResultInner {
	return v.value
}

func (v *NullableUpdatePlanMemberRoleV3ResponseResultInner) Set(val *UpdatePlanMemberRoleV3ResponseResultInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePlanMemberRoleV3ResponseResultInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePlanMemberRoleV3ResponseResultInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePlanMemberRoleV3ResponseResultInner(val *UpdatePlanMemberRoleV3ResponseResultInner) *NullableUpdatePlanMemberRoleV3ResponseResultInner {
	return &NullableUpdatePlanMemberRoleV3ResponseResultInner{value: val, isSet: true}
}

func (v NullableUpdatePlanMemberRoleV3ResponseResultInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePlanMemberRoleV3ResponseResultInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


