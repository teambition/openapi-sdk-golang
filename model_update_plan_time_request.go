/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdatePlanTimeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePlanTimeRequest{}

// UpdatePlanTimeRequest struct for UpdatePlanTimeRequest
type UpdatePlanTimeRequest struct {
	// 工时所属日期字符串 如'2023-03-04'
	Date *string `json:"date,omitempty"`
	// 更新计划工时数（毫秒）如 39600000 
	Plantime *int32 `json:"plantime,omitempty"`
	// 工时执行者 ID
	UserId *string `json:"userId,omitempty"`
}

// NewUpdatePlanTimeRequest instantiates a new UpdatePlanTimeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePlanTimeRequest() *UpdatePlanTimeRequest {
	this := UpdatePlanTimeRequest{}
	return &this
}

// NewUpdatePlanTimeRequestWithDefaults instantiates a new UpdatePlanTimeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePlanTimeRequestWithDefaults() *UpdatePlanTimeRequest {
	this := UpdatePlanTimeRequest{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *UpdatePlanTimeRequest) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlanTimeRequest) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *UpdatePlanTimeRequest) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *UpdatePlanTimeRequest) SetDate(v string) {
	o.Date = &v
}

// GetPlantime returns the Plantime field value if set, zero value otherwise.
func (o *UpdatePlanTimeRequest) GetPlantime() int32 {
	if o == nil || IsNil(o.Plantime) {
		var ret int32
		return ret
	}
	return *o.Plantime
}

// GetPlantimeOk returns a tuple with the Plantime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlanTimeRequest) GetPlantimeOk() (*int32, bool) {
	if o == nil || IsNil(o.Plantime) {
		return nil, false
	}
	return o.Plantime, true
}

// HasPlantime returns a boolean if a field has been set.
func (o *UpdatePlanTimeRequest) HasPlantime() bool {
	if o != nil && !IsNil(o.Plantime) {
		return true
	}

	return false
}

// SetPlantime gets a reference to the given int32 and assigns it to the Plantime field.
func (o *UpdatePlanTimeRequest) SetPlantime(v int32) {
	o.Plantime = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UpdatePlanTimeRequest) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlanTimeRequest) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UpdatePlanTimeRequest) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *UpdatePlanTimeRequest) SetUserId(v string) {
	o.UserId = &v
}

func (o UpdatePlanTimeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePlanTimeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Plantime) {
		toSerialize["plantime"] = o.Plantime
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

type NullableUpdatePlanTimeRequest struct {
	value *UpdatePlanTimeRequest
	isSet bool
}

func (v NullableUpdatePlanTimeRequest) Get() *UpdatePlanTimeRequest {
	return v.value
}

func (v *NullableUpdatePlanTimeRequest) Set(val *UpdatePlanTimeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePlanTimeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePlanTimeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePlanTimeRequest(val *UpdatePlanTimeRequest) *NullableUpdatePlanTimeRequest {
	return &NullableUpdatePlanTimeRequest{value: val, isSet: true}
}

func (v NullableUpdatePlanTimeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePlanTimeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


