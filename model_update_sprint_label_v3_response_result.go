/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UpdateSprintLabelV3ResponseResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSprintLabelV3ResponseResult{}

// UpdateSprintLabelV3ResponseResult 迭代更新结果
type UpdateSprintLabelV3ResponseResult struct {
	// 迭代 ID
	Id *string `json:"id,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
	// 迭代标签信息
	Labels []string `json:"labels,omitempty"`
}

// NewUpdateSprintLabelV3ResponseResult instantiates a new UpdateSprintLabelV3ResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSprintLabelV3ResponseResult() *UpdateSprintLabelV3ResponseResult {
	this := UpdateSprintLabelV3ResponseResult{}
	return &this
}

// NewUpdateSprintLabelV3ResponseResultWithDefaults instantiates a new UpdateSprintLabelV3ResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSprintLabelV3ResponseResultWithDefaults() *UpdateSprintLabelV3ResponseResult {
	this := UpdateSprintLabelV3ResponseResult{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateSprintLabelV3ResponseResult) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSprintLabelV3ResponseResult) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateSprintLabelV3ResponseResult) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpdateSprintLabelV3ResponseResult) SetId(v string) {
	o.Id = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *UpdateSprintLabelV3ResponseResult) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSprintLabelV3ResponseResult) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *UpdateSprintLabelV3ResponseResult) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *UpdateSprintLabelV3ResponseResult) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *UpdateSprintLabelV3ResponseResult) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSprintLabelV3ResponseResult) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *UpdateSprintLabelV3ResponseResult) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *UpdateSprintLabelV3ResponseResult) SetLabels(v []string) {
	o.Labels = v
}

func (o UpdateSprintLabelV3ResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSprintLabelV3ResponseResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

type NullableUpdateSprintLabelV3ResponseResult struct {
	value *UpdateSprintLabelV3ResponseResult
	isSet bool
}

func (v NullableUpdateSprintLabelV3ResponseResult) Get() *UpdateSprintLabelV3ResponseResult {
	return v.value
}

func (v *NullableUpdateSprintLabelV3ResponseResult) Set(val *UpdateSprintLabelV3ResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSprintLabelV3ResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSprintLabelV3ResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSprintLabelV3ResponseResult(val *UpdateSprintLabelV3ResponseResult) *NullableUpdateSprintLabelV3ResponseResult {
	return &NullableUpdateSprintLabelV3ResponseResult{value: val, isSet: true}
}

func (v NullableUpdateSprintLabelV3ResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSprintLabelV3ResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


