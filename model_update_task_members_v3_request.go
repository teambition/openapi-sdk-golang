/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateTaskMembersV3Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTaskMembersV3Request{}

// UpdateTaskMembersV3Request 更新任务参与者请求
type UpdateTaskMembersV3Request struct {
	// 更新任务参与者列表
	InvolveMembers []string `json:"involveMembers,omitempty"`
	// 新增参与者列表
	AddInvolvers []string `json:"addInvolvers,omitempty"`
	// 移除参与者列表
	DelInvolvers []string `json:"delInvolvers,omitempty"`
	// 是否忽略触发动态
	DisableActivity *bool `json:"disableActivity,omitempty"`
	// 是否忽略触发通知
	DisableNotification *bool `json:"disableNotification,omitempty"`
}

// NewUpdateTaskMembersV3Request instantiates a new UpdateTaskMembersV3Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTaskMembersV3Request() *UpdateTaskMembersV3Request {
	this := UpdateTaskMembersV3Request{}
	return &this
}

// NewUpdateTaskMembersV3RequestWithDefaults instantiates a new UpdateTaskMembersV3Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTaskMembersV3RequestWithDefaults() *UpdateTaskMembersV3Request {
	this := UpdateTaskMembersV3Request{}
	return &this
}

// GetInvolveMembers returns the InvolveMembers field value if set, zero value otherwise.
func (o *UpdateTaskMembersV3Request) GetInvolveMembers() []string {
	if o == nil || IsNil(o.InvolveMembers) {
		var ret []string
		return ret
	}
	return o.InvolveMembers
}

// GetInvolveMembersOk returns a tuple with the InvolveMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskMembersV3Request) GetInvolveMembersOk() ([]string, bool) {
	if o == nil || IsNil(o.InvolveMembers) {
		return nil, false
	}
	return o.InvolveMembers, true
}

// HasInvolveMembers returns a boolean if a field has been set.
func (o *UpdateTaskMembersV3Request) HasInvolveMembers() bool {
	if o != nil && !IsNil(o.InvolveMembers) {
		return true
	}

	return false
}

// SetInvolveMembers gets a reference to the given []string and assigns it to the InvolveMembers field.
func (o *UpdateTaskMembersV3Request) SetInvolveMembers(v []string) {
	o.InvolveMembers = v
}

// GetAddInvolvers returns the AddInvolvers field value if set, zero value otherwise.
func (o *UpdateTaskMembersV3Request) GetAddInvolvers() []string {
	if o == nil || IsNil(o.AddInvolvers) {
		var ret []string
		return ret
	}
	return o.AddInvolvers
}

// GetAddInvolversOk returns a tuple with the AddInvolvers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskMembersV3Request) GetAddInvolversOk() ([]string, bool) {
	if o == nil || IsNil(o.AddInvolvers) {
		return nil, false
	}
	return o.AddInvolvers, true
}

// HasAddInvolvers returns a boolean if a field has been set.
func (o *UpdateTaskMembersV3Request) HasAddInvolvers() bool {
	if o != nil && !IsNil(o.AddInvolvers) {
		return true
	}

	return false
}

// SetAddInvolvers gets a reference to the given []string and assigns it to the AddInvolvers field.
func (o *UpdateTaskMembersV3Request) SetAddInvolvers(v []string) {
	o.AddInvolvers = v
}

// GetDelInvolvers returns the DelInvolvers field value if set, zero value otherwise.
func (o *UpdateTaskMembersV3Request) GetDelInvolvers() []string {
	if o == nil || IsNil(o.DelInvolvers) {
		var ret []string
		return ret
	}
	return o.DelInvolvers
}

// GetDelInvolversOk returns a tuple with the DelInvolvers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskMembersV3Request) GetDelInvolversOk() ([]string, bool) {
	if o == nil || IsNil(o.DelInvolvers) {
		return nil, false
	}
	return o.DelInvolvers, true
}

// HasDelInvolvers returns a boolean if a field has been set.
func (o *UpdateTaskMembersV3Request) HasDelInvolvers() bool {
	if o != nil && !IsNil(o.DelInvolvers) {
		return true
	}

	return false
}

// SetDelInvolvers gets a reference to the given []string and assigns it to the DelInvolvers field.
func (o *UpdateTaskMembersV3Request) SetDelInvolvers(v []string) {
	o.DelInvolvers = v
}

// GetDisableActivity returns the DisableActivity field value if set, zero value otherwise.
func (o *UpdateTaskMembersV3Request) GetDisableActivity() bool {
	if o == nil || IsNil(o.DisableActivity) {
		var ret bool
		return ret
	}
	return *o.DisableActivity
}

// GetDisableActivityOk returns a tuple with the DisableActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskMembersV3Request) GetDisableActivityOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableActivity) {
		return nil, false
	}
	return o.DisableActivity, true
}

// HasDisableActivity returns a boolean if a field has been set.
func (o *UpdateTaskMembersV3Request) HasDisableActivity() bool {
	if o != nil && !IsNil(o.DisableActivity) {
		return true
	}

	return false
}

// SetDisableActivity gets a reference to the given bool and assigns it to the DisableActivity field.
func (o *UpdateTaskMembersV3Request) SetDisableActivity(v bool) {
	o.DisableActivity = &v
}

// GetDisableNotification returns the DisableNotification field value if set, zero value otherwise.
func (o *UpdateTaskMembersV3Request) GetDisableNotification() bool {
	if o == nil || IsNil(o.DisableNotification) {
		var ret bool
		return ret
	}
	return *o.DisableNotification
}

// GetDisableNotificationOk returns a tuple with the DisableNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskMembersV3Request) GetDisableNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableNotification) {
		return nil, false
	}
	return o.DisableNotification, true
}

// HasDisableNotification returns a boolean if a field has been set.
func (o *UpdateTaskMembersV3Request) HasDisableNotification() bool {
	if o != nil && !IsNil(o.DisableNotification) {
		return true
	}

	return false
}

// SetDisableNotification gets a reference to the given bool and assigns it to the DisableNotification field.
func (o *UpdateTaskMembersV3Request) SetDisableNotification(v bool) {
	o.DisableNotification = &v
}

func (o UpdateTaskMembersV3Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTaskMembersV3Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InvolveMembers) {
		toSerialize["involveMembers"] = o.InvolveMembers
	}
	if !IsNil(o.AddInvolvers) {
		toSerialize["addInvolvers"] = o.AddInvolvers
	}
	if !IsNil(o.DelInvolvers) {
		toSerialize["delInvolvers"] = o.DelInvolvers
	}
	if !IsNil(o.DisableActivity) {
		toSerialize["disableActivity"] = o.DisableActivity
	}
	if !IsNil(o.DisableNotification) {
		toSerialize["disableNotification"] = o.DisableNotification
	}
	return toSerialize, nil
}

type NullableUpdateTaskMembersV3Request struct {
	value *UpdateTaskMembersV3Request
	isSet bool
}

func (v NullableUpdateTaskMembersV3Request) Get() *UpdateTaskMembersV3Request {
	return v.value
}

func (v *NullableUpdateTaskMembersV3Request) Set(val *UpdateTaskMembersV3Request) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTaskMembersV3Request) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTaskMembersV3Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTaskMembersV3Request(val *UpdateTaskMembersV3Request) *NullableUpdateTaskMembersV3Request {
	return &NullableUpdateTaskMembersV3Request{value: val, isSet: true}
}

func (v NullableUpdateTaskMembersV3Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTaskMembersV3Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


