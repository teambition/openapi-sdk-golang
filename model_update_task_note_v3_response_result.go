/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UpdateTaskNoteV3ResponseResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTaskNoteV3ResponseResult{}

// UpdateTaskNoteV3ResponseResult 更新任务备注响应
type UpdateTaskNoteV3ResponseResult struct {
	// 任务备注
	Note *string `json:"note,omitempty"`
	// 更新时间
	Updated *time.Time `json:"updated,omitempty"`
}

// NewUpdateTaskNoteV3ResponseResult instantiates a new UpdateTaskNoteV3ResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTaskNoteV3ResponseResult() *UpdateTaskNoteV3ResponseResult {
	this := UpdateTaskNoteV3ResponseResult{}
	return &this
}

// NewUpdateTaskNoteV3ResponseResultWithDefaults instantiates a new UpdateTaskNoteV3ResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTaskNoteV3ResponseResultWithDefaults() *UpdateTaskNoteV3ResponseResult {
	this := UpdateTaskNoteV3ResponseResult{}
	return &this
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *UpdateTaskNoteV3ResponseResult) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskNoteV3ResponseResult) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *UpdateTaskNoteV3ResponseResult) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *UpdateTaskNoteV3ResponseResult) SetNote(v string) {
	o.Note = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *UpdateTaskNoteV3ResponseResult) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskNoteV3ResponseResult) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *UpdateTaskNoteV3ResponseResult) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *UpdateTaskNoteV3ResponseResult) SetUpdated(v time.Time) {
	o.Updated = &v
}

func (o UpdateTaskNoteV3ResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTaskNoteV3ResponseResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullableUpdateTaskNoteV3ResponseResult struct {
	value *UpdateTaskNoteV3ResponseResult
	isSet bool
}

func (v NullableUpdateTaskNoteV3ResponseResult) Get() *UpdateTaskNoteV3ResponseResult {
	return v.value
}

func (v *NullableUpdateTaskNoteV3ResponseResult) Set(val *UpdateTaskNoteV3ResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTaskNoteV3ResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTaskNoteV3ResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTaskNoteV3ResponseResult(val *UpdateTaskNoteV3ResponseResult) *NullableUpdateTaskNoteV3ResponseResult {
	return &NullableUpdateTaskNoteV3ResponseResult{value: val, isSet: true}
}

func (v NullableUpdateTaskNoteV3ResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTaskNoteV3ResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


