/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateTaskPriorityV3Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTaskPriorityV3Request{}

// UpdateTaskPriorityV3Request 更新任务优先级请求
type UpdateTaskPriorityV3Request struct {
	// 优先级
	Priority *float32 `json:"priority,omitempty"`
	// 优先级名称（取通过优先级名称名匹配到的第一个优先级，与priority同时传入时优先用priority）
	PriorityName *string `json:"priorityName,omitempty"`
}

// NewUpdateTaskPriorityV3Request instantiates a new UpdateTaskPriorityV3Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTaskPriorityV3Request() *UpdateTaskPriorityV3Request {
	this := UpdateTaskPriorityV3Request{}
	return &this
}

// NewUpdateTaskPriorityV3RequestWithDefaults instantiates a new UpdateTaskPriorityV3Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTaskPriorityV3RequestWithDefaults() *UpdateTaskPriorityV3Request {
	this := UpdateTaskPriorityV3Request{}
	return &this
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *UpdateTaskPriorityV3Request) GetPriority() float32 {
	if o == nil || IsNil(o.Priority) {
		var ret float32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskPriorityV3Request) GetPriorityOk() (*float32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *UpdateTaskPriorityV3Request) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given float32 and assigns it to the Priority field.
func (o *UpdateTaskPriorityV3Request) SetPriority(v float32) {
	o.Priority = &v
}

// GetPriorityName returns the PriorityName field value if set, zero value otherwise.
func (o *UpdateTaskPriorityV3Request) GetPriorityName() string {
	if o == nil || IsNil(o.PriorityName) {
		var ret string
		return ret
	}
	return *o.PriorityName
}

// GetPriorityNameOk returns a tuple with the PriorityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskPriorityV3Request) GetPriorityNameOk() (*string, bool) {
	if o == nil || IsNil(o.PriorityName) {
		return nil, false
	}
	return o.PriorityName, true
}

// HasPriorityName returns a boolean if a field has been set.
func (o *UpdateTaskPriorityV3Request) HasPriorityName() bool {
	if o != nil && !IsNil(o.PriorityName) {
		return true
	}

	return false
}

// SetPriorityName gets a reference to the given string and assigns it to the PriorityName field.
func (o *UpdateTaskPriorityV3Request) SetPriorityName(v string) {
	o.PriorityName = &v
}

func (o UpdateTaskPriorityV3Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTaskPriorityV3Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.PriorityName) {
		toSerialize["priorityName"] = o.PriorityName
	}
	return toSerialize, nil
}

type NullableUpdateTaskPriorityV3Request struct {
	value *UpdateTaskPriorityV3Request
	isSet bool
}

func (v NullableUpdateTaskPriorityV3Request) Get() *UpdateTaskPriorityV3Request {
	return v.value
}

func (v *NullableUpdateTaskPriorityV3Request) Set(val *UpdateTaskPriorityV3Request) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTaskPriorityV3Request) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTaskPriorityV3Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTaskPriorityV3Request(val *UpdateTaskPriorityV3Request) *NullableUpdateTaskPriorityV3Request {
	return &NullableUpdateTaskPriorityV3Request{value: val, isSet: true}
}

func (v NullableUpdateTaskPriorityV3Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTaskPriorityV3Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


