/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateTaskProgressV3Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTaskProgressV3Request{}

// UpdateTaskProgressV3Request 
type UpdateTaskProgressV3Request struct {
	// 进度
	Progress *float32 `json:"progress,omitempty"`
	// 是否忽略触发动态
	DisableActivity *bool `json:"disableActivity,omitempty"`
	// 是否忽略触发通知
	DisableNotification *bool `json:"disableNotification,omitempty"`
}

// NewUpdateTaskProgressV3Request instantiates a new UpdateTaskProgressV3Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTaskProgressV3Request() *UpdateTaskProgressV3Request {
	this := UpdateTaskProgressV3Request{}
	return &this
}

// NewUpdateTaskProgressV3RequestWithDefaults instantiates a new UpdateTaskProgressV3Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTaskProgressV3RequestWithDefaults() *UpdateTaskProgressV3Request {
	this := UpdateTaskProgressV3Request{}
	return &this
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *UpdateTaskProgressV3Request) GetProgress() float32 {
	if o == nil || IsNil(o.Progress) {
		var ret float32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskProgressV3Request) GetProgressOk() (*float32, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *UpdateTaskProgressV3Request) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given float32 and assigns it to the Progress field.
func (o *UpdateTaskProgressV3Request) SetProgress(v float32) {
	o.Progress = &v
}

// GetDisableActivity returns the DisableActivity field value if set, zero value otherwise.
func (o *UpdateTaskProgressV3Request) GetDisableActivity() bool {
	if o == nil || IsNil(o.DisableActivity) {
		var ret bool
		return ret
	}
	return *o.DisableActivity
}

// GetDisableActivityOk returns a tuple with the DisableActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskProgressV3Request) GetDisableActivityOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableActivity) {
		return nil, false
	}
	return o.DisableActivity, true
}

// HasDisableActivity returns a boolean if a field has been set.
func (o *UpdateTaskProgressV3Request) HasDisableActivity() bool {
	if o != nil && !IsNil(o.DisableActivity) {
		return true
	}

	return false
}

// SetDisableActivity gets a reference to the given bool and assigns it to the DisableActivity field.
func (o *UpdateTaskProgressV3Request) SetDisableActivity(v bool) {
	o.DisableActivity = &v
}

// GetDisableNotification returns the DisableNotification field value if set, zero value otherwise.
func (o *UpdateTaskProgressV3Request) GetDisableNotification() bool {
	if o == nil || IsNil(o.DisableNotification) {
		var ret bool
		return ret
	}
	return *o.DisableNotification
}

// GetDisableNotificationOk returns a tuple with the DisableNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskProgressV3Request) GetDisableNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableNotification) {
		return nil, false
	}
	return o.DisableNotification, true
}

// HasDisableNotification returns a boolean if a field has been set.
func (o *UpdateTaskProgressV3Request) HasDisableNotification() bool {
	if o != nil && !IsNil(o.DisableNotification) {
		return true
	}

	return false
}

// SetDisableNotification gets a reference to the given bool and assigns it to the DisableNotification field.
func (o *UpdateTaskProgressV3Request) SetDisableNotification(v bool) {
	o.DisableNotification = &v
}

func (o UpdateTaskProgressV3Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTaskProgressV3Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.DisableActivity) {
		toSerialize["disableActivity"] = o.DisableActivity
	}
	if !IsNil(o.DisableNotification) {
		toSerialize["disableNotification"] = o.DisableNotification
	}
	return toSerialize, nil
}

type NullableUpdateTaskProgressV3Request struct {
	value *UpdateTaskProgressV3Request
	isSet bool
}

func (v NullableUpdateTaskProgressV3Request) Get() *UpdateTaskProgressV3Request {
	return v.value
}

func (v *NullableUpdateTaskProgressV3Request) Set(val *UpdateTaskProgressV3Request) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTaskProgressV3Request) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTaskProgressV3Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTaskProgressV3Request(val *UpdateTaskProgressV3Request) *NullableUpdateTaskProgressV3Request {
	return &NullableUpdateTaskProgressV3Request{value: val, isSet: true}
}

func (v NullableUpdateTaskProgressV3Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTaskProgressV3Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


