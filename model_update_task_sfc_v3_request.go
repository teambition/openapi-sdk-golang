/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateTaskSfcV3Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTaskSfcV3Request{}

// UpdateTaskSfcV3Request struct for UpdateTaskSfcV3Request
type UpdateTaskSfcV3Request struct {
	// 目标任务类型ID，更新类型时会同时改变状态到目标任务类型绑定的工作流状态
	SfcId *string `json:"sfcId,omitempty"`
	// 指定目标工作流状态ID（可选），需保证状态流程阶段和任务流程阶段相同
	TfsId *string `json:"tfsId,omitempty"`
}

// NewUpdateTaskSfcV3Request instantiates a new UpdateTaskSfcV3Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTaskSfcV3Request() *UpdateTaskSfcV3Request {
	this := UpdateTaskSfcV3Request{}
	return &this
}

// NewUpdateTaskSfcV3RequestWithDefaults instantiates a new UpdateTaskSfcV3Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTaskSfcV3RequestWithDefaults() *UpdateTaskSfcV3Request {
	this := UpdateTaskSfcV3Request{}
	return &this
}

// GetSfcId returns the SfcId field value if set, zero value otherwise.
func (o *UpdateTaskSfcV3Request) GetSfcId() string {
	if o == nil || IsNil(o.SfcId) {
		var ret string
		return ret
	}
	return *o.SfcId
}

// GetSfcIdOk returns a tuple with the SfcId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskSfcV3Request) GetSfcIdOk() (*string, bool) {
	if o == nil || IsNil(o.SfcId) {
		return nil, false
	}
	return o.SfcId, true
}

// HasSfcId returns a boolean if a field has been set.
func (o *UpdateTaskSfcV3Request) HasSfcId() bool {
	if o != nil && !IsNil(o.SfcId) {
		return true
	}

	return false
}

// SetSfcId gets a reference to the given string and assigns it to the SfcId field.
func (o *UpdateTaskSfcV3Request) SetSfcId(v string) {
	o.SfcId = &v
}

// GetTfsId returns the TfsId field value if set, zero value otherwise.
func (o *UpdateTaskSfcV3Request) GetTfsId() string {
	if o == nil || IsNil(o.TfsId) {
		var ret string
		return ret
	}
	return *o.TfsId
}

// GetTfsIdOk returns a tuple with the TfsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTaskSfcV3Request) GetTfsIdOk() (*string, bool) {
	if o == nil || IsNil(o.TfsId) {
		return nil, false
	}
	return o.TfsId, true
}

// HasTfsId returns a boolean if a field has been set.
func (o *UpdateTaskSfcV3Request) HasTfsId() bool {
	if o != nil && !IsNil(o.TfsId) {
		return true
	}

	return false
}

// SetTfsId gets a reference to the given string and assigns it to the TfsId field.
func (o *UpdateTaskSfcV3Request) SetTfsId(v string) {
	o.TfsId = &v
}

func (o UpdateTaskSfcV3Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTaskSfcV3Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SfcId) {
		toSerialize["sfcId"] = o.SfcId
	}
	if !IsNil(o.TfsId) {
		toSerialize["tfsId"] = o.TfsId
	}
	return toSerialize, nil
}

type NullableUpdateTaskSfcV3Request struct {
	value *UpdateTaskSfcV3Request
	isSet bool
}

func (v NullableUpdateTaskSfcV3Request) Get() *UpdateTaskSfcV3Request {
	return v.value
}

func (v *NullableUpdateTaskSfcV3Request) Set(val *UpdateTaskSfcV3Request) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTaskSfcV3Request) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTaskSfcV3Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTaskSfcV3Request(val *UpdateTaskSfcV3Request) *NullableUpdateTaskSfcV3Request {
	return &NullableUpdateTaskSfcV3Request{value: val, isSet: true}
}

func (v NullableUpdateTaskSfcV3Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTaskSfcV3Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


