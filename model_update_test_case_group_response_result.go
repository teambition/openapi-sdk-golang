/*
Teambition Open API

Teambition Open API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UpdateTestCaseGroupResponseResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTestCaseGroupResponseResult{}

// UpdateTestCaseGroupResponseResult struct for UpdateTestCaseGroupResponseResult
type UpdateTestCaseGroupResponseResult struct {
	// 测试用例 ID
	Id *string `json:"id,omitempty"`
	// 测试计划 ID
	TestplanId *string `json:"testplanId,omitempty"`
	// 分组 ID
	CommongroupId *string `json:"commongroupId,omitempty"`
	// 测试用例更新时间(UTC)
	Updated *time.Time `json:"updated,omitempty"`
}

// NewUpdateTestCaseGroupResponseResult instantiates a new UpdateTestCaseGroupResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTestCaseGroupResponseResult() *UpdateTestCaseGroupResponseResult {
	this := UpdateTestCaseGroupResponseResult{}
	return &this
}

// NewUpdateTestCaseGroupResponseResultWithDefaults instantiates a new UpdateTestCaseGroupResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTestCaseGroupResponseResultWithDefaults() *UpdateTestCaseGroupResponseResult {
	this := UpdateTestCaseGroupResponseResult{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateTestCaseGroupResponseResult) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTestCaseGroupResponseResult) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateTestCaseGroupResponseResult) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpdateTestCaseGroupResponseResult) SetId(v string) {
	o.Id = &v
}

// GetTestplanId returns the TestplanId field value if set, zero value otherwise.
func (o *UpdateTestCaseGroupResponseResult) GetTestplanId() string {
	if o == nil || IsNil(o.TestplanId) {
		var ret string
		return ret
	}
	return *o.TestplanId
}

// GetTestplanIdOk returns a tuple with the TestplanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTestCaseGroupResponseResult) GetTestplanIdOk() (*string, bool) {
	if o == nil || IsNil(o.TestplanId) {
		return nil, false
	}
	return o.TestplanId, true
}

// HasTestplanId returns a boolean if a field has been set.
func (o *UpdateTestCaseGroupResponseResult) HasTestplanId() bool {
	if o != nil && !IsNil(o.TestplanId) {
		return true
	}

	return false
}

// SetTestplanId gets a reference to the given string and assigns it to the TestplanId field.
func (o *UpdateTestCaseGroupResponseResult) SetTestplanId(v string) {
	o.TestplanId = &v
}

// GetCommongroupId returns the CommongroupId field value if set, zero value otherwise.
func (o *UpdateTestCaseGroupResponseResult) GetCommongroupId() string {
	if o == nil || IsNil(o.CommongroupId) {
		var ret string
		return ret
	}
	return *o.CommongroupId
}

// GetCommongroupIdOk returns a tuple with the CommongroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTestCaseGroupResponseResult) GetCommongroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommongroupId) {
		return nil, false
	}
	return o.CommongroupId, true
}

// HasCommongroupId returns a boolean if a field has been set.
func (o *UpdateTestCaseGroupResponseResult) HasCommongroupId() bool {
	if o != nil && !IsNil(o.CommongroupId) {
		return true
	}

	return false
}

// SetCommongroupId gets a reference to the given string and assigns it to the CommongroupId field.
func (o *UpdateTestCaseGroupResponseResult) SetCommongroupId(v string) {
	o.CommongroupId = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *UpdateTestCaseGroupResponseResult) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTestCaseGroupResponseResult) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *UpdateTestCaseGroupResponseResult) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *UpdateTestCaseGroupResponseResult) SetUpdated(v time.Time) {
	o.Updated = &v
}

func (o UpdateTestCaseGroupResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTestCaseGroupResponseResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TestplanId) {
		toSerialize["testplanId"] = o.TestplanId
	}
	if !IsNil(o.CommongroupId) {
		toSerialize["commongroupId"] = o.CommongroupId
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullableUpdateTestCaseGroupResponseResult struct {
	value *UpdateTestCaseGroupResponseResult
	isSet bool
}

func (v NullableUpdateTestCaseGroupResponseResult) Get() *UpdateTestCaseGroupResponseResult {
	return v.value
}

func (v *NullableUpdateTestCaseGroupResponseResult) Set(val *UpdateTestCaseGroupResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTestCaseGroupResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTestCaseGroupResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTestCaseGroupResponseResult(val *UpdateTestCaseGroupResponseResult) *NullableUpdateTestCaseGroupResponseResult {
	return &NullableUpdateTestCaseGroupResponseResult{value: val, isSet: true}
}

func (v NullableUpdateTestCaseGroupResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTestCaseGroupResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


